
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScScheduleDtlDay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SCHEDULE_DTL_DAY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScScheduleDtlDayBase : EntityBase, IScScheduleDtlDay, IEntityId<ScScheduleDtlDayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScScheduleDtlDayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScScheduleDtlDayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScScheduleDtlDayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScScheduleDtlDay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlDayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlDayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlDayBase"/> instance.
		///</summary>
		public ScScheduleDtlDayBase()
		{
			this.entityData = new ScScheduleDtlDayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlDayBase"/> instance.
		///</summary>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_gsCodeWeekDayId"></param>
		///<param name="_scTchngSlotId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_notes"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_edCodeCourseTeachingId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		public ScScheduleDtlDayBase(System.Decimal _scScheduleDtlDayId, System.Decimal _scScheduleDtlId, 
			System.Decimal? _gsCodeWeekDayId, System.Decimal? _scTchngSlotId, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.String _notes, System.DateTime? _fromTime, 
			System.DateTime? _toTime, System.Decimal? _edCodeCourseTeachingId, System.DateTime? _lastDate, 
			System.Decimal? _seFormId, System.Decimal? _seUserId)
		{
			this.entityData = new ScScheduleDtlDayEntityData();
			this.backupData = null;

			this.ScScheduleDtlDayId = _scScheduleDtlDayId;
			this.ScScheduleDtlId = _scScheduleDtlId;
			this.GsCodeWeekDayId = _gsCodeWeekDayId;
			this.ScTchngSlotId = _scTchngSlotId;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.Notes = _notes;
			this.FromTime = _fromTime;
			this.ToTime = _toTime;
			this.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			this.LastDate = _lastDate;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScScheduleDtlDay"/> instance.
		///</summary>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_gsCodeWeekDayId"></param>
		///<param name="_scTchngSlotId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_notes"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_edCodeCourseTeachingId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		public static ScScheduleDtlDay CreateScScheduleDtlDay(System.Decimal _scScheduleDtlDayId, System.Decimal _scScheduleDtlId, 
			System.Decimal? _gsCodeWeekDayId, System.Decimal? _scTchngSlotId, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.String _notes, System.DateTime? _fromTime, 
			System.DateTime? _toTime, System.Decimal? _edCodeCourseTeachingId, System.DateTime? _lastDate, 
			System.Decimal? _seFormId, System.Decimal? _seUserId)
		{
			ScScheduleDtlDay newScScheduleDtlDay = new ScScheduleDtlDay();
			newScScheduleDtlDay.ScScheduleDtlDayId = _scScheduleDtlDayId;
			newScScheduleDtlDay.ScScheduleDtlId = _scScheduleDtlId;
			newScScheduleDtlDay.GsCodeWeekDayId = _gsCodeWeekDayId;
			newScScheduleDtlDay.ScTchngSlotId = _scTchngSlotId;
			newScScheduleDtlDay.ScBuildingId = _scBuildingId;
			newScScheduleDtlDay.ScHallId = _scHallId;
			newScScheduleDtlDay.Notes = _notes;
			newScScheduleDtlDay.FromTime = _fromTime;
			newScScheduleDtlDay.ToTime = _toTime;
			newScScheduleDtlDay.EdCodeCourseTeachingId = _edCodeCourseTeachingId;
			newScScheduleDtlDay.LastDate = _lastDate;
			newScScheduleDtlDay.SeFormId = _seFormId;
			newScScheduleDtlDay.SeUserId = _seUserId;
			return newScScheduleDtlDay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScScheduleDtlDayId
		{
			get
			{
				return this.entityData.ScScheduleDtlDayId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlDayId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				this.entityData.ScScheduleDtlDayId = value;
				this.EntityId.ScScheduleDtlDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				OnPropertyChanged("ScScheduleDtlDayId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SCHEDULE_DTL_DAY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_SCHEDULE_DTL_DAY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScScheduleDtlDayId
		{
			get { return this.entityData.OriginalScScheduleDtlDayId; }
			set { this.entityData.OriginalScScheduleDtlDayId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScScheduleDtlId
		{
			get
			{
				return this.entityData.ScScheduleDtlId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				this.entityData.ScScheduleDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				OnPropertyChanged("ScScheduleDtlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeWeekDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeWeekDayIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeWeekDayId
		{
			get
			{
				return this.entityData.GsCodeWeekDayId; 
			}
			
			set
			{
				if (this.entityData.GsCodeWeekDayId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				this.entityData.GsCodeWeekDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				OnPropertyChanged("GsCodeWeekDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScTchngSlotId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScTchngSlotIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScTchngSlotId
		{
			get
			{
				return this.entityData.ScTchngSlotId; 
			}
			
			set
			{
				if (this.entityData.ScTchngSlotId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ScTchngSlotId, this.entityData.ScTchngSlotId);
				this.entityData.ScTchngSlotId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ScTchngSlotId, this.entityData.ScTchngSlotId);
				OnPropertyChanged("ScTchngSlotId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromTime
		{
			get
			{
				return this.entityData.FromTime; 
			}
			
			set
			{
				if (this.entityData.FromTime == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.FromTime, this.entityData.FromTime);
				this.entityData.FromTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.FromTime, this.entityData.FromTime);
				OnPropertyChanged("FromTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToTime
		{
			get
			{
				return this.entityData.ToTime; 
			}
			
			set
			{
				if (this.entityData.ToTime == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.ToTime, this.entityData.ToTime);
				this.entityData.ToTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.ToTime, this.entityData.ToTime);
				OnPropertyChanged("ToTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseTeachingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseTeachingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseTeachingId
		{
			get
			{
				return this.entityData.EdCodeCourseTeachingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseTeachingId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				this.entityData.EdCodeCourseTeachingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.EdCodeCourseTeachingId, this.entityData.EdCodeCourseTeachingId);
				OnPropertyChanged("EdCodeCourseTeachingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return entityData.EdCodeCourseTeachingIdSource; }
            set { entityData.EdCodeCourseTeachingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return entityData.GsCodeWeekDayIdSource; }
            set { entityData.GsCodeWeekDayIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtl"/>.
		/// </summary>
		/// <value>The source ScScheduleDtl for ScScheduleDtlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScScheduleDtl ScScheduleDtlIdSource
      	{
            get { return entityData.ScScheduleDtlIdSource; }
            set { entityData.ScScheduleDtlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScTchngSlot ScTchngSlotIdSource
      	{
            get { return entityData.ScTchngSlotIdSource; }
            set { entityData.ScTchngSlotIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScScheduleDtlDayException objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_DTL_DAY_Exception_SC_SCHEDULE_DTL_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleDtlDayException> ScScheduleDtlDayExceptionCollection
		{
			get { return entityData.ScScheduleDtlDayExceptionCollection; }
			set { entityData.ScScheduleDtlDayExceptionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudAbsence objects
		///	which are related to this object through the relation FK_ED_STUD_ABSENCE_SCHD_DTL_DY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudAbsence> EdStudAbsenceCollection
		{
			get { return entityData.EdStudAbsenceCollection; }
			set { entityData.EdStudAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudLateness objects
		///	which are related to this object through the relation FK_Ed_Stud_Lateness_SC_SCHEDULE_DTL_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudLateness> EdStudLatenessCollection
		{
			get { return entityData.EdStudLatenessCollection; }
			set { entityData.EdStudLatenessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdAbsenceApprove objects
		///	which are related to this object through the relation FK_ED_ABSENCE_APPROVE_SC_SCHEDULE_DTL_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAbsenceApprove> EdAbsenceApproveCollection
		{
			get { return entityData.EdAbsenceApproveCollection; }
			set { entityData.EdAbsenceApproveCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SCHEDULE_DTL_DAY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SCHEDULE_DTL_DAY_ID", "SC_SCHEDULE_DTL_ID", "GS_CODE_WEEK_DAY_ID", "SC_TCHNG_SLOT_ID", "SC_BUILDING_ID", "SC_HALL_ID", "NOTES", "FROM_TIME", "TO_TIME", "ED_CODE_COURSE_TEACHING_ID", "LAST_DATE", "SE_FORM_ID", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScScheduleDtlDayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScScheduleDtlDay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScScheduleDtlDay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScScheduleDtlDay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScScheduleDtlDay Entity 
		///</summary>
		protected virtual ScScheduleDtlDay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScScheduleDtlDay copy = new ScScheduleDtlDay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
					copy.OriginalScScheduleDtlDayId = this.OriginalScScheduleDtlDayId;
				copy.ScScheduleDtlId = this.ScScheduleDtlId;
				copy.GsCodeWeekDayId = this.GsCodeWeekDayId;
				copy.ScTchngSlotId = this.ScTchngSlotId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.Notes = this.Notes;
				copy.FromTime = this.FromTime;
				copy.ToTime = this.ToTime;
				copy.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
				copy.LastDate = this.LastDate;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
			
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				copy.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				copy.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				copy.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				copy.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScScheduleDtlIdSource != null && existingCopies.Contains(this.ScScheduleDtlIdSource))
				copy.ScScheduleDtlIdSource = existingCopies[this.ScScheduleDtlIdSource] as ScScheduleDtl;
			else
				copy.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource, existingCopies) as ScScheduleDtl;
			if (this.ScTchngSlotIdSource != null && existingCopies.Contains(this.ScTchngSlotIdSource))
				copy.ScTchngSlotIdSource = existingCopies[this.ScTchngSlotIdSource] as ScTchngSlot;
			else
				copy.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource, existingCopies) as ScTchngSlot;
		
			//deep copy nested objects
			copy.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection, existingCopies); 
			copy.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection, existingCopies); 
			copy.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection, existingCopies); 
			copy.EdAbsenceApproveCollection = (TList<EdAbsenceApprove>) MakeCopyOf(this.EdAbsenceApproveCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtlDay Entity 
		///</summary>
		public virtual ScScheduleDtlDay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtlDay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScScheduleDtlDay DeepCopy()
		{
			return EntityHelper.Clone<ScScheduleDtlDay>(this as ScScheduleDtlDay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScScheduleDtlDayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScScheduleDtlDayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScScheduleDtlDayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScScheduleDtlDayColumn column)
		{
			switch(column)
			{
					case ScScheduleDtlDayColumn.ScScheduleDtlDayId:
					return entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
					case ScScheduleDtlDayColumn.ScScheduleDtlId:
					return entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
					case ScScheduleDtlDayColumn.GsCodeWeekDayId:
					return entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
					case ScScheduleDtlDayColumn.ScTchngSlotId:
					return entityData.ScTchngSlotId != _originalData.ScTchngSlotId;
					case ScScheduleDtlDayColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case ScScheduleDtlDayColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case ScScheduleDtlDayColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case ScScheduleDtlDayColumn.FromTime:
					return entityData.FromTime != _originalData.FromTime;
					case ScScheduleDtlDayColumn.ToTime:
					return entityData.ToTime != _originalData.ToTime;
					case ScScheduleDtlDayColumn.EdCodeCourseTeachingId:
					return entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
					case ScScheduleDtlDayColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case ScScheduleDtlDayColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case ScScheduleDtlDayColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScScheduleDtlDayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
			result = result || entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
			result = result || entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
			result = result || entityData.ScTchngSlotId != _originalData.ScTchngSlotId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.FromTime != _originalData.FromTime;
			result = result || entityData.ToTime != _originalData.ToTime;
			result = result || entityData.EdCodeCourseTeachingId != _originalData.EdCodeCourseTeachingId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScScheduleDtlDay Entity with the original data.
		///</summary>
		public ScScheduleDtlDay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScScheduleDtlDay(
				_originalData.ScScheduleDtlDayId,
				_originalData.ScScheduleDtlId,
				_originalData.GsCodeWeekDayId,
				_originalData.ScTchngSlotId,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.Notes,
				_originalData.FromTime,
				_originalData.ToTime,
				_originalData.EdCodeCourseTeachingId,
				_originalData.LastDate,
				_originalData.SeFormId,
				_originalData.SeUserId
				);
				
			return (ScScheduleDtlDay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScScheduleDtlDayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScScheduleDtlDayBase)
				return ValueEquals(this, (ScScheduleDtlDayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScScheduleDtlDayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScScheduleDtlDayId.GetHashCode() ^ 
					this.ScScheduleDtlId.GetHashCode() ^ 
					((this.GsCodeWeekDayId == null) ? string.Empty : this.GsCodeWeekDayId.ToString()).GetHashCode() ^ 
					((this.ScTchngSlotId == null) ? string.Empty : this.ScTchngSlotId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.FromTime == null) ? string.Empty : this.FromTime.ToString()).GetHashCode() ^ 
					((this.ToTime == null) ? string.Empty : this.ToTime.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScScheduleDtlDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScScheduleDtlDayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScScheduleDtlDayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScScheduleDtlDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScScheduleDtlDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScScheduleDtlDayBase Object1, ScScheduleDtlDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScScheduleDtlDayId != Object2.ScScheduleDtlDayId)
				equal = false;
			if (Object1.ScScheduleDtlId != Object2.ScScheduleDtlId)
				equal = false;
			if ( Object1.GsCodeWeekDayId != null && Object2.GsCodeWeekDayId != null )
			{
				if (Object1.GsCodeWeekDayId != Object2.GsCodeWeekDayId)
					equal = false;
			}
			else if (Object1.GsCodeWeekDayId == null ^ Object2.GsCodeWeekDayId == null )
			{
				equal = false;
			}
			if ( Object1.ScTchngSlotId != null && Object2.ScTchngSlotId != null )
			{
				if (Object1.ScTchngSlotId != Object2.ScTchngSlotId)
					equal = false;
			}
			else if (Object1.ScTchngSlotId == null ^ Object2.ScTchngSlotId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.FromTime != null && Object2.FromTime != null )
			{
				if (Object1.FromTime != Object2.FromTime)
					equal = false;
			}
			else if (Object1.FromTime == null ^ Object2.FromTime == null )
			{
				equal = false;
			}
			if ( Object1.ToTime != null && Object2.ToTime != null )
			{
				if (Object1.ToTime != Object2.ToTime)
					equal = false;
			}
			else if (Object1.ToTime == null ^ Object2.ToTime == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseTeachingId != null && Object2.EdCodeCourseTeachingId != null )
			{
				if (Object1.EdCodeCourseTeachingId != Object2.EdCodeCourseTeachingId)
					equal = false;
			}
			else if (Object1.EdCodeCourseTeachingId == null ^ Object2.EdCodeCourseTeachingId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScScheduleDtlDayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScScheduleDtlDayComparer GetComparer()
        {
            return new ScScheduleDtlDayComparer();
        }
        */

        // Comparer delegates back to ScScheduleDtlDay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScScheduleDtlDay rhs, ScScheduleDtlDayColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScScheduleDtlDayColumn.ScScheduleDtlDayId:
            		return this.ScScheduleDtlDayId.CompareTo(rhs.ScScheduleDtlDayId);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.ScScheduleDtlId:
            		return this.ScScheduleDtlId.CompareTo(rhs.ScScheduleDtlId);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.GsCodeWeekDayId:
            		return this.GsCodeWeekDayId.Value.CompareTo(rhs.GsCodeWeekDayId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.ScTchngSlotId:
            		return this.ScTchngSlotId.Value.CompareTo(rhs.ScTchngSlotId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.FromTime:
            		return this.FromTime.Value.CompareTo(rhs.FromTime.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.ToTime:
            		return this.ToTime.Value.CompareTo(rhs.ToTime.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.EdCodeCourseTeachingId:
            		return this.EdCodeCourseTeachingId.Value.CompareTo(rhs.EdCodeCourseTeachingId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScScheduleDtlDayKey> Members
		
		// member variable for the EntityId property
		private ScScheduleDtlDayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScScheduleDtlDayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScScheduleDtlDayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScScheduleDtlDay")
					.Append("|").Append( this.ScScheduleDtlDayId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- ScScheduleDtlDayId: {0}{13}- ScScheduleDtlId: {1}{13}- GsCodeWeekDayId: {2}{13}- ScTchngSlotId: {3}{13}- ScBuildingId: {4}{13}- ScHallId: {5}{13}- Notes: {6}{13}- FromTime: {7}{13}- ToTime: {8}{13}- EdCodeCourseTeachingId: {9}{13}- LastDate: {10}{13}- SeFormId: {11}{13}- SeUserId: {12}{13}{15}", 
				this.ScScheduleDtlDayId,
				this.ScScheduleDtlId,
				(this.GsCodeWeekDayId == null) ? string.Empty : this.GsCodeWeekDayId.ToString(),
				(this.ScTchngSlotId == null) ? string.Empty : this.ScTchngSlotId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.FromTime == null) ? string.Empty : this.FromTime.ToString(),
				(this.ToTime == null) ? string.Empty : this.ToTime.ToString(),
				(this.EdCodeCourseTeachingId == null) ? string.Empty : this.EdCodeCourseTeachingId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SCHEDULE_DTL_DAY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScScheduleDtlDayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SCHEDULE_DTL_DAY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SCHEDULE_DTL_DAY"</remarks>
		public System.Decimal ScScheduleDtlDayId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScScheduleDtlDayId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_SCHEDULE_DTL_ID : 
		/// </summary>
		public System.Decimal		  ScScheduleDtlId = 0.0m;
		
		/// <summary>
		/// GS_CODE_WEEK_DAY_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeWeekDayId = null;
		
		/// <summary>
		/// SC_TCHNG_SLOT_ID : 
		/// </summary>
		public System.Decimal?		  ScTchngSlotId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : 
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// FROM_TIME : 
		/// </summary>
		public System.DateTime?		  FromTime = null;
		
		/// <summary>
		/// TO_TIME : 
		/// </summary>
		public System.DateTime?		  ToTime = null;
		
		/// <summary>
		/// ED_CODE_COURSE_TEACHING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseTeachingId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseTeaching _edCodeCourseTeachingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseTeaching"/>.
		/// </summary>
		/// <value>The source EdCodeCourseTeaching for EdCodeCourseTeachingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseTeaching EdCodeCourseTeachingIdSource
      	{
            get { return this._edCodeCourseTeachingIdSource; }
            set { this._edCodeCourseTeachingIdSource = value; }
      	}
		private GsCodeWeekDay _gsCodeWeekDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return this._gsCodeWeekDayIdSource; }
            set { this._gsCodeWeekDayIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private ScScheduleDtl _scScheduleDtlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtl"/>.
		/// </summary>
		/// <value>The source ScScheduleDtl for ScScheduleDtlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScScheduleDtl ScScheduleDtlIdSource
      	{
            get { return this._scScheduleDtlIdSource; }
            set { this._scScheduleDtlIdSource = value; }
      	}
		private ScTchngSlot _scTchngSlotIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScTchngSlot"/>.
		/// </summary>
		/// <value>The source ScTchngSlot for ScTchngSlotId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScTchngSlot ScTchngSlotIdSource
      	{
            get { return this._scTchngSlotIdSource; }
            set { this._scTchngSlotIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScScheduleDtlDayExceptionCollection
		
		private TList<ScScheduleDtlDayException> _scScheduleDtlDayExceptionScScheduleDtlDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleDtlDayExceptionScScheduleDtlDayId
		/// </summary>
		
		public TList<ScScheduleDtlDayException> ScScheduleDtlDayExceptionCollection
		{
			get
			{
				if (_scScheduleDtlDayExceptionScScheduleDtlDayId == null)
				{
				_scScheduleDtlDayExceptionScScheduleDtlDayId = new TList<ScScheduleDtlDayException>();
				}
	
				return _scScheduleDtlDayExceptionScScheduleDtlDayId;
			}
			set { _scScheduleDtlDayExceptionScScheduleDtlDayId = value; }
		}
		
		#endregion

		#region EdStudAbsenceCollection
		
		private TList<EdStudAbsence> _edStudAbsenceScScheduleDtlDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudAbsenceScScheduleDtlDayId
		/// </summary>
		
		public TList<EdStudAbsence> EdStudAbsenceCollection
		{
			get
			{
				if (_edStudAbsenceScScheduleDtlDayId == null)
				{
				_edStudAbsenceScScheduleDtlDayId = new TList<EdStudAbsence>();
				}
	
				return _edStudAbsenceScScheduleDtlDayId;
			}
			set { _edStudAbsenceScScheduleDtlDayId = value; }
		}
		
		#endregion

		#region EdStudLatenessCollection
		
		private TList<EdStudLateness> _edStudLatenessScScheduleDtlDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudLatenessScScheduleDtlDayId
		/// </summary>
		
		public TList<EdStudLateness> EdStudLatenessCollection
		{
			get
			{
				if (_edStudLatenessScScheduleDtlDayId == null)
				{
				_edStudLatenessScScheduleDtlDayId = new TList<EdStudLateness>();
				}
	
				return _edStudLatenessScScheduleDtlDayId;
			}
			set { _edStudLatenessScScheduleDtlDayId = value; }
		}
		
		#endregion

		#region EdAbsenceApproveCollection
		
		private TList<EdAbsenceApprove> _edAbsenceApproveScScheduleDtlDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAbsenceApproveScScheduleDtlDayId
		/// </summary>
		
		public TList<EdAbsenceApprove> EdAbsenceApproveCollection
		{
			get
			{
				if (_edAbsenceApproveScScheduleDtlDayId == null)
				{
				_edAbsenceApproveScScheduleDtlDayId = new TList<EdAbsenceApprove>();
				}
	
				return _edAbsenceApproveScScheduleDtlDayId;
			}
			set { _edAbsenceApproveScScheduleDtlDayId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScScheduleDtlDayEntityData _tmp = new ScScheduleDtlDayEntityData();
						
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.OriginalScScheduleDtlDayId = this.OriginalScScheduleDtlDayId;
			
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.ScTchngSlotId = this.ScTchngSlotId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Notes = this.Notes;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseTeachingIdSource != null)
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource) as EdCodeCourseTeaching;
			if (this.GsCodeWeekDayIdSource != null)
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.ScScheduleDtlIdSource != null)
				_tmp.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource) as ScScheduleDtl;
			if (this.ScTchngSlotIdSource != null)
				_tmp.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scScheduleDtlDayExceptionScScheduleDtlDayId != null)
				_tmp.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection); 
			if (this._edStudAbsenceScScheduleDtlDayId != null)
				_tmp.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection); 
			if (this._edStudLatenessScScheduleDtlDayId != null)
				_tmp.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection); 
			if (this._edAbsenceApproveScScheduleDtlDayId != null)
				_tmp.EdAbsenceApproveCollection = (TList<EdAbsenceApprove>) MakeCopyOf(this.EdAbsenceApproveCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScScheduleDtlDayEntityData _tmp = new ScScheduleDtlDayEntityData();
						
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.OriginalScScheduleDtlDayId = this.OriginalScScheduleDtlDayId;
			
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.ScTchngSlotId = this.ScTchngSlotId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.Notes = this.Notes;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.EdCodeCourseTeachingId = this.EdCodeCourseTeachingId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseTeachingIdSource != null && existingCopies.Contains(this.EdCodeCourseTeachingIdSource))
				_tmp.EdCodeCourseTeachingIdSource = existingCopies[this.EdCodeCourseTeachingIdSource] as EdCodeCourseTeaching;
			else
				_tmp.EdCodeCourseTeachingIdSource = MakeCopyOf(this.EdCodeCourseTeachingIdSource, existingCopies) as EdCodeCourseTeaching;
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				_tmp.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScScheduleDtlIdSource != null && existingCopies.Contains(this.ScScheduleDtlIdSource))
				_tmp.ScScheduleDtlIdSource = existingCopies[this.ScScheduleDtlIdSource] as ScScheduleDtl;
			else
				_tmp.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource, existingCopies) as ScScheduleDtl;
			if (this.ScTchngSlotIdSource != null && existingCopies.Contains(this.ScTchngSlotIdSource))
				_tmp.ScTchngSlotIdSource = existingCopies[this.ScTchngSlotIdSource] as ScTchngSlot;
			else
				_tmp.ScTchngSlotIdSource = MakeCopyOf(this.ScTchngSlotIdSource, existingCopies) as ScTchngSlot;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection, existingCopies); 
			_tmp.EdStudAbsenceCollection = (TList<EdStudAbsence>) MakeCopyOf(this.EdStudAbsenceCollection, existingCopies); 
			_tmp.EdStudLatenessCollection = (TList<EdStudLateness>) MakeCopyOf(this.EdStudLatenessCollection, existingCopies); 
			_tmp.EdAbsenceApproveCollection = (TList<EdAbsenceApprove>) MakeCopyOf(this.EdAbsenceApproveCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScScheduleDtlDayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScScheduleDtlDayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScScheduleDtlDayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlDayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlDayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScScheduleDtlDayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlDayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlDayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScScheduleDtlDayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScScheduleDtlDay"/> object.
	/// </remarks>
	public class ScScheduleDtlDayEventArgs : System.EventArgs
	{
		private ScScheduleDtlDayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlDayEventArgs class.
		///</summary>
		public ScScheduleDtlDayEventArgs(ScScheduleDtlDayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlDayEventArgs class.
		///</summary>
		public ScScheduleDtlDayEventArgs(ScScheduleDtlDayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScScheduleDtlDayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScScheduleDtlDayColumn" />
		public ScScheduleDtlDayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScScheduleDtlDay related events.
	///</summary>
	public delegate void ScScheduleDtlDayEventHandler(object sender, ScScheduleDtlDayEventArgs e);
	
	#region ScScheduleDtlDayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScScheduleDtlDayComparer : System.Collections.Generic.IComparer<ScScheduleDtlDay>
	{
		ScScheduleDtlDayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlDayComparer"/> class.
        /// </summary>
		public ScScheduleDtlDayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlDayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScScheduleDtlDayComparer(ScScheduleDtlDayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScScheduleDtlDay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScScheduleDtlDay"/> to compare.</param>
        /// <param name="b">The second <c>ScScheduleDtlDay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScScheduleDtlDay a, ScScheduleDtlDay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScScheduleDtlDay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScScheduleDtlDay a, ScScheduleDtlDay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScScheduleDtlDayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScScheduleDtlDayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScScheduleDtlDay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScScheduleDtlDayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayKey class.
		/// </summary>
		public ScScheduleDtlDayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayKey class.
		/// </summary>
		public ScScheduleDtlDayKey(ScScheduleDtlDayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScScheduleDtlDayId = entity.ScScheduleDtlDayId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayKey class.
		/// </summary>
		public ScScheduleDtlDayKey(System.Decimal _scScheduleDtlDayId)
		{
			#region Init Properties

			this.ScScheduleDtlDayId = _scScheduleDtlDayId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScScheduleDtlDayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScScheduleDtlDayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScScheduleDtlDayId property
		private System.Decimal _scScheduleDtlDayId;
		
		/// <summary>
		/// Gets or sets the ScScheduleDtlDayId property.
		/// </summary>
		public System.Decimal ScScheduleDtlDayId
		{
			get { return _scScheduleDtlDayId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScScheduleDtlDayId = value;
				
				_scScheduleDtlDayId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScScheduleDtlDayId = ( values["ScScheduleDtlDayId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScScheduleDtlDayId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScScheduleDtlDayId", ScScheduleDtlDayId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScScheduleDtlDayId: {0}{1}",
								ScScheduleDtlDayId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScScheduleDtlDayColumn Enum
	
	/// <summary>
	/// Enumerate the ScScheduleDtlDay columns.
	/// </summary>
	[Serializable]
	public enum ScScheduleDtlDayColumn : int
	{
		/// <summary>
		/// ScScheduleDtlDayId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_DAY_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScScheduleDtlDayId = 1,
		/// <summary>
		/// ScScheduleDtlId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScScheduleDtlId = 2,
		/// <summary>
		/// GsCodeWeekDayId : 
		/// </summary>
		[EnumTextValue("GS_CODE_WEEK_DAY_ID")]
		[ColumnEnum("GS_CODE_WEEK_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeWeekDayId = 3,
		/// <summary>
		/// ScTchngSlotId : 
		/// </summary>
		[EnumTextValue("SC_TCHNG_SLOT_ID")]
		[ColumnEnum("SC_TCHNG_SLOT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScTchngSlotId = 4,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 5,
		/// <summary>
		/// ScHallId : 
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 6,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 7,
		/// <summary>
		/// FromTime : 
		/// </summary>
		[EnumTextValue("FROM_TIME")]
		[ColumnEnum("FROM_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromTime = 8,
		/// <summary>
		/// ToTime : 
		/// </summary>
		[EnumTextValue("TO_TIME")]
		[ColumnEnum("TO_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToTime = 9,
		/// <summary>
		/// EdCodeCourseTeachingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_TEACHING_ID")]
		[ColumnEnum("ED_CODE_COURSE_TEACHING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseTeachingId = 10,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 11,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13
	}//End enum

	#endregion ScScheduleDtlDayColumn Enum

} // end namespace
