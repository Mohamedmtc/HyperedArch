
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgStudConference.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_STUD_CONFERENCE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgStudConferenceBase : EntityBase, IPgStudConference, IEntityId<PgStudConferenceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgStudConferenceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgStudConferenceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgStudConferenceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgStudConference> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudConferenceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudConferenceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgStudConferenceBase"/> instance.
		///</summary>
		public PgStudConferenceBase()
		{
			this.entityData = new PgStudConferenceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgStudConferenceBase"/> instance.
		///</summary>
		///<param name="_pgStudConferenceId">تسجيل بيانات حضور المؤتمرات العلمية</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_conferenceTitleEn">اسم المؤتمر</param>
		///<param name="_fromDate">تاريخ بدء المؤتمر</param>
		///<param name="_toDate">تاريخ نهاية المؤتمر</param>
		///<param name="_presentationFlg">الطالب قام بالعرض</param>
		///<param name="_presentationDate">تاريخ العرض</param>
		///<param name="_outFlg">1: external  0:internal</param>
		///<param name="_gsCountryNodeId">بلد المؤتمر</param>
		///<param name="_pgCdeConfTypeId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public PgStudConferenceBase(System.Decimal _pgStudConferenceId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.String _conferenceTitleEn, System.DateTime? _fromDate, 
			System.DateTime? _toDate, System.Boolean? _presentationFlg, System.DateTime? _presentationDate, 
			System.Boolean? _outFlg, System.Decimal? _gsCountryNodeId, System.Int32 _pgCdeConfTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			this.entityData = new PgStudConferenceEntityData();
			this.backupData = null;

			this.PgStudConferenceId = _pgStudConferenceId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdStudId = _edStudId;
			this.ConferenceTitleEn = _conferenceTitleEn;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.PresentationFlg = _presentationFlg;
			this.PresentationDate = _presentationDate;
			this.OutFlg = _outFlg;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.PgCdeConfTypeId = _pgCdeConfTypeId;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgStudConference"/> instance.
		///</summary>
		///<param name="_pgStudConferenceId">تسجيل بيانات حضور المؤتمرات العلمية</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_conferenceTitleEn">اسم المؤتمر</param>
		///<param name="_fromDate">تاريخ بدء المؤتمر</param>
		///<param name="_toDate">تاريخ نهاية المؤتمر</param>
		///<param name="_presentationFlg">الطالب قام بالعرض</param>
		///<param name="_presentationDate">تاريخ العرض</param>
		///<param name="_outFlg">1: external  0:internal</param>
		///<param name="_gsCountryNodeId">بلد المؤتمر</param>
		///<param name="_pgCdeConfTypeId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static PgStudConference CreatePgStudConference(System.Decimal _pgStudConferenceId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.String _conferenceTitleEn, System.DateTime? _fromDate, 
			System.DateTime? _toDate, System.Boolean? _presentationFlg, System.DateTime? _presentationDate, 
			System.Boolean? _outFlg, System.Decimal? _gsCountryNodeId, System.Int32 _pgCdeConfTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			PgStudConference newPgStudConference = new PgStudConference();
			newPgStudConference.PgStudConferenceId = _pgStudConferenceId;
			newPgStudConference.EdAcadYearId = _edAcadYearId;
			newPgStudConference.EdStudId = _edStudId;
			newPgStudConference.ConferenceTitleEn = _conferenceTitleEn;
			newPgStudConference.FromDate = _fromDate;
			newPgStudConference.ToDate = _toDate;
			newPgStudConference.PresentationFlg = _presentationFlg;
			newPgStudConference.PresentationDate = _presentationDate;
			newPgStudConference.OutFlg = _outFlg;
			newPgStudConference.GsCountryNodeId = _gsCountryNodeId;
			newPgStudConference.PgCdeConfTypeId = _pgCdeConfTypeId;
			newPgStudConference.LastDate = _lastDate;
			newPgStudConference.SeUserId = _seUserId;
			return newPgStudConference;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgStudConferenceId property. 
		///		تسجيل بيانات حضور المؤتمرات العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل بيانات حضور المؤتمرات العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgStudConferenceId
		{
			get
			{
				return this.entityData.PgStudConferenceId; 
			}
			
			set
			{
				if (this.entityData.PgStudConferenceId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.PgStudConferenceId, this.entityData.PgStudConferenceId);
				this.entityData.PgStudConferenceId = value;
				this.EntityId.PgStudConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.PgStudConferenceId, this.entityData.PgStudConferenceId);
				OnPropertyChanged("PgStudConferenceId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_STUD_CONFERENCE_ID property.
		///		تسجيل بيانات حضور المؤتمرات العلمية
		/// </summary>
		/// <remarks>This is the original value of the PG_STUD_CONFERENCE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgStudConferenceId
		{
			get { return this.entityData.OriginalPgStudConferenceId; }
			set { this.entityData.OriginalPgStudConferenceId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		ONLY PG STUD
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ONLY PG STUD"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceTitleEn property. 
		///		اسم المؤتمر
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم المؤتمر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String ConferenceTitleEn
		{
			get
			{
				return this.entityData.ConferenceTitleEn; 
			}
			
			set
			{
				if (this.entityData.ConferenceTitleEn == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.ConferenceTitleEn, this.entityData.ConferenceTitleEn);
				this.entityData.ConferenceTitleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.ConferenceTitleEn, this.entityData.ConferenceTitleEn);
				OnPropertyChanged("ConferenceTitleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		تاريخ بدء المؤتمر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ بدء المؤتمر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		تاريخ نهاية المؤتمر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ نهاية المؤتمر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PresentationFlg property. 
		///		الطالب قام بالعرض
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPresentationFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الطالب قام بالعرض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PresentationFlg
		{
			get
			{
				return this.entityData.PresentationFlg; 
			}
			
			set
			{
				if (this.entityData.PresentationFlg == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.PresentationFlg, this.entityData.PresentationFlg);
				this.entityData.PresentationFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.PresentationFlg, this.entityData.PresentationFlg);
				OnPropertyChanged("PresentationFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PresentationDate property. 
		///		تاريخ العرض
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPresentationDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ العرض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PresentationDate
		{
			get
			{
				return this.entityData.PresentationDate; 
			}
			
			set
			{
				if (this.entityData.PresentationDate == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.PresentationDate, this.entityData.PresentationDate);
				this.entityData.PresentationDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.PresentationDate, this.entityData.PresentationDate);
				OnPropertyChanged("PresentationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutFlg property. 
		///		1: external  0:internal
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOutFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1: external  0:internal"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OutFlg
		{
			get
			{
				return this.entityData.OutFlg; 
			}
			
			set
			{
				if (this.entityData.OutFlg == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.OutFlg, this.entityData.OutFlg);
				this.entityData.OutFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.OutFlg, this.entityData.OutFlg);
				OnPropertyChanged("OutFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		بلد المؤتمر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"بلد المؤتمر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgCdeConfTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PgCdeConfTypeId
		{
			get
			{
				return this.entityData.PgCdeConfTypeId; 
			}
			
			set
			{
				if (this.entityData.PgCdeConfTypeId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.PgCdeConfTypeId, this.entityData.PgCdeConfTypeId);
				this.entityData.PgCdeConfTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.PgCdeConfTypeId, this.entityData.PgCdeConfTypeId);
				OnPropertyChanged("PgCdeConfTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgStudConferenceColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudConferenceColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgCdeConfType"/>.
		/// </summary>
		/// <value>The source PgCdeConfType for PgCdeConfTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgCdeConfType PgCdeConfTypeIdSource
      	{
            get { return entityData.PgCdeConfTypeIdSource; }
            set { entityData.PgCdeConfTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgAttchdDoc objects
		///	which are related to this object through the relation FK_PG_ATTCHD_DOC_PG_STUD_CONFERENCE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get { return entityData.PgAttchdDocCollection; }
			set { entityData.PgAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ConferenceTitleEn", "Conference Title En", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_STUD_CONFERENCE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_STUD_CONFERENCE_ID", "ED_ACAD_YEAR_ID", "ED_STUD_ID", "CONFERENCE_TITLE_EN", "FROM_DATE", "TO_DATE", "PRESENTATION_FLG", "PRESENTATION_DATE", "OUT_FLG", "GS_COUNTRY_NODE_ID", "PG_CDE_CONF_TYPE_ID", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgStudConferenceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgStudConference) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgStudConference>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgStudConference);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgStudConference Entity 
		///</summary>
		protected virtual PgStudConference Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgStudConference copy = new PgStudConference();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgStudConferenceId = this.PgStudConferenceId;
					copy.OriginalPgStudConferenceId = this.OriginalPgStudConferenceId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdStudId = this.EdStudId;
				copy.ConferenceTitleEn = this.ConferenceTitleEn;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.PresentationFlg = this.PresentationFlg;
				copy.PresentationDate = this.PresentationDate;
				copy.OutFlg = this.OutFlg;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.PgCdeConfTypeId = this.PgCdeConfTypeId;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.PgCdeConfTypeIdSource != null && existingCopies.Contains(this.PgCdeConfTypeIdSource))
				copy.PgCdeConfTypeIdSource = existingCopies[this.PgCdeConfTypeIdSource] as PgCdeConfType;
			else
				copy.PgCdeConfTypeIdSource = MakeCopyOf(this.PgCdeConfTypeIdSource, existingCopies) as PgCdeConfType;
		
			//deep copy nested objects
			copy.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgStudConference Entity 
		///</summary>
		public virtual PgStudConference Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgStudConference Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgStudConference DeepCopy()
		{
			return EntityHelper.Clone<PgStudConference>(this as PgStudConference);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgStudConferenceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgStudConferenceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgStudConferenceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgStudConferenceColumn column)
		{
			switch(column)
			{
					case PgStudConferenceColumn.PgStudConferenceId:
					return entityData.PgStudConferenceId != _originalData.PgStudConferenceId;
					case PgStudConferenceColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case PgStudConferenceColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case PgStudConferenceColumn.ConferenceTitleEn:
					return entityData.ConferenceTitleEn != _originalData.ConferenceTitleEn;
					case PgStudConferenceColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case PgStudConferenceColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case PgStudConferenceColumn.PresentationFlg:
					return entityData.PresentationFlg != _originalData.PresentationFlg;
					case PgStudConferenceColumn.PresentationDate:
					return entityData.PresentationDate != _originalData.PresentationDate;
					case PgStudConferenceColumn.OutFlg:
					return entityData.OutFlg != _originalData.OutFlg;
					case PgStudConferenceColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case PgStudConferenceColumn.PgCdeConfTypeId:
					return entityData.PgCdeConfTypeId != _originalData.PgCdeConfTypeId;
					case PgStudConferenceColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case PgStudConferenceColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgStudConferenceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgStudConferenceId != _originalData.PgStudConferenceId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ConferenceTitleEn != _originalData.ConferenceTitleEn;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.PresentationFlg != _originalData.PresentationFlg;
			result = result || entityData.PresentationDate != _originalData.PresentationDate;
			result = result || entityData.OutFlg != _originalData.OutFlg;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.PgCdeConfTypeId != _originalData.PgCdeConfTypeId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a PgStudConference Entity with the original data.
		///</summary>
		public PgStudConference GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgStudConference(
				_originalData.PgStudConferenceId,
				_originalData.EdAcadYearId,
				_originalData.EdStudId,
				_originalData.ConferenceTitleEn,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.PresentationFlg,
				_originalData.PresentationDate,
				_originalData.OutFlg,
				_originalData.GsCountryNodeId,
				_originalData.PgCdeConfTypeId,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (PgStudConference)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgStudConferenceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgStudConferenceBase)
				return ValueEquals(this, (PgStudConferenceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgStudConferenceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgStudConferenceId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.ConferenceTitleEn == null) ? string.Empty : this.ConferenceTitleEn.ToString()).GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					((this.PresentationFlg == null) ? string.Empty : this.PresentationFlg.ToString()).GetHashCode() ^ 
					((this.PresentationDate == null) ? string.Empty : this.PresentationDate.ToString()).GetHashCode() ^ 
					((this.OutFlg == null) ? string.Empty : this.OutFlg.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					this.PgCdeConfTypeId.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgStudConferenceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgStudConferenceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgStudConferenceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgStudConferenceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgStudConferenceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgStudConferenceBase Object1, PgStudConferenceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgStudConferenceId != Object2.PgStudConferenceId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.ConferenceTitleEn != null && Object2.ConferenceTitleEn != null )
			{
				if (Object1.ConferenceTitleEn != Object2.ConferenceTitleEn)
					equal = false;
			}
			else if (Object1.ConferenceTitleEn == null ^ Object2.ConferenceTitleEn == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.PresentationFlg != null && Object2.PresentationFlg != null )
			{
				if (Object1.PresentationFlg != Object2.PresentationFlg)
					equal = false;
			}
			else if (Object1.PresentationFlg == null ^ Object2.PresentationFlg == null )
			{
				equal = false;
			}
			if ( Object1.PresentationDate != null && Object2.PresentationDate != null )
			{
				if (Object1.PresentationDate != Object2.PresentationDate)
					equal = false;
			}
			else if (Object1.PresentationDate == null ^ Object2.PresentationDate == null )
			{
				equal = false;
			}
			if ( Object1.OutFlg != null && Object2.OutFlg != null )
			{
				if (Object1.OutFlg != Object2.OutFlg)
					equal = false;
			}
			else if (Object1.OutFlg == null ^ Object2.OutFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if (Object1.PgCdeConfTypeId != Object2.PgCdeConfTypeId)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgStudConferenceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgStudConferenceComparer GetComparer()
        {
            return new PgStudConferenceComparer();
        }
        */

        // Comparer delegates back to PgStudConference
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgStudConference rhs, PgStudConferenceColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgStudConferenceColumn.PgStudConferenceId:
            		return this.PgStudConferenceId.CompareTo(rhs.PgStudConferenceId);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.ConferenceTitleEn:
            		return this.ConferenceTitleEn.CompareTo(rhs.ConferenceTitleEn);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.PresentationFlg:
            		return this.PresentationFlg.Value.CompareTo(rhs.PresentationFlg.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.PresentationDate:
            		return this.PresentationDate.Value.CompareTo(rhs.PresentationDate.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.OutFlg:
            		return this.OutFlg.Value.CompareTo(rhs.OutFlg.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.PgCdeConfTypeId:
            		return this.PgCdeConfTypeId.CompareTo(rhs.PgCdeConfTypeId);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case PgStudConferenceColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgStudConferenceKey> Members
		
		// member variable for the EntityId property
		private PgStudConferenceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgStudConferenceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgStudConferenceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgStudConference")
					.Append("|").Append( this.PgStudConferenceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- PgStudConferenceId: {0}{13}- EdAcadYearId: {1}{13}- EdStudId: {2}{13}- ConferenceTitleEn: {3}{13}- FromDate: {4}{13}- ToDate: {5}{13}- PresentationFlg: {6}{13}- PresentationDate: {7}{13}- OutFlg: {8}{13}- GsCountryNodeId: {9}{13}- PgCdeConfTypeId: {10}{13}- LastDate: {11}{13}- SeUserId: {12}{13}{15}", 
				this.PgStudConferenceId,
				this.EdAcadYearId,
				this.EdStudId,
				(this.ConferenceTitleEn == null) ? string.Empty : this.ConferenceTitleEn.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.PresentationFlg == null) ? string.Empty : this.PresentationFlg.ToString(),
				(this.PresentationDate == null) ? string.Empty : this.PresentationDate.ToString(),
				(this.OutFlg == null) ? string.Empty : this.OutFlg.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				this.PgCdeConfTypeId,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_STUD_CONFERENCE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgStudConferenceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_STUD_CONFERENCE_ID : تسجيل بيانات حضور المؤتمرات العلمية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_STUD_CONFERENCE"</remarks>
		public System.Decimal PgStudConferenceId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgStudConferenceId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : ONLY PG STUD
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// CONFERENCE_TITLE_EN : اسم المؤتمر
		/// </summary>
		public System.String		  ConferenceTitleEn = null;
		
		/// <summary>
		/// FROM_DATE : تاريخ بدء المؤتمر
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : تاريخ نهاية المؤتمر
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// PRESENTATION_FLG : الطالب قام بالعرض
		/// </summary>
		public System.Boolean?		  PresentationFlg = null;
		
		/// <summary>
		/// PRESENTATION_DATE : تاريخ العرض
		/// </summary>
		public System.DateTime?		  PresentationDate = null;
		
		/// <summary>
		/// OUT_FLG : 1: external  0:internal
		/// </summary>
		public System.Boolean?		  OutFlg = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : بلد المؤتمر
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// PG_CDE_CONF_TYPE_ID : 
		/// </summary>
		public System.Int32		  PgCdeConfTypeId = (int)0;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		private PgCdeConfType _pgCdeConfTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgCdeConfType"/>.
		/// </summary>
		/// <value>The source PgCdeConfType for PgCdeConfTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgCdeConfType PgCdeConfTypeIdSource
      	{
            get { return this._pgCdeConfTypeIdSource; }
            set { this._pgCdeConfTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgAttchdDocCollection
		
		private TList<PgAttchdDoc> _pgAttchdDocPgStudConferenceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgAttchdDocPgStudConferenceId
		/// </summary>
		
		public TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get
			{
				if (_pgAttchdDocPgStudConferenceId == null)
				{
				_pgAttchdDocPgStudConferenceId = new TList<PgAttchdDoc>();
				}
	
				return _pgAttchdDocPgStudConferenceId;
			}
			set { _pgAttchdDocPgStudConferenceId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgStudConferenceEntityData _tmp = new PgStudConferenceEntityData();
						
			_tmp.PgStudConferenceId = this.PgStudConferenceId;
			_tmp.OriginalPgStudConferenceId = this.OriginalPgStudConferenceId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ConferenceTitleEn = this.ConferenceTitleEn;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.PresentationFlg = this.PresentationFlg;
			_tmp.PresentationDate = this.PresentationDate;
			_tmp.OutFlg = this.OutFlg;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.PgCdeConfTypeId = this.PgCdeConfTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			if (this.PgCdeConfTypeIdSource != null)
				_tmp.PgCdeConfTypeIdSource = MakeCopyOf(this.PgCdeConfTypeIdSource) as PgCdeConfType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgAttchdDocPgStudConferenceId != null)
				_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgStudConferenceEntityData _tmp = new PgStudConferenceEntityData();
						
			_tmp.PgStudConferenceId = this.PgStudConferenceId;
			_tmp.OriginalPgStudConferenceId = this.OriginalPgStudConferenceId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ConferenceTitleEn = this.ConferenceTitleEn;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.PresentationFlg = this.PresentationFlg;
			_tmp.PresentationDate = this.PresentationDate;
			_tmp.OutFlg = this.OutFlg;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.PgCdeConfTypeId = this.PgCdeConfTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.PgCdeConfTypeIdSource != null && existingCopies.Contains(this.PgCdeConfTypeIdSource))
				_tmp.PgCdeConfTypeIdSource = existingCopies[this.PgCdeConfTypeIdSource] as PgCdeConfType;
			else
				_tmp.PgCdeConfTypeIdSource = MakeCopyOf(this.PgCdeConfTypeIdSource, existingCopies) as PgCdeConfType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudConferenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgStudConferenceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudConferenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgStudConferenceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudConferenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgStudConferenceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgStudConferenceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgStudConferenceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudConferenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgStudConferenceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgStudConferenceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgStudConferenceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgStudConferenceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgStudConference"/> object.
	/// </remarks>
	public class PgStudConferenceEventArgs : System.EventArgs
	{
		private PgStudConferenceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgStudConferenceEventArgs class.
		///</summary>
		public PgStudConferenceEventArgs(PgStudConferenceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgStudConferenceEventArgs class.
		///</summary>
		public PgStudConferenceEventArgs(PgStudConferenceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgStudConferenceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgStudConferenceColumn" />
		public PgStudConferenceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgStudConference related events.
	///</summary>
	public delegate void PgStudConferenceEventHandler(object sender, PgStudConferenceEventArgs e);
	
	#region PgStudConferenceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgStudConferenceComparer : System.Collections.Generic.IComparer<PgStudConference>
	{
		PgStudConferenceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudConferenceComparer"/> class.
        /// </summary>
		public PgStudConferenceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudConferenceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgStudConferenceComparer(PgStudConferenceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgStudConference"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgStudConference"/> to compare.</param>
        /// <param name="b">The second <c>PgStudConference</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgStudConference a, PgStudConference b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgStudConference entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgStudConference a, PgStudConference b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgStudConferenceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgStudConferenceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgStudConference"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgStudConferenceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgStudConferenceKey class.
		/// </summary>
		public PgStudConferenceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudConferenceKey class.
		/// </summary>
		public PgStudConferenceKey(PgStudConferenceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgStudConferenceId = entity.PgStudConferenceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudConferenceKey class.
		/// </summary>
		public PgStudConferenceKey(System.Decimal _pgStudConferenceId)
		{
			#region Init Properties

			this.PgStudConferenceId = _pgStudConferenceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgStudConferenceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgStudConferenceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgStudConferenceId property
		private System.Decimal _pgStudConferenceId;
		
		/// <summary>
		/// Gets or sets the PgStudConferenceId property.
		/// </summary>
		public System.Decimal PgStudConferenceId
		{
			get { return _pgStudConferenceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgStudConferenceId = value;
				
				_pgStudConferenceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgStudConferenceId = ( values["PgStudConferenceId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgStudConferenceId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgStudConferenceId", PgStudConferenceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgStudConferenceId: {0}{1}",
								PgStudConferenceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgStudConferenceColumn Enum
	
	/// <summary>
	/// Enumerate the PgStudConference columns.
	/// </summary>
	[Serializable]
	public enum PgStudConferenceColumn : int
	{
		/// <summary>
		/// PgStudConferenceId : تسجيل بيانات حضور المؤتمرات العلمية
		/// </summary>
		[EnumTextValue("PG_STUD_CONFERENCE_ID")]
		[ColumnEnum("PG_STUD_CONFERENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgStudConferenceId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdStudId : ONLY PG STUD
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// ConferenceTitleEn : اسم المؤتمر
		/// </summary>
		[EnumTextValue("CONFERENCE_TITLE_EN")]
		[ColumnEnum("CONFERENCE_TITLE_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		ConferenceTitleEn = 4,
		/// <summary>
		/// FromDate : تاريخ بدء المؤتمر
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		FromDate = 5,
		/// <summary>
		/// ToDate : تاريخ نهاية المؤتمر
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ToDate = 6,
		/// <summary>
		/// PresentationFlg : الطالب قام بالعرض
		/// </summary>
		[EnumTextValue("PRESENTATION_FLG")]
		[ColumnEnum("PRESENTATION_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PresentationFlg = 7,
		/// <summary>
		/// PresentationDate : تاريخ العرض
		/// </summary>
		[EnumTextValue("PRESENTATION_DATE")]
		[ColumnEnum("PRESENTATION_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		PresentationDate = 8,
		/// <summary>
		/// OutFlg : 1: external  0:internal
		/// </summary>
		[EnumTextValue("OUT_FLG")]
		[ColumnEnum("OUT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OutFlg = 9,
		/// <summary>
		/// GsCountryNodeId : بلد المؤتمر
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 10,
		/// <summary>
		/// PgCdeConfTypeId : 
		/// </summary>
		[EnumTextValue("PG_CDE_CONF_TYPE_ID")]
		[ColumnEnum("PG_CDE_CONF_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PgCdeConfTypeId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13
	}//End enum

	#endregion PgStudConferenceColumn Enum

} // end namespace
