
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaMiltary.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_MILTARY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaMiltaryBase : EntityBase, ISaMiltary, IEntityId<SaMiltaryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaMiltaryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaMiltaryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaMiltaryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaMiltary> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaMiltaryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaMiltaryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaMiltaryBase"/> instance.
		///</summary>
		public SaMiltaryBase()
		{
			this.entityData = new SaMiltaryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaMiltaryBase"/> instance.
		///</summary>
		///<param name="_saMiltaryId"></param>
		///<param name="_milCardNum"></param>
		///<param name="_milCardDate"></param>
		///<param name="_milCertNum"></param>
		///<param name="_milCertDate"></param>
		///<param name="_milCertIssOrg"></param>
		///<param name="_milStartDate"></param>
		///<param name="_milReleaseDate"></param>
		///<param name="_unitNum"></param>
		///<param name="_milServEval"></param>
		///<param name="_milIsSoldier"></param>
		///<param name="_milJobPreserveDecNum"></param>
		///<param name="_milJobPreserveDecDate"></param>
		///<param name="_milComments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_gsMilitaryRegionId"></param>
		///<param name="_gsMilitaryOfficeId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asFacultyInfoId"></param>
		public SaMiltaryBase(System.Decimal _saMiltaryId, System.String _milCardNum, System.DateTime _milCardDate, 
			System.String _milCertNum, System.DateTime? _milCertDate, System.String _milCertIssOrg, System.DateTime? _milStartDate, 
			System.DateTime? _milReleaseDate, System.String _unitNum, System.String _milServEval, System.Decimal _milIsSoldier, 
			System.String _milJobPreserveDecNum, System.DateTime? _milJobPreserveDecDate, System.String _milComments, 
			System.Decimal _saStfMemberId, System.Decimal _gsMilitaryRegionId, System.Decimal _gsMilitaryOfficeId, 
			System.Decimal? _gsCountryNodeId, System.Decimal _asFacultyInfoId)
		{
			this.entityData = new SaMiltaryEntityData();
			this.backupData = null;

			this.SaMiltaryId = _saMiltaryId;
			this.MilCardNum = _milCardNum;
			this.MilCardDate = _milCardDate;
			this.MilCertNum = _milCertNum;
			this.MilCertDate = _milCertDate;
			this.MilCertIssOrg = _milCertIssOrg;
			this.MilStartDate = _milStartDate;
			this.MilReleaseDate = _milReleaseDate;
			this.UnitNum = _unitNum;
			this.MilServEval = _milServEval;
			this.MilIsSoldier = _milIsSoldier;
			this.MilJobPreserveDecNum = _milJobPreserveDecNum;
			this.MilJobPreserveDecDate = _milJobPreserveDecDate;
			this.MilComments = _milComments;
			this.SaStfMemberId = _saStfMemberId;
			this.GsMilitaryRegionId = _gsMilitaryRegionId;
			this.GsMilitaryOfficeId = _gsMilitaryOfficeId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaMiltary"/> instance.
		///</summary>
		///<param name="_saMiltaryId"></param>
		///<param name="_milCardNum"></param>
		///<param name="_milCardDate"></param>
		///<param name="_milCertNum"></param>
		///<param name="_milCertDate"></param>
		///<param name="_milCertIssOrg"></param>
		///<param name="_milStartDate"></param>
		///<param name="_milReleaseDate"></param>
		///<param name="_unitNum"></param>
		///<param name="_milServEval"></param>
		///<param name="_milIsSoldier"></param>
		///<param name="_milJobPreserveDecNum"></param>
		///<param name="_milJobPreserveDecDate"></param>
		///<param name="_milComments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_gsMilitaryRegionId"></param>
		///<param name="_gsMilitaryOfficeId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asFacultyInfoId"></param>
		public static SaMiltary CreateSaMiltary(System.Decimal _saMiltaryId, System.String _milCardNum, System.DateTime _milCardDate, 
			System.String _milCertNum, System.DateTime? _milCertDate, System.String _milCertIssOrg, System.DateTime? _milStartDate, 
			System.DateTime? _milReleaseDate, System.String _unitNum, System.String _milServEval, System.Decimal _milIsSoldier, 
			System.String _milJobPreserveDecNum, System.DateTime? _milJobPreserveDecDate, System.String _milComments, 
			System.Decimal _saStfMemberId, System.Decimal _gsMilitaryRegionId, System.Decimal _gsMilitaryOfficeId, 
			System.Decimal? _gsCountryNodeId, System.Decimal _asFacultyInfoId)
		{
			SaMiltary newSaMiltary = new SaMiltary();
			newSaMiltary.SaMiltaryId = _saMiltaryId;
			newSaMiltary.MilCardNum = _milCardNum;
			newSaMiltary.MilCardDate = _milCardDate;
			newSaMiltary.MilCertNum = _milCertNum;
			newSaMiltary.MilCertDate = _milCertDate;
			newSaMiltary.MilCertIssOrg = _milCertIssOrg;
			newSaMiltary.MilStartDate = _milStartDate;
			newSaMiltary.MilReleaseDate = _milReleaseDate;
			newSaMiltary.UnitNum = _unitNum;
			newSaMiltary.MilServEval = _milServEval;
			newSaMiltary.MilIsSoldier = _milIsSoldier;
			newSaMiltary.MilJobPreserveDecNum = _milJobPreserveDecNum;
			newSaMiltary.MilJobPreserveDecDate = _milJobPreserveDecDate;
			newSaMiltary.MilComments = _milComments;
			newSaMiltary.SaStfMemberId = _saStfMemberId;
			newSaMiltary.GsMilitaryRegionId = _gsMilitaryRegionId;
			newSaMiltary.GsMilitaryOfficeId = _gsMilitaryOfficeId;
			newSaMiltary.GsCountryNodeId = _gsCountryNodeId;
			newSaMiltary.AsFacultyInfoId = _asFacultyInfoId;
			return newSaMiltary;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaMiltaryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaMiltaryId
		{
			get
			{
				return this.entityData.SaMiltaryId; 
			}
			
			set
			{
				if (this.entityData.SaMiltaryId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.SaMiltaryId, this.entityData.SaMiltaryId);
				this.entityData.SaMiltaryId = value;
				this.EntityId.SaMiltaryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.SaMiltaryId, this.entityData.SaMiltaryId);
				OnPropertyChanged("SaMiltaryId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_MILTARY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_MILTARY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaMiltaryId
		{
			get { return this.entityData.OriginalSaMiltaryId; }
			set { this.entityData.OriginalSaMiltaryId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MilCardNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MilCardNum
		{
			get
			{
				return this.entityData.MilCardNum; 
			}
			
			set
			{
				if (this.entityData.MilCardNum == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilCardNum, this.entityData.MilCardNum);
				this.entityData.MilCardNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilCardNum, this.entityData.MilCardNum);
				OnPropertyChanged("MilCardNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCardDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime MilCardDate
		{
			get
			{
				return this.entityData.MilCardDate; 
			}
			
			set
			{
				if (this.entityData.MilCardDate == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilCardDate, this.entityData.MilCardDate);
				this.entityData.MilCardDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilCardDate, this.entityData.MilCardDate);
				OnPropertyChanged("MilCardDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCertNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MilCertNum
		{
			get
			{
				return this.entityData.MilCertNum; 
			}
			
			set
			{
				if (this.entityData.MilCertNum == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilCertNum, this.entityData.MilCertNum);
				this.entityData.MilCertNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilCertNum, this.entityData.MilCertNum);
				OnPropertyChanged("MilCertNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCertDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilCertDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilCertDate
		{
			get
			{
				return this.entityData.MilCertDate; 
			}
			
			set
			{
				if (this.entityData.MilCertDate == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilCertDate, this.entityData.MilCertDate);
				this.entityData.MilCertDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilCertDate, this.entityData.MilCertDate);
				OnPropertyChanged("MilCertDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCertIssOrg property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MilCertIssOrg
		{
			get
			{
				return this.entityData.MilCertIssOrg; 
			}
			
			set
			{
				if (this.entityData.MilCertIssOrg == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilCertIssOrg, this.entityData.MilCertIssOrg);
				this.entityData.MilCertIssOrg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilCertIssOrg, this.entityData.MilCertIssOrg);
				OnPropertyChanged("MilCertIssOrg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilStartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilStartDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilStartDate
		{
			get
			{
				return this.entityData.MilStartDate; 
			}
			
			set
			{
				if (this.entityData.MilStartDate == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilStartDate, this.entityData.MilStartDate);
				this.entityData.MilStartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilStartDate, this.entityData.MilStartDate);
				OnPropertyChanged("MilStartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilReleaseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilReleaseDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilReleaseDate
		{
			get
			{
				return this.entityData.MilReleaseDate; 
			}
			
			set
			{
				if (this.entityData.MilReleaseDate == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilReleaseDate, this.entityData.MilReleaseDate);
				this.entityData.MilReleaseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilReleaseDate, this.entityData.MilReleaseDate);
				OnPropertyChanged("MilReleaseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UnitNum
		{
			get
			{
				return this.entityData.UnitNum; 
			}
			
			set
			{
				if (this.entityData.UnitNum == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.UnitNum, this.entityData.UnitNum);
				this.entityData.UnitNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.UnitNum, this.entityData.UnitNum);
				OnPropertyChanged("UnitNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilServEval property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MilServEval
		{
			get
			{
				return this.entityData.MilServEval; 
			}
			
			set
			{
				if (this.entityData.MilServEval == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilServEval, this.entityData.MilServEval);
				this.entityData.MilServEval = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilServEval, this.entityData.MilServEval);
				OnPropertyChanged("MilServEval");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilIsSoldier property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MilIsSoldier
		{
			get
			{
				return this.entityData.MilIsSoldier; 
			}
			
			set
			{
				if (this.entityData.MilIsSoldier == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilIsSoldier, this.entityData.MilIsSoldier);
				this.entityData.MilIsSoldier = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilIsSoldier, this.entityData.MilIsSoldier);
				OnPropertyChanged("MilIsSoldier");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilJobPreserveDecNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MilJobPreserveDecNum
		{
			get
			{
				return this.entityData.MilJobPreserveDecNum; 
			}
			
			set
			{
				if (this.entityData.MilJobPreserveDecNum == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilJobPreserveDecNum, this.entityData.MilJobPreserveDecNum);
				this.entityData.MilJobPreserveDecNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilJobPreserveDecNum, this.entityData.MilJobPreserveDecNum);
				OnPropertyChanged("MilJobPreserveDecNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilJobPreserveDecDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilJobPreserveDecDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilJobPreserveDecDate
		{
			get
			{
				return this.entityData.MilJobPreserveDecDate; 
			}
			
			set
			{
				if (this.entityData.MilJobPreserveDecDate == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilJobPreserveDecDate, this.entityData.MilJobPreserveDecDate);
				this.entityData.MilJobPreserveDecDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilJobPreserveDecDate, this.entityData.MilJobPreserveDecDate);
				OnPropertyChanged("MilJobPreserveDecDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilComments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MilComments
		{
			get
			{
				return this.entityData.MilComments; 
			}
			
			set
			{
				if (this.entityData.MilComments == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.MilComments, this.entityData.MilComments);
				this.entityData.MilComments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.MilComments, this.entityData.MilComments);
				OnPropertyChanged("MilComments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsMilitaryRegionId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsMilitaryRegionId
		{
			get
			{
				return this.entityData.GsMilitaryRegionId; 
			}
			
			set
			{
				if (this.entityData.GsMilitaryRegionId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.GsMilitaryRegionId, this.entityData.GsMilitaryRegionId);
				this.entityData.GsMilitaryRegionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.GsMilitaryRegionId, this.entityData.GsMilitaryRegionId);
				OnPropertyChanged("GsMilitaryRegionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsMilitaryOfficeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsMilitaryOfficeId
		{
			get
			{
				return this.entityData.GsMilitaryOfficeId; 
			}
			
			set
			{
				if (this.entityData.GsMilitaryOfficeId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.GsMilitaryOfficeId, this.entityData.GsMilitaryOfficeId);
				this.entityData.GsMilitaryOfficeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.GsMilitaryOfficeId, this.entityData.GsMilitaryOfficeId);
				OnPropertyChanged("GsMilitaryOfficeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaMiltaryColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaMiltaryColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsMilitaryOffice"/>.
		/// </summary>
		/// <value>The source GsMilitaryOffice for GsMilitaryOfficeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsMilitaryOffice GsMilitaryOfficeIdSource
      	{
            get { return entityData.GsMilitaryOfficeIdSource; }
            set { entityData.GsMilitaryOfficeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsMilitaryRegion"/>.
		/// </summary>
		/// <value>The source GsMilitaryRegion for GsMilitaryRegionId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsMilitaryRegion GsMilitaryRegionIdSource
      	{
            get { return entityData.GsMilitaryRegionIdSource; }
            set { entityData.GsMilitaryRegionIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MilCardNum", "Mil Card Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCardNum", "Mil Card Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCertNum", "Mil Cert Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCertIssOrg", "Mil Cert Iss Org", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnitNum", "Unit Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilServEval", "Mil Serv Eval", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilJobPreserveDecNum", "Mil Job Preserve Dec Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilComments", "Mil Comments", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_MILTARY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_MILTARY_ID", "MIL_CARD_NUM", "MIL_CARD_DATE", "MIL_CERT_NUM", "MIL_CERT_DATE", "MIL_CERT_ISS_ORG", "MIL_START_DATE", "MIL_RELEASE_DATE", "UNIT_NUM", "MIL_SERV_EVAL", "MIL_IS_SOLDIER", "MIL_JOB_PRESERVE_DEC_NUM", "MIL_JOB_PRESERVE_DEC_DATE", "MIL_COMMENTS", "SA_STF_MEMBER_ID", "GS_MILITARY_REGION_ID", "GS_MILITARY_OFFICE_ID", "GS_COUNTRY_NODE_ID", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaMiltaryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaMiltary) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaMiltary>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaMiltary);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaMiltary Entity 
		///</summary>
		protected virtual SaMiltary Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaMiltary copy = new SaMiltary();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaMiltaryId = this.SaMiltaryId;
					copy.OriginalSaMiltaryId = this.OriginalSaMiltaryId;
				copy.MilCardNum = this.MilCardNum;
				copy.MilCardDate = this.MilCardDate;
				copy.MilCertNum = this.MilCertNum;
				copy.MilCertDate = this.MilCertDate;
				copy.MilCertIssOrg = this.MilCertIssOrg;
				copy.MilStartDate = this.MilStartDate;
				copy.MilReleaseDate = this.MilReleaseDate;
				copy.UnitNum = this.UnitNum;
				copy.MilServEval = this.MilServEval;
				copy.MilIsSoldier = this.MilIsSoldier;
				copy.MilJobPreserveDecNum = this.MilJobPreserveDecNum;
				copy.MilJobPreserveDecDate = this.MilJobPreserveDecDate;
				copy.MilComments = this.MilComments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.GsMilitaryRegionId = this.GsMilitaryRegionId;
				copy.GsMilitaryOfficeId = this.GsMilitaryOfficeId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsMilitaryOfficeIdSource != null && existingCopies.Contains(this.GsMilitaryOfficeIdSource))
				copy.GsMilitaryOfficeIdSource = existingCopies[this.GsMilitaryOfficeIdSource] as GsMilitaryOffice;
			else
				copy.GsMilitaryOfficeIdSource = MakeCopyOf(this.GsMilitaryOfficeIdSource, existingCopies) as GsMilitaryOffice;
			if (this.GsMilitaryRegionIdSource != null && existingCopies.Contains(this.GsMilitaryRegionIdSource))
				copy.GsMilitaryRegionIdSource = existingCopies[this.GsMilitaryRegionIdSource] as GsMilitaryRegion;
			else
				copy.GsMilitaryRegionIdSource = MakeCopyOf(this.GsMilitaryRegionIdSource, existingCopies) as GsMilitaryRegion;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaMiltary Entity 
		///</summary>
		public virtual SaMiltary Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaMiltary Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaMiltary DeepCopy()
		{
			return EntityHelper.Clone<SaMiltary>(this as SaMiltary);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaMiltaryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaMiltaryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaMiltaryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaMiltaryColumn column)
		{
			switch(column)
			{
					case SaMiltaryColumn.SaMiltaryId:
					return entityData.SaMiltaryId != _originalData.SaMiltaryId;
					case SaMiltaryColumn.MilCardNum:
					return entityData.MilCardNum != _originalData.MilCardNum;
					case SaMiltaryColumn.MilCardDate:
					return entityData.MilCardDate != _originalData.MilCardDate;
					case SaMiltaryColumn.MilCertNum:
					return entityData.MilCertNum != _originalData.MilCertNum;
					case SaMiltaryColumn.MilCertDate:
					return entityData.MilCertDate != _originalData.MilCertDate;
					case SaMiltaryColumn.MilCertIssOrg:
					return entityData.MilCertIssOrg != _originalData.MilCertIssOrg;
					case SaMiltaryColumn.MilStartDate:
					return entityData.MilStartDate != _originalData.MilStartDate;
					case SaMiltaryColumn.MilReleaseDate:
					return entityData.MilReleaseDate != _originalData.MilReleaseDate;
					case SaMiltaryColumn.UnitNum:
					return entityData.UnitNum != _originalData.UnitNum;
					case SaMiltaryColumn.MilServEval:
					return entityData.MilServEval != _originalData.MilServEval;
					case SaMiltaryColumn.MilIsSoldier:
					return entityData.MilIsSoldier != _originalData.MilIsSoldier;
					case SaMiltaryColumn.MilJobPreserveDecNum:
					return entityData.MilJobPreserveDecNum != _originalData.MilJobPreserveDecNum;
					case SaMiltaryColumn.MilJobPreserveDecDate:
					return entityData.MilJobPreserveDecDate != _originalData.MilJobPreserveDecDate;
					case SaMiltaryColumn.MilComments:
					return entityData.MilComments != _originalData.MilComments;
					case SaMiltaryColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaMiltaryColumn.GsMilitaryRegionId:
					return entityData.GsMilitaryRegionId != _originalData.GsMilitaryRegionId;
					case SaMiltaryColumn.GsMilitaryOfficeId:
					return entityData.GsMilitaryOfficeId != _originalData.GsMilitaryOfficeId;
					case SaMiltaryColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaMiltaryColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaMiltaryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaMiltaryId != _originalData.SaMiltaryId;
			result = result || entityData.MilCardNum != _originalData.MilCardNum;
			result = result || entityData.MilCardDate != _originalData.MilCardDate;
			result = result || entityData.MilCertNum != _originalData.MilCertNum;
			result = result || entityData.MilCertDate != _originalData.MilCertDate;
			result = result || entityData.MilCertIssOrg != _originalData.MilCertIssOrg;
			result = result || entityData.MilStartDate != _originalData.MilStartDate;
			result = result || entityData.MilReleaseDate != _originalData.MilReleaseDate;
			result = result || entityData.UnitNum != _originalData.UnitNum;
			result = result || entityData.MilServEval != _originalData.MilServEval;
			result = result || entityData.MilIsSoldier != _originalData.MilIsSoldier;
			result = result || entityData.MilJobPreserveDecNum != _originalData.MilJobPreserveDecNum;
			result = result || entityData.MilJobPreserveDecDate != _originalData.MilJobPreserveDecDate;
			result = result || entityData.MilComments != _originalData.MilComments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.GsMilitaryRegionId != _originalData.GsMilitaryRegionId;
			result = result || entityData.GsMilitaryOfficeId != _originalData.GsMilitaryOfficeId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaMiltary Entity with the original data.
		///</summary>
		public SaMiltary GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaMiltary(
				_originalData.SaMiltaryId,
				_originalData.MilCardNum,
				_originalData.MilCardDate,
				_originalData.MilCertNum,
				_originalData.MilCertDate,
				_originalData.MilCertIssOrg,
				_originalData.MilStartDate,
				_originalData.MilReleaseDate,
				_originalData.UnitNum,
				_originalData.MilServEval,
				_originalData.MilIsSoldier,
				_originalData.MilJobPreserveDecNum,
				_originalData.MilJobPreserveDecDate,
				_originalData.MilComments,
				_originalData.SaStfMemberId,
				_originalData.GsMilitaryRegionId,
				_originalData.GsMilitaryOfficeId,
				_originalData.GsCountryNodeId,
				_originalData.AsFacultyInfoId
				);
				
			return (SaMiltary)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaMiltaryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaMiltaryBase)
				return ValueEquals(this, (SaMiltaryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaMiltaryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaMiltaryId.GetHashCode() ^ 
					this.MilCardNum.GetHashCode() ^ 
					this.MilCardDate.GetHashCode() ^ 
					((this.MilCertNum == null) ? string.Empty : this.MilCertNum.ToString()).GetHashCode() ^ 
					((this.MilCertDate == null) ? string.Empty : this.MilCertDate.ToString()).GetHashCode() ^ 
					((this.MilCertIssOrg == null) ? string.Empty : this.MilCertIssOrg.ToString()).GetHashCode() ^ 
					((this.MilStartDate == null) ? string.Empty : this.MilStartDate.ToString()).GetHashCode() ^ 
					((this.MilReleaseDate == null) ? string.Empty : this.MilReleaseDate.ToString()).GetHashCode() ^ 
					((this.UnitNum == null) ? string.Empty : this.UnitNum.ToString()).GetHashCode() ^ 
					((this.MilServEval == null) ? string.Empty : this.MilServEval.ToString()).GetHashCode() ^ 
					this.MilIsSoldier.GetHashCode() ^ 
					((this.MilJobPreserveDecNum == null) ? string.Empty : this.MilJobPreserveDecNum.ToString()).GetHashCode() ^ 
					((this.MilJobPreserveDecDate == null) ? string.Empty : this.MilJobPreserveDecDate.ToString()).GetHashCode() ^ 
					((this.MilComments == null) ? string.Empty : this.MilComments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.GsMilitaryRegionId.GetHashCode() ^ 
					this.GsMilitaryOfficeId.GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaMiltaryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaMiltaryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaMiltaryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaMiltaryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaMiltaryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaMiltaryBase Object1, SaMiltaryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaMiltaryId != Object2.SaMiltaryId)
				equal = false;
			if (Object1.MilCardNum != Object2.MilCardNum)
				equal = false;
			if (Object1.MilCardDate != Object2.MilCardDate)
				equal = false;
			if ( Object1.MilCertNum != null && Object2.MilCertNum != null )
			{
				if (Object1.MilCertNum != Object2.MilCertNum)
					equal = false;
			}
			else if (Object1.MilCertNum == null ^ Object2.MilCertNum == null )
			{
				equal = false;
			}
			if ( Object1.MilCertDate != null && Object2.MilCertDate != null )
			{
				if (Object1.MilCertDate != Object2.MilCertDate)
					equal = false;
			}
			else if (Object1.MilCertDate == null ^ Object2.MilCertDate == null )
			{
				equal = false;
			}
			if ( Object1.MilCertIssOrg != null && Object2.MilCertIssOrg != null )
			{
				if (Object1.MilCertIssOrg != Object2.MilCertIssOrg)
					equal = false;
			}
			else if (Object1.MilCertIssOrg == null ^ Object2.MilCertIssOrg == null )
			{
				equal = false;
			}
			if ( Object1.MilStartDate != null && Object2.MilStartDate != null )
			{
				if (Object1.MilStartDate != Object2.MilStartDate)
					equal = false;
			}
			else if (Object1.MilStartDate == null ^ Object2.MilStartDate == null )
			{
				equal = false;
			}
			if ( Object1.MilReleaseDate != null && Object2.MilReleaseDate != null )
			{
				if (Object1.MilReleaseDate != Object2.MilReleaseDate)
					equal = false;
			}
			else if (Object1.MilReleaseDate == null ^ Object2.MilReleaseDate == null )
			{
				equal = false;
			}
			if ( Object1.UnitNum != null && Object2.UnitNum != null )
			{
				if (Object1.UnitNum != Object2.UnitNum)
					equal = false;
			}
			else if (Object1.UnitNum == null ^ Object2.UnitNum == null )
			{
				equal = false;
			}
			if ( Object1.MilServEval != null && Object2.MilServEval != null )
			{
				if (Object1.MilServEval != Object2.MilServEval)
					equal = false;
			}
			else if (Object1.MilServEval == null ^ Object2.MilServEval == null )
			{
				equal = false;
			}
			if (Object1.MilIsSoldier != Object2.MilIsSoldier)
				equal = false;
			if ( Object1.MilJobPreserveDecNum != null && Object2.MilJobPreserveDecNum != null )
			{
				if (Object1.MilJobPreserveDecNum != Object2.MilJobPreserveDecNum)
					equal = false;
			}
			else if (Object1.MilJobPreserveDecNum == null ^ Object2.MilJobPreserveDecNum == null )
			{
				equal = false;
			}
			if ( Object1.MilJobPreserveDecDate != null && Object2.MilJobPreserveDecDate != null )
			{
				if (Object1.MilJobPreserveDecDate != Object2.MilJobPreserveDecDate)
					equal = false;
			}
			else if (Object1.MilJobPreserveDecDate == null ^ Object2.MilJobPreserveDecDate == null )
			{
				equal = false;
			}
			if ( Object1.MilComments != null && Object2.MilComments != null )
			{
				if (Object1.MilComments != Object2.MilComments)
					equal = false;
			}
			else if (Object1.MilComments == null ^ Object2.MilComments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.GsMilitaryRegionId != Object2.GsMilitaryRegionId)
				equal = false;
			if (Object1.GsMilitaryOfficeId != Object2.GsMilitaryOfficeId)
				equal = false;
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaMiltaryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaMiltaryComparer GetComparer()
        {
            return new SaMiltaryComparer();
        }
        */

        // Comparer delegates back to SaMiltary
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaMiltary rhs, SaMiltaryColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaMiltaryColumn.SaMiltaryId:
            		return this.SaMiltaryId.CompareTo(rhs.SaMiltaryId);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilCardNum:
            		return this.MilCardNum.CompareTo(rhs.MilCardNum);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilCardDate:
            		return this.MilCardDate.CompareTo(rhs.MilCardDate);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilCertNum:
            		return this.MilCertNum.CompareTo(rhs.MilCertNum);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilCertDate:
            		return this.MilCertDate.Value.CompareTo(rhs.MilCertDate.Value);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilCertIssOrg:
            		return this.MilCertIssOrg.CompareTo(rhs.MilCertIssOrg);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilStartDate:
            		return this.MilStartDate.Value.CompareTo(rhs.MilStartDate.Value);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilReleaseDate:
            		return this.MilReleaseDate.Value.CompareTo(rhs.MilReleaseDate.Value);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.UnitNum:
            		return this.UnitNum.CompareTo(rhs.UnitNum);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilServEval:
            		return this.MilServEval.CompareTo(rhs.MilServEval);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilIsSoldier:
            		return this.MilIsSoldier.CompareTo(rhs.MilIsSoldier);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilJobPreserveDecNum:
            		return this.MilJobPreserveDecNum.CompareTo(rhs.MilJobPreserveDecNum);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilJobPreserveDecDate:
            		return this.MilJobPreserveDecDate.Value.CompareTo(rhs.MilJobPreserveDecDate.Value);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.MilComments:
            		return this.MilComments.CompareTo(rhs.MilComments);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.GsMilitaryRegionId:
            		return this.GsMilitaryRegionId.CompareTo(rhs.GsMilitaryRegionId);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.GsMilitaryOfficeId:
            		return this.GsMilitaryOfficeId.CompareTo(rhs.GsMilitaryOfficeId);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case SaMiltaryColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaMiltaryKey> Members
		
		// member variable for the EntityId property
		private SaMiltaryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaMiltaryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaMiltaryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaMiltary")
					.Append("|").Append( this.SaMiltaryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- SaMiltaryId: {0}{19}- MilCardNum: {1}{19}- MilCardDate: {2}{19}- MilCertNum: {3}{19}- MilCertDate: {4}{19}- MilCertIssOrg: {5}{19}- MilStartDate: {6}{19}- MilReleaseDate: {7}{19}- UnitNum: {8}{19}- MilServEval: {9}{19}- MilIsSoldier: {10}{19}- MilJobPreserveDecNum: {11}{19}- MilJobPreserveDecDate: {12}{19}- MilComments: {13}{19}- SaStfMemberId: {14}{19}- GsMilitaryRegionId: {15}{19}- GsMilitaryOfficeId: {16}{19}- GsCountryNodeId: {17}{19}- AsFacultyInfoId: {18}{19}{21}", 
				this.SaMiltaryId,
				this.MilCardNum,
				this.MilCardDate,
				(this.MilCertNum == null) ? string.Empty : this.MilCertNum.ToString(),
				(this.MilCertDate == null) ? string.Empty : this.MilCertDate.ToString(),
				(this.MilCertIssOrg == null) ? string.Empty : this.MilCertIssOrg.ToString(),
				(this.MilStartDate == null) ? string.Empty : this.MilStartDate.ToString(),
				(this.MilReleaseDate == null) ? string.Empty : this.MilReleaseDate.ToString(),
				(this.UnitNum == null) ? string.Empty : this.UnitNum.ToString(),
				(this.MilServEval == null) ? string.Empty : this.MilServEval.ToString(),
				this.MilIsSoldier,
				(this.MilJobPreserveDecNum == null) ? string.Empty : this.MilJobPreserveDecNum.ToString(),
				(this.MilJobPreserveDecDate == null) ? string.Empty : this.MilJobPreserveDecDate.ToString(),
				(this.MilComments == null) ? string.Empty : this.MilComments.ToString(),
				this.SaStfMemberId,
				this.GsMilitaryRegionId,
				this.GsMilitaryOfficeId,
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_MILTARY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaMiltaryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_MILTARY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_MILTARY"</remarks>
		public System.Decimal SaMiltaryId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaMiltaryId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MIL_CARD_NUM : 
		/// </summary>
		public System.String		  MilCardNum = string.Empty;
		
		/// <summary>
		/// MIL_CARD_DATE : 
		/// </summary>
		public System.DateTime		  MilCardDate = DateTime.MinValue;
		
		/// <summary>
		/// MIL_CERT_NUM : 
		/// </summary>
		public System.String		  MilCertNum = null;
		
		/// <summary>
		/// MIL_CERT_DATE : 
		/// </summary>
		public System.DateTime?		  MilCertDate = null;
		
		/// <summary>
		/// MIL_CERT_ISS_ORG : 
		/// </summary>
		public System.String		  MilCertIssOrg = null;
		
		/// <summary>
		/// MIL_START_DATE : 
		/// </summary>
		public System.DateTime?		  MilStartDate = null;
		
		/// <summary>
		/// MIL_RELEASE_DATE : 
		/// </summary>
		public System.DateTime?		  MilReleaseDate = null;
		
		/// <summary>
		/// UNIT_NUM : 
		/// </summary>
		public System.String		  UnitNum = null;
		
		/// <summary>
		/// MIL_SERV_EVAL : 
		/// </summary>
		public System.String		  MilServEval = null;
		
		/// <summary>
		/// MIL_IS_SOLDIER : 
		/// </summary>
		public System.Decimal		  MilIsSoldier = 0.0m;
		
		/// <summary>
		/// MIL_JOB_PRESERVE_DEC_NUM : 
		/// </summary>
		public System.String		  MilJobPreserveDecNum = null;
		
		/// <summary>
		/// MIL_JOB_PRESERVE_DEC_DATE : 
		/// </summary>
		public System.DateTime?		  MilJobPreserveDecDate = null;
		
		/// <summary>
		/// MIL_COMMENTS : 
		/// </summary>
		public System.String		  MilComments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// GS_MILITARY_REGION_ID : 
		/// </summary>
		public System.Decimal		  GsMilitaryRegionId = 0.0m;
		
		/// <summary>
		/// GS_MILITARY_OFFICE_ID : 
		/// </summary>
		public System.Decimal		  GsMilitaryOfficeId = 0.0m;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private GsMilitaryOffice _gsMilitaryOfficeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsMilitaryOffice"/>.
		/// </summary>
		/// <value>The source GsMilitaryOffice for GsMilitaryOfficeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsMilitaryOffice GsMilitaryOfficeIdSource
      	{
            get { return this._gsMilitaryOfficeIdSource; }
            set { this._gsMilitaryOfficeIdSource = value; }
      	}
		private GsMilitaryRegion _gsMilitaryRegionIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsMilitaryRegion"/>.
		/// </summary>
		/// <value>The source GsMilitaryRegion for GsMilitaryRegionId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsMilitaryRegion GsMilitaryRegionIdSource
      	{
            get { return this._gsMilitaryRegionIdSource; }
            set { this._gsMilitaryRegionIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaMiltaryEntityData _tmp = new SaMiltaryEntityData();
						
			_tmp.SaMiltaryId = this.SaMiltaryId;
			_tmp.OriginalSaMiltaryId = this.OriginalSaMiltaryId;
			
			_tmp.MilCardNum = this.MilCardNum;
			_tmp.MilCardDate = this.MilCardDate;
			_tmp.MilCertNum = this.MilCertNum;
			_tmp.MilCertDate = this.MilCertDate;
			_tmp.MilCertIssOrg = this.MilCertIssOrg;
			_tmp.MilStartDate = this.MilStartDate;
			_tmp.MilReleaseDate = this.MilReleaseDate;
			_tmp.UnitNum = this.UnitNum;
			_tmp.MilServEval = this.MilServEval;
			_tmp.MilIsSoldier = this.MilIsSoldier;
			_tmp.MilJobPreserveDecNum = this.MilJobPreserveDecNum;
			_tmp.MilJobPreserveDecDate = this.MilJobPreserveDecDate;
			_tmp.MilComments = this.MilComments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.GsMilitaryRegionId = this.GsMilitaryRegionId;
			_tmp.GsMilitaryOfficeId = this.GsMilitaryOfficeId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.GsMilitaryOfficeIdSource != null)
				_tmp.GsMilitaryOfficeIdSource = MakeCopyOf(this.GsMilitaryOfficeIdSource) as GsMilitaryOffice;
			if (this.GsMilitaryRegionIdSource != null)
				_tmp.GsMilitaryRegionIdSource = MakeCopyOf(this.GsMilitaryRegionIdSource) as GsMilitaryRegion;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaMiltaryEntityData _tmp = new SaMiltaryEntityData();
						
			_tmp.SaMiltaryId = this.SaMiltaryId;
			_tmp.OriginalSaMiltaryId = this.OriginalSaMiltaryId;
			
			_tmp.MilCardNum = this.MilCardNum;
			_tmp.MilCardDate = this.MilCardDate;
			_tmp.MilCertNum = this.MilCertNum;
			_tmp.MilCertDate = this.MilCertDate;
			_tmp.MilCertIssOrg = this.MilCertIssOrg;
			_tmp.MilStartDate = this.MilStartDate;
			_tmp.MilReleaseDate = this.MilReleaseDate;
			_tmp.UnitNum = this.UnitNum;
			_tmp.MilServEval = this.MilServEval;
			_tmp.MilIsSoldier = this.MilIsSoldier;
			_tmp.MilJobPreserveDecNum = this.MilJobPreserveDecNum;
			_tmp.MilJobPreserveDecDate = this.MilJobPreserveDecDate;
			_tmp.MilComments = this.MilComments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.GsMilitaryRegionId = this.GsMilitaryRegionId;
			_tmp.GsMilitaryOfficeId = this.GsMilitaryOfficeId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsMilitaryOfficeIdSource != null && existingCopies.Contains(this.GsMilitaryOfficeIdSource))
				_tmp.GsMilitaryOfficeIdSource = existingCopies[this.GsMilitaryOfficeIdSource] as GsMilitaryOffice;
			else
				_tmp.GsMilitaryOfficeIdSource = MakeCopyOf(this.GsMilitaryOfficeIdSource, existingCopies) as GsMilitaryOffice;
			if (this.GsMilitaryRegionIdSource != null && existingCopies.Contains(this.GsMilitaryRegionIdSource))
				_tmp.GsMilitaryRegionIdSource = existingCopies[this.GsMilitaryRegionIdSource] as GsMilitaryRegion;
			else
				_tmp.GsMilitaryRegionIdSource = MakeCopyOf(this.GsMilitaryRegionIdSource, existingCopies) as GsMilitaryRegion;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaMiltaryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaMiltaryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaMiltaryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaMiltaryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaMiltaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaMiltaryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaMiltaryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaMiltaryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaMiltaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaMiltaryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaMiltaryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaMiltaryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaMiltaryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaMiltary"/> object.
	/// </remarks>
	public class SaMiltaryEventArgs : System.EventArgs
	{
		private SaMiltaryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaMiltaryEventArgs class.
		///</summary>
		public SaMiltaryEventArgs(SaMiltaryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaMiltaryEventArgs class.
		///</summary>
		public SaMiltaryEventArgs(SaMiltaryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaMiltaryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaMiltaryColumn" />
		public SaMiltaryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaMiltary related events.
	///</summary>
	public delegate void SaMiltaryEventHandler(object sender, SaMiltaryEventArgs e);
	
	#region SaMiltaryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaMiltaryComparer : System.Collections.Generic.IComparer<SaMiltary>
	{
		SaMiltaryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaMiltaryComparer"/> class.
        /// </summary>
		public SaMiltaryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaMiltaryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaMiltaryComparer(SaMiltaryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaMiltary"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaMiltary"/> to compare.</param>
        /// <param name="b">The second <c>SaMiltary</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaMiltary a, SaMiltary b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaMiltary entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaMiltary a, SaMiltary b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaMiltaryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaMiltaryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaMiltary"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaMiltaryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaMiltaryKey class.
		/// </summary>
		public SaMiltaryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaMiltaryKey class.
		/// </summary>
		public SaMiltaryKey(SaMiltaryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaMiltaryId = entity.SaMiltaryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaMiltaryKey class.
		/// </summary>
		public SaMiltaryKey(System.Decimal _saMiltaryId)
		{
			#region Init Properties

			this.SaMiltaryId = _saMiltaryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaMiltaryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaMiltaryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaMiltaryId property
		private System.Decimal _saMiltaryId;
		
		/// <summary>
		/// Gets or sets the SaMiltaryId property.
		/// </summary>
		public System.Decimal SaMiltaryId
		{
			get { return _saMiltaryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaMiltaryId = value;
				
				_saMiltaryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaMiltaryId = ( values["SaMiltaryId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaMiltaryId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaMiltaryId", SaMiltaryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaMiltaryId: {0}{1}",
								SaMiltaryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaMiltaryColumn Enum
	
	/// <summary>
	/// Enumerate the SaMiltary columns.
	/// </summary>
	[Serializable]
	public enum SaMiltaryColumn : int
	{
		/// <summary>
		/// SaMiltaryId : 
		/// </summary>
		[EnumTextValue("SA_MILTARY_ID")]
		[ColumnEnum("SA_MILTARY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaMiltaryId = 1,
		/// <summary>
		/// MilCardNum : 
		/// </summary>
		[EnumTextValue("MIL_CARD_NUM")]
		[ColumnEnum("MIL_CARD_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		MilCardNum = 2,
		/// <summary>
		/// MilCardDate : 
		/// </summary>
		[EnumTextValue("MIL_CARD_DATE")]
		[ColumnEnum("MIL_CARD_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		MilCardDate = 3,
		/// <summary>
		/// MilCertNum : 
		/// </summary>
		[EnumTextValue("MIL_CERT_NUM")]
		[ColumnEnum("MIL_CERT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		MilCertNum = 4,
		/// <summary>
		/// MilCertDate : 
		/// </summary>
		[EnumTextValue("MIL_CERT_DATE")]
		[ColumnEnum("MIL_CERT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MilCertDate = 5,
		/// <summary>
		/// MilCertIssOrg : 
		/// </summary>
		[EnumTextValue("MIL_CERT_ISS_ORG")]
		[ColumnEnum("MIL_CERT_ISS_ORG", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MilCertIssOrg = 6,
		/// <summary>
		/// MilStartDate : 
		/// </summary>
		[EnumTextValue("MIL_START_DATE")]
		[ColumnEnum("MIL_START_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MilStartDate = 7,
		/// <summary>
		/// MilReleaseDate : 
		/// </summary>
		[EnumTextValue("MIL_RELEASE_DATE")]
		[ColumnEnum("MIL_RELEASE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MilReleaseDate = 8,
		/// <summary>
		/// UnitNum : 
		/// </summary>
		[EnumTextValue("UNIT_NUM")]
		[ColumnEnum("UNIT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		UnitNum = 9,
		/// <summary>
		/// MilServEval : 
		/// </summary>
		[EnumTextValue("MIL_SERV_EVAL")]
		[ColumnEnum("MIL_SERV_EVAL", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MilServEval = 10,
		/// <summary>
		/// MilIsSoldier : 
		/// </summary>
		[EnumTextValue("MIL_IS_SOLDIER")]
		[ColumnEnum("MIL_IS_SOLDIER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MilIsSoldier = 11,
		/// <summary>
		/// MilJobPreserveDecNum : 
		/// </summary>
		[EnumTextValue("MIL_JOB_PRESERVE_DEC_NUM")]
		[ColumnEnum("MIL_JOB_PRESERVE_DEC_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		MilJobPreserveDecNum = 12,
		/// <summary>
		/// MilJobPreserveDecDate : 
		/// </summary>
		[EnumTextValue("MIL_JOB_PRESERVE_DEC_DATE")]
		[ColumnEnum("MIL_JOB_PRESERVE_DEC_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MilJobPreserveDecDate = 13,
		/// <summary>
		/// MilComments : 
		/// </summary>
		[EnumTextValue("MIL_COMMENTS")]
		[ColumnEnum("MIL_COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		MilComments = 14,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 15,
		/// <summary>
		/// GsMilitaryRegionId : 
		/// </summary>
		[EnumTextValue("GS_MILITARY_REGION_ID")]
		[ColumnEnum("GS_MILITARY_REGION_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsMilitaryRegionId = 16,
		/// <summary>
		/// GsMilitaryOfficeId : 
		/// </summary>
		[EnumTextValue("GS_MILITARY_OFFICE_ID")]
		[ColumnEnum("GS_MILITARY_OFFICE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsMilitaryOfficeId = 17,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 18,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 19
	}//End enum

	#endregion SaMiltaryColumn Enum

} // end namespace
