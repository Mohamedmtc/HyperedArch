
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmCodeEngTest.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_CODE_ENG_TEST' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmCodeEngTestBase : EntityBase, IAdmCodeEngTest, IEntityId<AdmCodeEngTestKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmCodeEngTestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmCodeEngTestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmCodeEngTestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmCodeEngTest> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCodeEngTestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCodeEngTestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmCodeEngTestBase"/> instance.
		///</summary>
		public AdmCodeEngTestBase()
		{
			this.entityData = new AdmCodeEngTestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmCodeEngTestBase"/> instance.
		///</summary>
		///<param name="_admCodeEngTestId">شهادات انجليش دولية</param>
		///<param name="_asFacultyInfoId">فى حالة الجامعة=null</param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_asCodeDegreeId">Master/Dr</param>
		///<param name="_descAr">IELTS IBT TOEFL .....</param>
		///<param name="_descEn"></param>
		///<param name="_minMark">درجة الاعفاء</param>
		///<param name="_maxMark"></param>
		///<param name="_exmptMark">درجة الاعفاء</param>
		///<param name="_edCourseId">مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE</param>
		///<param name="_admCdePlacementExamId">اعفاء من امتحان قبول انجليش داخلى</param>
		///<param name="_validPeriod">فترة صلاحية الشهادة من تاريخ الحصول عليها</param>
		///<param name="_foreignFlg">FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmCodeEngTestBase(System.Decimal _admCodeEngTestId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.String _descAr, 
			System.String _descEn, System.Decimal? _minMark, System.Decimal? _maxMark, 
			System.Decimal? _exmptMark, System.Decimal? _edCourseId, System.Decimal? _admCdePlacementExamId, 
			System.Int16? _validPeriod, System.Decimal? _foreignFlg, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new AdmCodeEngTestEntityData();
			this.backupData = null;

			this.AdmCodeEngTestId = _admCodeEngTestId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.DescAr = _descAr;
			this.DescEn = _descEn;
			this.MinMark = _minMark;
			this.MaxMark = _maxMark;
			this.ExmptMark = _exmptMark;
			this.EdCourseId = _edCourseId;
			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.ValidPeriod = _validPeriod;
			this.ForeignFlg = _foreignFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmCodeEngTest"/> instance.
		///</summary>
		///<param name="_admCodeEngTestId">شهادات انجليش دولية</param>
		///<param name="_asFacultyInfoId">فى حالة الجامعة=null</param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_asCodeDegreeId">Master/Dr</param>
		///<param name="_descAr">IELTS IBT TOEFL .....</param>
		///<param name="_descEn"></param>
		///<param name="_minMark">درجة الاعفاء</param>
		///<param name="_maxMark"></param>
		///<param name="_exmptMark">درجة الاعفاء</param>
		///<param name="_edCourseId">مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE</param>
		///<param name="_admCdePlacementExamId">اعفاء من امتحان قبول انجليش داخلى</param>
		///<param name="_validPeriod">فترة صلاحية الشهادة من تاريخ الحصول عليها</param>
		///<param name="_foreignFlg">FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmCodeEngTest CreateAdmCodeEngTest(System.Decimal _admCodeEngTestId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.String _descAr, 
			System.String _descEn, System.Decimal? _minMark, System.Decimal? _maxMark, 
			System.Decimal? _exmptMark, System.Decimal? _edCourseId, System.Decimal? _admCdePlacementExamId, 
			System.Int16? _validPeriod, System.Decimal? _foreignFlg, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			AdmCodeEngTest newAdmCodeEngTest = new AdmCodeEngTest();
			newAdmCodeEngTest.AdmCodeEngTestId = _admCodeEngTestId;
			newAdmCodeEngTest.AsFacultyInfoId = _asFacultyInfoId;
			newAdmCodeEngTest.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmCodeEngTest.AsCodeDegreeId = _asCodeDegreeId;
			newAdmCodeEngTest.DescAr = _descAr;
			newAdmCodeEngTest.DescEn = _descEn;
			newAdmCodeEngTest.MinMark = _minMark;
			newAdmCodeEngTest.MaxMark = _maxMark;
			newAdmCodeEngTest.ExmptMark = _exmptMark;
			newAdmCodeEngTest.EdCourseId = _edCourseId;
			newAdmCodeEngTest.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmCodeEngTest.ValidPeriod = _validPeriod;
			newAdmCodeEngTest.ForeignFlg = _foreignFlg;
			newAdmCodeEngTest.SeUserId = _seUserId;
			newAdmCodeEngTest.LastDate = _lastDate;
			return newAdmCodeEngTest;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmCodeEngTestId property. 
		///		شهادات انجليش دولية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"شهادات انجليش دولية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmCodeEngTestId
		{
			get
			{
				return this.entityData.AdmCodeEngTestId; 
			}
			
			set
			{
				if (this.entityData.AdmCodeEngTestId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.AdmCodeEngTestId, this.entityData.AdmCodeEngTestId);
				this.entityData.AdmCodeEngTestId = value;
				this.EntityId.AdmCodeEngTestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.AdmCodeEngTestId, this.entityData.AdmCodeEngTestId);
				OnPropertyChanged("AdmCodeEngTestId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_CODE_ENG_TEST_ID property.
		///		شهادات انجليش دولية
		/// </summary>
		/// <remarks>This is the original value of the ADM_CODE_ENG_TEST_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmCodeEngTestId
		{
			get { return this.entityData.OriginalAdmCodeEngTestId; }
			set { this.entityData.OriginalAdmCodeEngTestId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		فى حالة الجامعة=null
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فى حالة الجامعة=null"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		UG/PG
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"UG/PG"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		Master/Dr
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Master/Dr"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescAr property. 
		///		IELTS IBT TOEFL .....
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"IELTS IBT TOEFL ....."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescAr
		{
			get
			{
				return this.entityData.DescAr; 
			}
			
			set
			{
				if (this.entityData.DescAr == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.DescAr, this.entityData.DescAr);
				this.entityData.DescAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.DescAr, this.entityData.DescAr);
				OnPropertyChanged("DescAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescEn
		{
			get
			{
				return this.entityData.DescEn; 
			}
			
			set
			{
				if (this.entityData.DescEn == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.DescEn, this.entityData.DescEn);
				this.entityData.DescEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.DescEn, this.entityData.DescEn);
				OnPropertyChanged("DescEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinMark property. 
		///		درجة الاعفاء
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجة الاعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinMark
		{
			get
			{
				return this.entityData.MinMark; 
			}
			
			set
			{
				if (this.entityData.MinMark == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.MinMark, this.entityData.MinMark);
				this.entityData.MinMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.MinMark, this.entityData.MinMark);
				OnPropertyChanged("MinMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxMark
		{
			get
			{
				return this.entityData.MaxMark; 
			}
			
			set
			{
				if (this.entityData.MaxMark == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.MaxMark, this.entityData.MaxMark);
				this.entityData.MaxMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.MaxMark, this.entityData.MaxMark);
				OnPropertyChanged("MaxMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmptMark property. 
		///		درجة الاعفاء
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExmptMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجة الاعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExmptMark
		{
			get
			{
				return this.entityData.ExmptMark; 
			}
			
			set
			{
				if (this.entityData.ExmptMark == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.ExmptMark, this.entityData.ExmptMark);
				this.entityData.ExmptMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.ExmptMark, this.entityData.ExmptMark);
				OnPropertyChanged("ExmptMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		اعفاء من امتحان قبول انجليش داخلى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdePlacementExamIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعفاء من امتحان قبول انجليش داخلى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValidPeriod property. 
		///		فترة صلاحية الشهادة من تاريخ الحصول عليها
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsValidPeriodNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فترة صلاحية الشهادة من تاريخ الحصول عليها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? ValidPeriod
		{
			get
			{
				return this.entityData.ValidPeriod; 
			}
			
			set
			{
				if (this.entityData.ValidPeriod == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.ValidPeriod, this.entityData.ValidPeriod);
				this.entityData.ValidPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.ValidPeriod, this.entityData.ValidPeriod);
				OnPropertyChanged("ValidPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignFlg property. 
		///		FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsForeignFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"FOREIGN_FLG 0 مواطن 2 وافد 3 الكل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ForeignFlg
		{
			get
			{
				return this.entityData.ForeignFlg; 
			}
			
			set
			{
				if (this.entityData.ForeignFlg == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.ForeignFlg, this.entityData.ForeignFlg);
				this.entityData.ForeignFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.ForeignFlg, this.entityData.ForeignFlg);
				OnPropertyChanged("ForeignFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmCodeEngTestColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCodeEngTestColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return entityData.AdmCdePlacementExamIdSource; }
            set { entityData.AdmCdePlacementExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmEnglishProficiency objects
		///	which are related to this object through the relation FK_ADM_ENGLISH_PROFICIENCY_ADM_CODE_ENG_TEST
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmEnglishProficiency> AdmEnglishProficiencyCollection
		{
			get { return entityData.AdmEnglishProficiencyCollection; }
			set { entityData.AdmEnglishProficiencyCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescAr", "Desc Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescEn", "Desc En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_CODE_ENG_TEST"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_CODE_ENG_TEST_ID", "AS_FACULTY_INFO_ID", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "DESC_AR", "DESC_EN", "MIN_MARK", "MAX_MARK", "EXMPT_MARK", "ED_COURSE_ID", "ADM_CDE_PLACEMENT_EXAM_ID", "VALID_PERIOD", "FOREIGN_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmCodeEngTestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmCodeEngTest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmCodeEngTest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmCodeEngTest);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmCodeEngTest Entity 
		///</summary>
		protected virtual AdmCodeEngTest Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmCodeEngTest copy = new AdmCodeEngTest();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmCodeEngTestId = this.AdmCodeEngTestId;
					copy.OriginalAdmCodeEngTestId = this.OriginalAdmCodeEngTestId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.DescAr = this.DescAr;
				copy.DescEn = this.DescEn;
				copy.MinMark = this.MinMark;
				copy.MaxMark = this.MaxMark;
				copy.ExmptMark = this.ExmptMark;
				copy.EdCourseId = this.EdCourseId;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
				copy.ValidPeriod = this.ValidPeriod;
				copy.ForeignFlg = this.ForeignFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				copy.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
		
			//deep copy nested objects
			copy.AdmEnglishProficiencyCollection = (TList<AdmEnglishProficiency>) MakeCopyOf(this.AdmEnglishProficiencyCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmCodeEngTest Entity 
		///</summary>
		public virtual AdmCodeEngTest Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmCodeEngTest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmCodeEngTest DeepCopy()
		{
			return EntityHelper.Clone<AdmCodeEngTest>(this as AdmCodeEngTest);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmCodeEngTestEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmCodeEngTestEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmCodeEngTestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmCodeEngTestColumn column)
		{
			switch(column)
			{
					case AdmCodeEngTestColumn.AdmCodeEngTestId:
					return entityData.AdmCodeEngTestId != _originalData.AdmCodeEngTestId;
					case AdmCodeEngTestColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case AdmCodeEngTestColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmCodeEngTestColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmCodeEngTestColumn.DescAr:
					return entityData.DescAr != _originalData.DescAr;
					case AdmCodeEngTestColumn.DescEn:
					return entityData.DescEn != _originalData.DescEn;
					case AdmCodeEngTestColumn.MinMark:
					return entityData.MinMark != _originalData.MinMark;
					case AdmCodeEngTestColumn.MaxMark:
					return entityData.MaxMark != _originalData.MaxMark;
					case AdmCodeEngTestColumn.ExmptMark:
					return entityData.ExmptMark != _originalData.ExmptMark;
					case AdmCodeEngTestColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case AdmCodeEngTestColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmCodeEngTestColumn.ValidPeriod:
					return entityData.ValidPeriod != _originalData.ValidPeriod;
					case AdmCodeEngTestColumn.ForeignFlg:
					return entityData.ForeignFlg != _originalData.ForeignFlg;
					case AdmCodeEngTestColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmCodeEngTestColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmCodeEngTestColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmCodeEngTestId != _originalData.AdmCodeEngTestId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.DescAr != _originalData.DescAr;
			result = result || entityData.DescEn != _originalData.DescEn;
			result = result || entityData.MinMark != _originalData.MinMark;
			result = result || entityData.MaxMark != _originalData.MaxMark;
			result = result || entityData.ExmptMark != _originalData.ExmptMark;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.ValidPeriod != _originalData.ValidPeriod;
			result = result || entityData.ForeignFlg != _originalData.ForeignFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmCodeEngTest Entity with the original data.
		///</summary>
		public AdmCodeEngTest GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmCodeEngTest(
				_originalData.AdmCodeEngTestId,
				_originalData.AsFacultyInfoId,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.DescAr,
				_originalData.DescEn,
				_originalData.MinMark,
				_originalData.MaxMark,
				_originalData.ExmptMark,
				_originalData.EdCourseId,
				_originalData.AdmCdePlacementExamId,
				_originalData.ValidPeriod,
				_originalData.ForeignFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmCodeEngTest)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmCodeEngTestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmCodeEngTestBase)
				return ValueEquals(this, (AdmCodeEngTestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmCodeEngTestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmCodeEngTestId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.DescAr == null) ? string.Empty : this.DescAr.ToString()).GetHashCode() ^ 
					((this.DescEn == null) ? string.Empty : this.DescEn.ToString()).GetHashCode() ^ 
					((this.MinMark == null) ? string.Empty : this.MinMark.ToString()).GetHashCode() ^ 
					((this.MaxMark == null) ? string.Empty : this.MaxMark.ToString()).GetHashCode() ^ 
					((this.ExmptMark == null) ? string.Empty : this.ExmptMark.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString()).GetHashCode() ^ 
					((this.ValidPeriod == null) ? string.Empty : this.ValidPeriod.ToString()).GetHashCode() ^ 
					((this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmCodeEngTestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmCodeEngTestBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmCodeEngTestBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmCodeEngTestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmCodeEngTestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmCodeEngTestBase Object1, AdmCodeEngTestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmCodeEngTestId != Object2.AdmCodeEngTestId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.DescAr != null && Object2.DescAr != null )
			{
				if (Object1.DescAr != Object2.DescAr)
					equal = false;
			}
			else if (Object1.DescAr == null ^ Object2.DescAr == null )
			{
				equal = false;
			}
			if ( Object1.DescEn != null && Object2.DescEn != null )
			{
				if (Object1.DescEn != Object2.DescEn)
					equal = false;
			}
			else if (Object1.DescEn == null ^ Object2.DescEn == null )
			{
				equal = false;
			}
			if ( Object1.MinMark != null && Object2.MinMark != null )
			{
				if (Object1.MinMark != Object2.MinMark)
					equal = false;
			}
			else if (Object1.MinMark == null ^ Object2.MinMark == null )
			{
				equal = false;
			}
			if ( Object1.MaxMark != null && Object2.MaxMark != null )
			{
				if (Object1.MaxMark != Object2.MaxMark)
					equal = false;
			}
			else if (Object1.MaxMark == null ^ Object2.MaxMark == null )
			{
				equal = false;
			}
			if ( Object1.ExmptMark != null && Object2.ExmptMark != null )
			{
				if (Object1.ExmptMark != Object2.ExmptMark)
					equal = false;
			}
			else if (Object1.ExmptMark == null ^ Object2.ExmptMark == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdePlacementExamId != null && Object2.AdmCdePlacementExamId != null )
			{
				if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
					equal = false;
			}
			else if (Object1.AdmCdePlacementExamId == null ^ Object2.AdmCdePlacementExamId == null )
			{
				equal = false;
			}
			if ( Object1.ValidPeriod != null && Object2.ValidPeriod != null )
			{
				if (Object1.ValidPeriod != Object2.ValidPeriod)
					equal = false;
			}
			else if (Object1.ValidPeriod == null ^ Object2.ValidPeriod == null )
			{
				equal = false;
			}
			if ( Object1.ForeignFlg != null && Object2.ForeignFlg != null )
			{
				if (Object1.ForeignFlg != Object2.ForeignFlg)
					equal = false;
			}
			else if (Object1.ForeignFlg == null ^ Object2.ForeignFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmCodeEngTestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmCodeEngTestComparer GetComparer()
        {
            return new AdmCodeEngTestComparer();
        }
        */

        // Comparer delegates back to AdmCodeEngTest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmCodeEngTest rhs, AdmCodeEngTestColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmCodeEngTestColumn.AdmCodeEngTestId:
            		return this.AdmCodeEngTestId.CompareTo(rhs.AdmCodeEngTestId);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.DescAr:
            		return this.DescAr.CompareTo(rhs.DescAr);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.DescEn:
            		return this.DescEn.CompareTo(rhs.DescEn);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.MinMark:
            		return this.MinMark.Value.CompareTo(rhs.MinMark.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.MaxMark:
            		return this.MaxMark.Value.CompareTo(rhs.MaxMark.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.ExmptMark:
            		return this.ExmptMark.Value.CompareTo(rhs.ExmptMark.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.Value.CompareTo(rhs.AdmCdePlacementExamId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.ValidPeriod:
            		return this.ValidPeriod.Value.CompareTo(rhs.ValidPeriod.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.ForeignFlg:
            		return this.ForeignFlg.Value.CompareTo(rhs.ForeignFlg.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmCodeEngTestColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmCodeEngTestKey> Members
		
		// member variable for the EntityId property
		private AdmCodeEngTestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmCodeEngTestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmCodeEngTestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmCodeEngTest")
					.Append("|").Append( this.AdmCodeEngTestId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- AdmCodeEngTestId: {0}{15}- AsFacultyInfoId: {1}{15}- AsCodeDegreeClassId: {2}{15}- AsCodeDegreeId: {3}{15}- DescAr: {4}{15}- DescEn: {5}{15}- MinMark: {6}{15}- MaxMark: {7}{15}- ExmptMark: {8}{15}- EdCourseId: {9}{15}- AdmCdePlacementExamId: {10}{15}- ValidPeriod: {11}{15}- ForeignFlg: {12}{15}- SeUserId: {13}{15}- LastDate: {14}{15}{17}", 
				this.AdmCodeEngTestId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.DescAr == null) ? string.Empty : this.DescAr.ToString(),
				(this.DescEn == null) ? string.Empty : this.DescEn.ToString(),
				(this.MinMark == null) ? string.Empty : this.MinMark.ToString(),
				(this.MaxMark == null) ? string.Empty : this.MaxMark.ToString(),
				(this.ExmptMark == null) ? string.Empty : this.ExmptMark.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString(),
				(this.ValidPeriod == null) ? string.Empty : this.ValidPeriod.ToString(),
				(this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_CODE_ENG_TEST' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmCodeEngTestEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_CODE_ENG_TEST_ID : شهادات انجليش دولية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_CODE_ENG_TEST"</remarks>
		public System.Decimal AdmCodeEngTestId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmCodeEngTestId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : فى حالة الجامعة=null
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : UG/PG
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : Master/Dr
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// DESC_AR : IELTS IBT TOEFL .....
		/// </summary>
		public System.String		  DescAr = null;
		
		/// <summary>
		/// DESC_EN : 
		/// </summary>
		public System.String		  DescEn = null;
		
		/// <summary>
		/// MIN_MARK : درجة الاعفاء
		/// </summary>
		public System.Decimal?		  MinMark = null;
		
		/// <summary>
		/// MAX_MARK : 
		/// </summary>
		public System.Decimal?		  MaxMark = null;
		
		/// <summary>
		/// EXMPT_MARK : درجة الاعفاء
		/// </summary>
		public System.Decimal?		  ExmptMark = null;
		
		/// <summary>
		/// ED_COURSE_ID : مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ADM_CDE_PLACEMENT_EXAM_ID : اعفاء من امتحان قبول انجليش داخلى
		/// </summary>
		public System.Decimal?		  AdmCdePlacementExamId = null;
		
		/// <summary>
		/// VALID_PERIOD : فترة صلاحية الشهادة من تاريخ الحصول عليها
		/// </summary>
		public System.Int16?		  ValidPeriod = null;
		
		/// <summary>
		/// FOREIGN_FLG : FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// </summary>
		public System.Decimal?		  ForeignFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdePlacementExam _admCdePlacementExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return this._admCdePlacementExamIdSource; }
            set { this._admCdePlacementExamIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmEnglishProficiencyCollection
		
		private TList<AdmEnglishProficiency> _admEnglishProficiencyAdmCodeEngTestId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admEnglishProficiencyAdmCodeEngTestId
		/// </summary>
		
		public TList<AdmEnglishProficiency> AdmEnglishProficiencyCollection
		{
			get
			{
				if (_admEnglishProficiencyAdmCodeEngTestId == null)
				{
				_admEnglishProficiencyAdmCodeEngTestId = new TList<AdmEnglishProficiency>();
				}
	
				return _admEnglishProficiencyAdmCodeEngTestId;
			}
			set { _admEnglishProficiencyAdmCodeEngTestId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmCodeEngTestEntityData _tmp = new AdmCodeEngTestEntityData();
						
			_tmp.AdmCodeEngTestId = this.AdmCodeEngTestId;
			_tmp.OriginalAdmCodeEngTestId = this.OriginalAdmCodeEngTestId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.DescAr = this.DescAr;
			_tmp.DescEn = this.DescEn;
			_tmp.MinMark = this.MinMark;
			_tmp.MaxMark = this.MaxMark;
			_tmp.ExmptMark = this.ExmptMark;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.ValidPeriod = this.ValidPeriod;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdePlacementExamIdSource != null)
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admEnglishProficiencyAdmCodeEngTestId != null)
				_tmp.AdmEnglishProficiencyCollection = (TList<AdmEnglishProficiency>) MakeCopyOf(this.AdmEnglishProficiencyCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmCodeEngTestEntityData _tmp = new AdmCodeEngTestEntityData();
						
			_tmp.AdmCodeEngTestId = this.AdmCodeEngTestId;
			_tmp.OriginalAdmCodeEngTestId = this.OriginalAdmCodeEngTestId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.DescAr = this.DescAr;
			_tmp.DescEn = this.DescEn;
			_tmp.MinMark = this.MinMark;
			_tmp.MaxMark = this.MaxMark;
			_tmp.ExmptMark = this.ExmptMark;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.ValidPeriod = this.ValidPeriod;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				_tmp.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmEnglishProficiencyCollection = (TList<AdmEnglishProficiency>) MakeCopyOf(this.AdmEnglishProficiencyCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCodeEngTestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmCodeEngTestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCodeEngTestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmCodeEngTestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCodeEngTestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmCodeEngTestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmCodeEngTestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmCodeEngTestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCodeEngTestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmCodeEngTestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmCodeEngTestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmCodeEngTestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmCodeEngTestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmCodeEngTest"/> object.
	/// </remarks>
	public class AdmCodeEngTestEventArgs : System.EventArgs
	{
		private AdmCodeEngTestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmCodeEngTestEventArgs class.
		///</summary>
		public AdmCodeEngTestEventArgs(AdmCodeEngTestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmCodeEngTestEventArgs class.
		///</summary>
		public AdmCodeEngTestEventArgs(AdmCodeEngTestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmCodeEngTestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmCodeEngTestColumn" />
		public AdmCodeEngTestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmCodeEngTest related events.
	///</summary>
	public delegate void AdmCodeEngTestEventHandler(object sender, AdmCodeEngTestEventArgs e);
	
	#region AdmCodeEngTestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmCodeEngTestComparer : System.Collections.Generic.IComparer<AdmCodeEngTest>
	{
		AdmCodeEngTestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCodeEngTestComparer"/> class.
        /// </summary>
		public AdmCodeEngTestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCodeEngTestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmCodeEngTestComparer(AdmCodeEngTestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmCodeEngTest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmCodeEngTest"/> to compare.</param>
        /// <param name="b">The second <c>AdmCodeEngTest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmCodeEngTest a, AdmCodeEngTest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmCodeEngTest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmCodeEngTest a, AdmCodeEngTest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmCodeEngTestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmCodeEngTestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmCodeEngTest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmCodeEngTestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestKey class.
		/// </summary>
		public AdmCodeEngTestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestKey class.
		/// </summary>
		public AdmCodeEngTestKey(AdmCodeEngTestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmCodeEngTestId = entity.AdmCodeEngTestId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCodeEngTestKey class.
		/// </summary>
		public AdmCodeEngTestKey(System.Decimal _admCodeEngTestId)
		{
			#region Init Properties

			this.AdmCodeEngTestId = _admCodeEngTestId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmCodeEngTestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmCodeEngTestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmCodeEngTestId property
		private System.Decimal _admCodeEngTestId;
		
		/// <summary>
		/// Gets or sets the AdmCodeEngTestId property.
		/// </summary>
		public System.Decimal AdmCodeEngTestId
		{
			get { return _admCodeEngTestId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmCodeEngTestId = value;
				
				_admCodeEngTestId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmCodeEngTestId = ( values["AdmCodeEngTestId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmCodeEngTestId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmCodeEngTestId", AdmCodeEngTestId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmCodeEngTestId: {0}{1}",
								AdmCodeEngTestId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmCodeEngTestColumn Enum
	
	/// <summary>
	/// Enumerate the AdmCodeEngTest columns.
	/// </summary>
	[Serializable]
	public enum AdmCodeEngTestColumn : int
	{
		/// <summary>
		/// AdmCodeEngTestId : شهادات انجليش دولية
		/// </summary>
		[EnumTextValue("ADM_CODE_ENG_TEST_ID")]
		[ColumnEnum("ADM_CODE_ENG_TEST_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmCodeEngTestId = 1,
		/// <summary>
		/// AsFacultyInfoId : فى حالة الجامعة=null
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 2,
		/// <summary>
		/// AsCodeDegreeClassId : UG/PG
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 3,
		/// <summary>
		/// AsCodeDegreeId : Master/Dr
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 4,
		/// <summary>
		/// DescAr : IELTS IBT TOEFL .....
		/// </summary>
		[EnumTextValue("DESC_AR")]
		[ColumnEnum("DESC_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescAr = 5,
		/// <summary>
		/// DescEn : 
		/// </summary>
		[EnumTextValue("DESC_EN")]
		[ColumnEnum("DESC_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescEn = 6,
		/// <summary>
		/// MinMark : درجة الاعفاء
		/// </summary>
		[EnumTextValue("MIN_MARK")]
		[ColumnEnum("MIN_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinMark = 7,
		/// <summary>
		/// MaxMark : 
		/// </summary>
		[EnumTextValue("MAX_MARK")]
		[ColumnEnum("MAX_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxMark = 8,
		/// <summary>
		/// ExmptMark : درجة الاعفاء
		/// </summary>
		[EnumTextValue("EXMPT_MARK")]
		[ColumnEnum("EXMPT_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExmptMark = 9,
		/// <summary>
		/// EdCourseId : مقرر الاعفاءXXADM_APP_PLACE_EXAM_COURSE
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 10,
		/// <summary>
		/// AdmCdePlacementExamId : اعفاء من امتحان قبول انجليش داخلى
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdePlacementExamId = 11,
		/// <summary>
		/// ValidPeriod : فترة صلاحية الشهادة من تاريخ الحصول عليها
		/// </summary>
		[EnumTextValue("VALID_PERIOD")]
		[ColumnEnum("VALID_PERIOD", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		ValidPeriod = 12,
		/// <summary>
		/// ForeignFlg : FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// </summary>
		[EnumTextValue("FOREIGN_FLG")]
		[ColumnEnum("FOREIGN_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ForeignFlg = 13,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15
	}//End enum

	#endregion AdmCodeEngTestColumn Enum

} // end namespace
