
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScScheduleDtlDayException.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SCHEDULE_DTL_DAY_Exception' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScScheduleDtlDayExceptionBase : EntityBase, IScScheduleDtlDayException, IEntityId<ScScheduleDtlDayExceptionKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScScheduleDtlDayExceptionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScScheduleDtlDayExceptionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScScheduleDtlDayExceptionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScScheduleDtlDayException> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlDayExceptionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlDayExceptionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlDayExceptionBase"/> instance.
		///</summary>
		public ScScheduleDtlDayExceptionBase()
		{
			this.entityData = new ScScheduleDtlDayExceptionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlDayExceptionBase"/> instance.
		///</summary>
		///<param name="_scScheduleDtlDayExceptionId"></param>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_exceptionDate"></param>
		///<param name="_cancleFlg"></param>
		///<param name="_oldDateChanged"></param>
		public ScScheduleDtlDayExceptionBase(System.Decimal _scScheduleDtlDayExceptionId, System.Decimal _scScheduleDtlDayId, 
			System.Decimal? _scBuildingId, System.Decimal? _scHallId, System.DateTime? _fromTime, 
			System.DateTime? _toTime, System.DateTime? _exceptionDate, System.Boolean? _cancleFlg, 
			System.DateTime _oldDateChanged)
		{
			this.entityData = new ScScheduleDtlDayExceptionEntityData();
			this.backupData = null;

			this.ScScheduleDtlDayExceptionId = _scScheduleDtlDayExceptionId;
			this.ScScheduleDtlDayId = _scScheduleDtlDayId;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.FromTime = _fromTime;
			this.ToTime = _toTime;
			this.ExceptionDate = _exceptionDate;
			this.CancleFlg = _cancleFlg;
			this.OldDateChanged = _oldDateChanged;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScScheduleDtlDayException"/> instance.
		///</summary>
		///<param name="_scScheduleDtlDayExceptionId"></param>
		///<param name="_scScheduleDtlDayId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_scHallId"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_exceptionDate"></param>
		///<param name="_cancleFlg"></param>
		///<param name="_oldDateChanged"></param>
		public static ScScheduleDtlDayException CreateScScheduleDtlDayException(System.Decimal _scScheduleDtlDayExceptionId, System.Decimal _scScheduleDtlDayId, 
			System.Decimal? _scBuildingId, System.Decimal? _scHallId, System.DateTime? _fromTime, 
			System.DateTime? _toTime, System.DateTime? _exceptionDate, System.Boolean? _cancleFlg, 
			System.DateTime _oldDateChanged)
		{
			ScScheduleDtlDayException newScScheduleDtlDayException = new ScScheduleDtlDayException();
			newScScheduleDtlDayException.ScScheduleDtlDayExceptionId = _scScheduleDtlDayExceptionId;
			newScScheduleDtlDayException.ScScheduleDtlDayId = _scScheduleDtlDayId;
			newScScheduleDtlDayException.ScBuildingId = _scBuildingId;
			newScScheduleDtlDayException.ScHallId = _scHallId;
			newScScheduleDtlDayException.FromTime = _fromTime;
			newScScheduleDtlDayException.ToTime = _toTime;
			newScScheduleDtlDayException.ExceptionDate = _exceptionDate;
			newScScheduleDtlDayException.CancleFlg = _cancleFlg;
			newScScheduleDtlDayException.OldDateChanged = _oldDateChanged;
			return newScScheduleDtlDayException;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlDayExceptionId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScScheduleDtlDayExceptionId
		{
			get
			{
				return this.entityData.ScScheduleDtlDayExceptionId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlDayExceptionId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayExceptionId, this.entityData.ScScheduleDtlDayExceptionId);
				this.entityData.ScScheduleDtlDayExceptionId = value;
				this.EntityId.ScScheduleDtlDayExceptionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayExceptionId, this.entityData.ScScheduleDtlDayExceptionId);
				OnPropertyChanged("ScScheduleDtlDayExceptionId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SCHEDULE_DTL_DAY_Exception_Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_SCHEDULE_DTL_DAY_Exception_Id property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScScheduleDtlDayExceptionId
		{
			get { return this.entityData.OriginalScScheduleDtlDayExceptionId; }
			set { this.entityData.OriginalScScheduleDtlDayExceptionId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScScheduleDtlDayId
		{
			get
			{
				return this.entityData.ScScheduleDtlDayId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlDayId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				this.entityData.ScScheduleDtlDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayId, this.entityData.ScScheduleDtlDayId);
				OnPropertyChanged("ScScheduleDtlDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromTime
		{
			get
			{
				return this.entityData.FromTime; 
			}
			
			set
			{
				if (this.entityData.FromTime == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.FromTime, this.entityData.FromTime);
				this.entityData.FromTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.FromTime, this.entityData.FromTime);
				OnPropertyChanged("FromTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToTime
		{
			get
			{
				return this.entityData.ToTime; 
			}
			
			set
			{
				if (this.entityData.ToTime == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ToTime, this.entityData.ToTime);
				this.entityData.ToTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ToTime, this.entityData.ToTime);
				OnPropertyChanged("ToTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExceptionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExceptionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExceptionDate
		{
			get
			{
				return this.entityData.ExceptionDate; 
			}
			
			set
			{
				if (this.entityData.ExceptionDate == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.ExceptionDate, this.entityData.ExceptionDate);
				this.entityData.ExceptionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.ExceptionDate, this.entityData.ExceptionDate);
				OnPropertyChanged("ExceptionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancleFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCancleFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CancleFlg
		{
			get
			{
				return this.entityData.CancleFlg; 
			}
			
			set
			{
				if (this.entityData.CancleFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.CancleFlg, this.entityData.CancleFlg);
				this.entityData.CancleFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.CancleFlg, this.entityData.CancleFlg);
				OnPropertyChanged("CancleFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OldDateChanged property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime OldDateChanged
		{
			get
			{
				return this.entityData.OldDateChanged; 
			}
			
			set
			{
				if (this.entityData.OldDateChanged == value)
					return;
					
				OnColumnChanging(ScScheduleDtlDayExceptionColumn.OldDateChanged, this.entityData.OldDateChanged);
				this.entityData.OldDateChanged = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlDayExceptionColumn.OldDateChanged, this.entityData.OldDateChanged);
				OnPropertyChanged("OldDateChanged");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtlDay"/>.
		/// </summary>
		/// <value>The source ScScheduleDtlDay for ScScheduleDtlDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScScheduleDtlDay ScScheduleDtlDayIdSource
      	{
            get { return entityData.ScScheduleDtlDayIdSource; }
            set { entityData.ScScheduleDtlDayIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SCHEDULE_DTL_DAY_Exception"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SCHEDULE_DTL_DAY_Exception_Id", "SC_SCHEDULE_DTL_DAY_ID", "SC_BUILDING_ID", "SC_HALL_ID", "FROM_TIME", "TO_TIME", "Exception_Date", "Cancle_FLG", "OLD_Date_Changed"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScScheduleDtlDayExceptionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScScheduleDtlDayException) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScScheduleDtlDayException>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScScheduleDtlDayException);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScScheduleDtlDayException Entity 
		///</summary>
		protected virtual ScScheduleDtlDayException Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScScheduleDtlDayException copy = new ScScheduleDtlDayException();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScScheduleDtlDayExceptionId = this.ScScheduleDtlDayExceptionId;
					copy.OriginalScScheduleDtlDayExceptionId = this.OriginalScScheduleDtlDayExceptionId;
				copy.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.FromTime = this.FromTime;
				copy.ToTime = this.ToTime;
				copy.ExceptionDate = this.ExceptionDate;
				copy.CancleFlg = this.CancleFlg;
				copy.OldDateChanged = this.OldDateChanged;
			
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScScheduleDtlDayIdSource != null && existingCopies.Contains(this.ScScheduleDtlDayIdSource))
				copy.ScScheduleDtlDayIdSource = existingCopies[this.ScScheduleDtlDayIdSource] as ScScheduleDtlDay;
			else
				copy.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource, existingCopies) as ScScheduleDtlDay;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtlDayException Entity 
		///</summary>
		public virtual ScScheduleDtlDayException Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtlDayException Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScScheduleDtlDayException DeepCopy()
		{
			return EntityHelper.Clone<ScScheduleDtlDayException>(this as ScScheduleDtlDayException);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScScheduleDtlDayExceptionEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScScheduleDtlDayExceptionEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScScheduleDtlDayExceptionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScScheduleDtlDayExceptionColumn column)
		{
			switch(column)
			{
					case ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayExceptionId:
					return entityData.ScScheduleDtlDayExceptionId != _originalData.ScScheduleDtlDayExceptionId;
					case ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayId:
					return entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
					case ScScheduleDtlDayExceptionColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case ScScheduleDtlDayExceptionColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case ScScheduleDtlDayExceptionColumn.FromTime:
					return entityData.FromTime != _originalData.FromTime;
					case ScScheduleDtlDayExceptionColumn.ToTime:
					return entityData.ToTime != _originalData.ToTime;
					case ScScheduleDtlDayExceptionColumn.ExceptionDate:
					return entityData.ExceptionDate != _originalData.ExceptionDate;
					case ScScheduleDtlDayExceptionColumn.CancleFlg:
					return entityData.CancleFlg != _originalData.CancleFlg;
					case ScScheduleDtlDayExceptionColumn.OldDateChanged:
					return entityData.OldDateChanged != _originalData.OldDateChanged;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScScheduleDtlDayExceptionColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScScheduleDtlDayExceptionId != _originalData.ScScheduleDtlDayExceptionId;
			result = result || entityData.ScScheduleDtlDayId != _originalData.ScScheduleDtlDayId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.FromTime != _originalData.FromTime;
			result = result || entityData.ToTime != _originalData.ToTime;
			result = result || entityData.ExceptionDate != _originalData.ExceptionDate;
			result = result || entityData.CancleFlg != _originalData.CancleFlg;
			result = result || entityData.OldDateChanged != _originalData.OldDateChanged;
			return result;
		}	
		
		///<summary>
		///  Returns a ScScheduleDtlDayException Entity with the original data.
		///</summary>
		public ScScheduleDtlDayException GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScScheduleDtlDayException(
				_originalData.ScScheduleDtlDayExceptionId,
				_originalData.ScScheduleDtlDayId,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.FromTime,
				_originalData.ToTime,
				_originalData.ExceptionDate,
				_originalData.CancleFlg,
				_originalData.OldDateChanged
				);
				
			return (ScScheduleDtlDayException)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScScheduleDtlDayExceptionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScScheduleDtlDayExceptionBase)
				return ValueEquals(this, (ScScheduleDtlDayExceptionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScScheduleDtlDayExceptionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScScheduleDtlDayExceptionId.GetHashCode() ^ 
					this.ScScheduleDtlDayId.GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.FromTime == null) ? string.Empty : this.FromTime.ToString()).GetHashCode() ^ 
					((this.ToTime == null) ? string.Empty : this.ToTime.ToString()).GetHashCode() ^ 
					((this.ExceptionDate == null) ? string.Empty : this.ExceptionDate.ToString()).GetHashCode() ^ 
					((this.CancleFlg == null) ? string.Empty : this.CancleFlg.ToString()).GetHashCode() ^ 
					this.OldDateChanged.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScScheduleDtlDayExceptionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScScheduleDtlDayExceptionBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScScheduleDtlDayExceptionBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScScheduleDtlDayExceptionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScScheduleDtlDayExceptionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScScheduleDtlDayExceptionBase Object1, ScScheduleDtlDayExceptionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScScheduleDtlDayExceptionId != Object2.ScScheduleDtlDayExceptionId)
				equal = false;
			if (Object1.ScScheduleDtlDayId != Object2.ScScheduleDtlDayId)
				equal = false;
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.FromTime != null && Object2.FromTime != null )
			{
				if (Object1.FromTime != Object2.FromTime)
					equal = false;
			}
			else if (Object1.FromTime == null ^ Object2.FromTime == null )
			{
				equal = false;
			}
			if ( Object1.ToTime != null && Object2.ToTime != null )
			{
				if (Object1.ToTime != Object2.ToTime)
					equal = false;
			}
			else if (Object1.ToTime == null ^ Object2.ToTime == null )
			{
				equal = false;
			}
			if ( Object1.ExceptionDate != null && Object2.ExceptionDate != null )
			{
				if (Object1.ExceptionDate != Object2.ExceptionDate)
					equal = false;
			}
			else if (Object1.ExceptionDate == null ^ Object2.ExceptionDate == null )
			{
				equal = false;
			}
			if ( Object1.CancleFlg != null && Object2.CancleFlg != null )
			{
				if (Object1.CancleFlg != Object2.CancleFlg)
					equal = false;
			}
			else if (Object1.CancleFlg == null ^ Object2.CancleFlg == null )
			{
				equal = false;
			}
			if (Object1.OldDateChanged != Object2.OldDateChanged)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScScheduleDtlDayExceptionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScScheduleDtlDayExceptionComparer GetComparer()
        {
            return new ScScheduleDtlDayExceptionComparer();
        }
        */

        // Comparer delegates back to ScScheduleDtlDayException
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScScheduleDtlDayException rhs, ScScheduleDtlDayExceptionColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayExceptionId:
            		return this.ScScheduleDtlDayExceptionId.CompareTo(rhs.ScScheduleDtlDayExceptionId);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ScScheduleDtlDayId:
            		return this.ScScheduleDtlDayId.CompareTo(rhs.ScScheduleDtlDayId);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.FromTime:
            		return this.FromTime.Value.CompareTo(rhs.FromTime.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ToTime:
            		return this.ToTime.Value.CompareTo(rhs.ToTime.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.ExceptionDate:
            		return this.ExceptionDate.Value.CompareTo(rhs.ExceptionDate.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.CancleFlg:
            		return this.CancleFlg.Value.CompareTo(rhs.CancleFlg.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlDayExceptionColumn.OldDateChanged:
            		return this.OldDateChanged.CompareTo(rhs.OldDateChanged);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScScheduleDtlDayExceptionKey> Members
		
		// member variable for the EntityId property
		private ScScheduleDtlDayExceptionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScScheduleDtlDayExceptionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScScheduleDtlDayExceptionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScScheduleDtlDayException")
					.Append("|").Append( this.ScScheduleDtlDayExceptionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- ScScheduleDtlDayExceptionId: {0}{9}- ScScheduleDtlDayId: {1}{9}- ScBuildingId: {2}{9}- ScHallId: {3}{9}- FromTime: {4}{9}- ToTime: {5}{9}- ExceptionDate: {6}{9}- CancleFlg: {7}{9}- OldDateChanged: {8}{9}{11}", 
				this.ScScheduleDtlDayExceptionId,
				this.ScScheduleDtlDayId,
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.FromTime == null) ? string.Empty : this.FromTime.ToString(),
				(this.ToTime == null) ? string.Empty : this.ToTime.ToString(),
				(this.ExceptionDate == null) ? string.Empty : this.ExceptionDate.ToString(),
				(this.CancleFlg == null) ? string.Empty : this.CancleFlg.ToString(),
				this.OldDateChanged,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SCHEDULE_DTL_DAY_Exception' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScScheduleDtlDayExceptionEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SCHEDULE_DTL_DAY_Exception_Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SCHEDULE_DTL_DAY_Exception"</remarks>
		public System.Decimal ScScheduleDtlDayExceptionId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScScheduleDtlDayExceptionId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_SCHEDULE_DTL_DAY_ID : 
		/// </summary>
		public System.Decimal		  ScScheduleDtlDayId = 0.0m;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : 
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// FROM_TIME : 
		/// </summary>
		public System.DateTime?		  FromTime = null;
		
		/// <summary>
		/// TO_TIME : 
		/// </summary>
		public System.DateTime?		  ToTime = null;
		
		/// <summary>
		/// Exception_Date : 
		/// </summary>
		public System.DateTime?		  ExceptionDate = null;
		
		/// <summary>
		/// Cancle_FLG : 
		/// </summary>
		public System.Boolean?		  CancleFlg = null;
		
		/// <summary>
		/// OLD_Date_Changed : 
		/// </summary>
		public System.DateTime		  OldDateChanged = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private ScScheduleDtlDay _scScheduleDtlDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtlDay"/>.
		/// </summary>
		/// <value>The source ScScheduleDtlDay for ScScheduleDtlDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScScheduleDtlDay ScScheduleDtlDayIdSource
      	{
            get { return this._scScheduleDtlDayIdSource; }
            set { this._scScheduleDtlDayIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScScheduleDtlDayExceptionEntityData _tmp = new ScScheduleDtlDayExceptionEntityData();
						
			_tmp.ScScheduleDtlDayExceptionId = this.ScScheduleDtlDayExceptionId;
			_tmp.OriginalScScheduleDtlDayExceptionId = this.OriginalScScheduleDtlDayExceptionId;
			
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.ExceptionDate = this.ExceptionDate;
			_tmp.CancleFlg = this.CancleFlg;
			_tmp.OldDateChanged = this.OldDateChanged;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.ScScheduleDtlDayIdSource != null)
				_tmp.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource) as ScScheduleDtlDay;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScScheduleDtlDayExceptionEntityData _tmp = new ScScheduleDtlDayExceptionEntityData();
						
			_tmp.ScScheduleDtlDayExceptionId = this.ScScheduleDtlDayExceptionId;
			_tmp.OriginalScScheduleDtlDayExceptionId = this.OriginalScScheduleDtlDayExceptionId;
			
			_tmp.ScScheduleDtlDayId = this.ScScheduleDtlDayId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.ExceptionDate = this.ExceptionDate;
			_tmp.CancleFlg = this.CancleFlg;
			_tmp.OldDateChanged = this.OldDateChanged;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.ScScheduleDtlDayIdSource != null && existingCopies.Contains(this.ScScheduleDtlDayIdSource))
				_tmp.ScScheduleDtlDayIdSource = existingCopies[this.ScScheduleDtlDayIdSource] as ScScheduleDtlDay;
			else
				_tmp.ScScheduleDtlDayIdSource = MakeCopyOf(this.ScScheduleDtlDayIdSource, existingCopies) as ScScheduleDtlDay;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayExceptionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScScheduleDtlDayExceptionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayExceptionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScScheduleDtlDayExceptionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayExceptionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScScheduleDtlDayExceptionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlDayExceptionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlDayExceptionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlDayExceptionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScScheduleDtlDayExceptionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlDayExceptionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlDayExceptionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScScheduleDtlDayExceptionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScScheduleDtlDayException"/> object.
	/// </remarks>
	public class ScScheduleDtlDayExceptionEventArgs : System.EventArgs
	{
		private ScScheduleDtlDayExceptionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlDayExceptionEventArgs class.
		///</summary>
		public ScScheduleDtlDayExceptionEventArgs(ScScheduleDtlDayExceptionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlDayExceptionEventArgs class.
		///</summary>
		public ScScheduleDtlDayExceptionEventArgs(ScScheduleDtlDayExceptionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScScheduleDtlDayExceptionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScScheduleDtlDayExceptionColumn" />
		public ScScheduleDtlDayExceptionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScScheduleDtlDayException related events.
	///</summary>
	public delegate void ScScheduleDtlDayExceptionEventHandler(object sender, ScScheduleDtlDayExceptionEventArgs e);
	
	#region ScScheduleDtlDayExceptionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScScheduleDtlDayExceptionComparer : System.Collections.Generic.IComparer<ScScheduleDtlDayException>
	{
		ScScheduleDtlDayExceptionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlDayExceptionComparer"/> class.
        /// </summary>
		public ScScheduleDtlDayExceptionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlDayExceptionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScScheduleDtlDayExceptionComparer(ScScheduleDtlDayExceptionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScScheduleDtlDayException"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScScheduleDtlDayException"/> to compare.</param>
        /// <param name="b">The second <c>ScScheduleDtlDayException</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScScheduleDtlDayException a, ScScheduleDtlDayException b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScScheduleDtlDayException entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScScheduleDtlDayException a, ScScheduleDtlDayException b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScScheduleDtlDayExceptionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScScheduleDtlDayExceptionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScScheduleDtlDayException"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScScheduleDtlDayExceptionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionKey class.
		/// </summary>
		public ScScheduleDtlDayExceptionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionKey class.
		/// </summary>
		public ScScheduleDtlDayExceptionKey(ScScheduleDtlDayExceptionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScScheduleDtlDayExceptionId = entity.ScScheduleDtlDayExceptionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlDayExceptionKey class.
		/// </summary>
		public ScScheduleDtlDayExceptionKey(System.Decimal _scScheduleDtlDayExceptionId)
		{
			#region Init Properties

			this.ScScheduleDtlDayExceptionId = _scScheduleDtlDayExceptionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScScheduleDtlDayExceptionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScScheduleDtlDayExceptionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScScheduleDtlDayExceptionId property
		private System.Decimal _scScheduleDtlDayExceptionId;
		
		/// <summary>
		/// Gets or sets the ScScheduleDtlDayExceptionId property.
		/// </summary>
		public System.Decimal ScScheduleDtlDayExceptionId
		{
			get { return _scScheduleDtlDayExceptionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScScheduleDtlDayExceptionId = value;
				
				_scScheduleDtlDayExceptionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScScheduleDtlDayExceptionId = ( values["ScScheduleDtlDayExceptionId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScScheduleDtlDayExceptionId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScScheduleDtlDayExceptionId", ScScheduleDtlDayExceptionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScScheduleDtlDayExceptionId: {0}{1}",
								ScScheduleDtlDayExceptionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScScheduleDtlDayExceptionColumn Enum
	
	/// <summary>
	/// Enumerate the ScScheduleDtlDayException columns.
	/// </summary>
	[Serializable]
	public enum ScScheduleDtlDayExceptionColumn : int
	{
		/// <summary>
		/// ScScheduleDtlDayExceptionId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_DAY_Exception_Id")]
		[ColumnEnum("SC_SCHEDULE_DTL_DAY_Exception_Id", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScScheduleDtlDayExceptionId = 1,
		/// <summary>
		/// ScScheduleDtlDayId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_DAY_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScScheduleDtlDayId = 2,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 3,
		/// <summary>
		/// ScHallId : 
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 4,
		/// <summary>
		/// FromTime : 
		/// </summary>
		[EnumTextValue("FROM_TIME")]
		[ColumnEnum("FROM_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromTime = 5,
		/// <summary>
		/// ToTime : 
		/// </summary>
		[EnumTextValue("TO_TIME")]
		[ColumnEnum("TO_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToTime = 6,
		/// <summary>
		/// ExceptionDate : 
		/// </summary>
		[EnumTextValue("Exception_Date")]
		[ColumnEnum("Exception_Date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExceptionDate = 7,
		/// <summary>
		/// CancleFlg : 
		/// </summary>
		[EnumTextValue("Cancle_FLG")]
		[ColumnEnum("Cancle_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CancleFlg = 8,
		/// <summary>
		/// OldDateChanged : 
		/// </summary>
		[EnumTextValue("OLD_Date_Changed")]
		[ColumnEnum("OLD_Date_Changed", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		OldDateChanged = 9
	}//End enum

	#endregion ScScheduleDtlDayExceptionColumn Enum

} // end namespace
