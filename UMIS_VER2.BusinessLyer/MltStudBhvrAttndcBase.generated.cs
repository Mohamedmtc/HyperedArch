
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MltStudBhvrAttndc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MLT_STUD_BHVR_ATTNDC' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MltStudBhvrAttndcBase : EntityBase, IMltStudBhvrAttndc, IEntityId<MltStudBhvrAttndcKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MltStudBhvrAttndcEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MltStudBhvrAttndcEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MltStudBhvrAttndcEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MltStudBhvrAttndc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MltStudBhvrAttndcEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MltStudBhvrAttndcEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MltStudBhvrAttndcBase"/> instance.
		///</summary>
		public MltStudBhvrAttndcBase()
		{
			this.entityData = new MltStudBhvrAttndcEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MltStudBhvrAttndcBase"/> instance.
		///</summary>
		///<param name="_mltStudBhvrAttndcId">متابعة خصم درجات سلوك ومواظبة طالب</param>
		///<param name="_edStudSemesterId">مسلسل السجل الدراسي للطالب</param>
		///<param name="_bhvrAttndcFlg">مؤشر سلوك او مواظبة 1/2</param>
		///<param name="_mltLvlBhvrAttndcId">درجات السلوك والمواظبة لكل فصل مستوى</param>
		///<param name="_noDays">عدد الايام</param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_deductMark">خصم من درجة</param>
		///<param name="_mltCdeBhvrAttndcRltdId">سبب  الخصم من السلوك والمواظبة</param>
		///<param name="_deductDate">تاريخ الخصم</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudViolId"></param>
		///<param name="_edStudAbsenceId"></param>
		///<param name="_mdiStudClnqId">بيانات طلب عيادة</param>
		///<param name="_mdiStudHosptlId">بيانات دخول مستشفى</param>
		public MltStudBhvrAttndcBase(System.Decimal _mltStudBhvrAttndcId, System.Decimal _edStudSemesterId, 
			System.Decimal? _bhvrAttndcFlg, System.Decimal _mltLvlBhvrAttndcId, System.Decimal? _noDays, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal? _deductMark, 
			System.Decimal? _mltCdeBhvrAttndcRltdId, System.DateTime? _deductDate, System.String _notes, 
			System.Decimal? _gsCodePassFailId, System.Decimal? _edStudViolId, System.Decimal? _edStudAbsenceId, 
			System.Decimal? _mdiStudClnqId, System.Decimal? _mdiStudHosptlId)
		{
			this.entityData = new MltStudBhvrAttndcEntityData();
			this.backupData = null;

			this.MltStudBhvrAttndcId = _mltStudBhvrAttndcId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.BhvrAttndcFlg = _bhvrAttndcFlg;
			this.MltLvlBhvrAttndcId = _mltLvlBhvrAttndcId;
			this.NoDays = _noDays;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.DeductMark = _deductMark;
			this.MltCdeBhvrAttndcRltdId = _mltCdeBhvrAttndcRltdId;
			this.DeductDate = _deductDate;
			this.Notes = _notes;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.EdStudViolId = _edStudViolId;
			this.EdStudAbsenceId = _edStudAbsenceId;
			this.MdiStudClnqId = _mdiStudClnqId;
			this.MdiStudHosptlId = _mdiStudHosptlId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MltStudBhvrAttndc"/> instance.
		///</summary>
		///<param name="_mltStudBhvrAttndcId">متابعة خصم درجات سلوك ومواظبة طالب</param>
		///<param name="_edStudSemesterId">مسلسل السجل الدراسي للطالب</param>
		///<param name="_bhvrAttndcFlg">مؤشر سلوك او مواظبة 1/2</param>
		///<param name="_mltLvlBhvrAttndcId">درجات السلوك والمواظبة لكل فصل مستوى</param>
		///<param name="_noDays">عدد الايام</param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_deductMark">خصم من درجة</param>
		///<param name="_mltCdeBhvrAttndcRltdId">سبب  الخصم من السلوك والمواظبة</param>
		///<param name="_deductDate">تاريخ الخصم</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudViolId"></param>
		///<param name="_edStudAbsenceId"></param>
		///<param name="_mdiStudClnqId">بيانات طلب عيادة</param>
		///<param name="_mdiStudHosptlId">بيانات دخول مستشفى</param>
		public static MltStudBhvrAttndc CreateMltStudBhvrAttndc(System.Decimal _mltStudBhvrAttndcId, System.Decimal _edStudSemesterId, 
			System.Decimal? _bhvrAttndcFlg, System.Decimal _mltLvlBhvrAttndcId, System.Decimal? _noDays, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal? _deductMark, 
			System.Decimal? _mltCdeBhvrAttndcRltdId, System.DateTime? _deductDate, System.String _notes, 
			System.Decimal? _gsCodePassFailId, System.Decimal? _edStudViolId, System.Decimal? _edStudAbsenceId, 
			System.Decimal? _mdiStudClnqId, System.Decimal? _mdiStudHosptlId)
		{
			MltStudBhvrAttndc newMltStudBhvrAttndc = new MltStudBhvrAttndc();
			newMltStudBhvrAttndc.MltStudBhvrAttndcId = _mltStudBhvrAttndcId;
			newMltStudBhvrAttndc.EdStudSemesterId = _edStudSemesterId;
			newMltStudBhvrAttndc.BhvrAttndcFlg = _bhvrAttndcFlg;
			newMltStudBhvrAttndc.MltLvlBhvrAttndcId = _mltLvlBhvrAttndcId;
			newMltStudBhvrAttndc.NoDays = _noDays;
			newMltStudBhvrAttndc.FromDate = _fromDate;
			newMltStudBhvrAttndc.ToDate = _toDate;
			newMltStudBhvrAttndc.DeductMark = _deductMark;
			newMltStudBhvrAttndc.MltCdeBhvrAttndcRltdId = _mltCdeBhvrAttndcRltdId;
			newMltStudBhvrAttndc.DeductDate = _deductDate;
			newMltStudBhvrAttndc.Notes = _notes;
			newMltStudBhvrAttndc.GsCodePassFailId = _gsCodePassFailId;
			newMltStudBhvrAttndc.EdStudViolId = _edStudViolId;
			newMltStudBhvrAttndc.EdStudAbsenceId = _edStudAbsenceId;
			newMltStudBhvrAttndc.MdiStudClnqId = _mdiStudClnqId;
			newMltStudBhvrAttndc.MdiStudHosptlId = _mdiStudHosptlId;
			return newMltStudBhvrAttndc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MltStudBhvrAttndcId property. 
		///		متابعة خصم درجات سلوك ومواظبة طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"متابعة خصم درجات سلوك ومواظبة طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal MltStudBhvrAttndcId
		{
			get
			{
				return this.entityData.MltStudBhvrAttndcId; 
			}
			
			set
			{
				if (this.entityData.MltStudBhvrAttndcId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.MltStudBhvrAttndcId, this.entityData.MltStudBhvrAttndcId);
				this.entityData.MltStudBhvrAttndcId = value;
				this.EntityId.MltStudBhvrAttndcId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.MltStudBhvrAttndcId, this.entityData.MltStudBhvrAttndcId);
				OnPropertyChanged("MltStudBhvrAttndcId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MLT_STUD_BHVR_ATTNDC_ID property.
		///		متابعة خصم درجات سلوك ومواظبة طالب
		/// </summary>
		/// <remarks>This is the original value of the MLT_STUD_BHVR_ATTNDC_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalMltStudBhvrAttndcId
		{
			get { return this.entityData.OriginalMltStudBhvrAttndcId; }
			set { this.entityData.OriginalMltStudBhvrAttndcId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		مسلسل السجل الدراسي للطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل السجل الدراسي للطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BhvrAttndcFlg property. 
		///		مؤشر سلوك او مواظبة 1/2
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBhvrAttndcFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر سلوك او مواظبة 1/2"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BhvrAttndcFlg
		{
			get
			{
				return this.entityData.BhvrAttndcFlg; 
			}
			
			set
			{
				if (this.entityData.BhvrAttndcFlg == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.BhvrAttndcFlg, this.entityData.BhvrAttndcFlg);
				this.entityData.BhvrAttndcFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.BhvrAttndcFlg, this.entityData.BhvrAttndcFlg);
				OnPropertyChanged("BhvrAttndcFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MltLvlBhvrAttndcId property. 
		///		درجات السلوك والمواظبة لكل فصل مستوى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"درجات السلوك والمواظبة لكل فصل مستوى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MltLvlBhvrAttndcId
		{
			get
			{
				return this.entityData.MltLvlBhvrAttndcId; 
			}
			
			set
			{
				if (this.entityData.MltLvlBhvrAttndcId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.MltLvlBhvrAttndcId, this.entityData.MltLvlBhvrAttndcId);
				this.entityData.MltLvlBhvrAttndcId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.MltLvlBhvrAttndcId, this.entityData.MltLvlBhvrAttndcId);
				OnPropertyChanged("MltLvlBhvrAttndcId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoDays property. 
		///		عدد الايام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNoDaysNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد الايام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NoDays
		{
			get
			{
				return this.entityData.NoDays; 
			}
			
			set
			{
				if (this.entityData.NoDays == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.NoDays, this.entityData.NoDays);
				this.entityData.NoDays = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.NoDays, this.entityData.NoDays);
				OnPropertyChanged("NoDays");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeductMark property. 
		///		خصم من درجة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDeductMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"خصم من درجة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DeductMark
		{
			get
			{
				return this.entityData.DeductMark; 
			}
			
			set
			{
				if (this.entityData.DeductMark == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.DeductMark, this.entityData.DeductMark);
				this.entityData.DeductMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.DeductMark, this.entityData.DeductMark);
				OnPropertyChanged("DeductMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MltCdeBhvrAttndcRltdId property. 
		///		سبب  الخصم من السلوك والمواظبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMltCdeBhvrAttndcRltdIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"سبب  الخصم من السلوك والمواظبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MltCdeBhvrAttndcRltdId
		{
			get
			{
				return this.entityData.MltCdeBhvrAttndcRltdId; 
			}
			
			set
			{
				if (this.entityData.MltCdeBhvrAttndcRltdId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.MltCdeBhvrAttndcRltdId, this.entityData.MltCdeBhvrAttndcRltdId);
				this.entityData.MltCdeBhvrAttndcRltdId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.MltCdeBhvrAttndcRltdId, this.entityData.MltCdeBhvrAttndcRltdId);
				OnPropertyChanged("MltCdeBhvrAttndcRltdId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeductDate property. 
		///		تاريخ الخصم
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDeductDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الخصم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeductDate
		{
			get
			{
				return this.entityData.DeductDate; 
			}
			
			set
			{
				if (this.entityData.DeductDate == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.DeductDate, this.entityData.DeductDate);
				this.entityData.DeductDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.DeductDate, this.entityData.DeductDate);
				OnPropertyChanged("DeductDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudViolId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudViolIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudViolId
		{
			get
			{
				return this.entityData.EdStudViolId; 
			}
			
			set
			{
				if (this.entityData.EdStudViolId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.EdStudViolId, this.entityData.EdStudViolId);
				this.entityData.EdStudViolId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.EdStudViolId, this.entityData.EdStudViolId);
				OnPropertyChanged("EdStudViolId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudAbsenceId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudAbsenceIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudAbsenceId
		{
			get
			{
				return this.entityData.EdStudAbsenceId; 
			}
			
			set
			{
				if (this.entityData.EdStudAbsenceId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.EdStudAbsenceId, this.entityData.EdStudAbsenceId);
				this.entityData.EdStudAbsenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.EdStudAbsenceId, this.entityData.EdStudAbsenceId);
				OnPropertyChanged("EdStudAbsenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MdiStudClnqId property. 
		///		بيانات طلب عيادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMdiStudClnqIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"بيانات طلب عيادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MdiStudClnqId
		{
			get
			{
				return this.entityData.MdiStudClnqId; 
			}
			
			set
			{
				if (this.entityData.MdiStudClnqId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.MdiStudClnqId, this.entityData.MdiStudClnqId);
				this.entityData.MdiStudClnqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.MdiStudClnqId, this.entityData.MdiStudClnqId);
				OnPropertyChanged("MdiStudClnqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MdiStudHosptlId property. 
		///		بيانات دخول مستشفى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMdiStudHosptlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"بيانات دخول مستشفى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MdiStudHosptlId
		{
			get
			{
				return this.entityData.MdiStudHosptlId; 
			}
			
			set
			{
				if (this.entityData.MdiStudHosptlId == value)
					return;
					
				OnColumnChanging(MltStudBhvrAttndcColumn.MdiStudHosptlId, this.entityData.MdiStudHosptlId);
				this.entityData.MdiStudHosptlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltStudBhvrAttndcColumn.MdiStudHosptlId, this.entityData.MdiStudHosptlId);
				OnPropertyChanged("MdiStudHosptlId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStudAbsence"/>.
		/// </summary>
		/// <value>The source EdStudAbsence for EdStudAbsenceId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudAbsence EdStudAbsenceIdSource
      	{
            get { return entityData.EdStudAbsenceIdSource; }
            set { entityData.EdStudAbsenceIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudViol"/>.
		/// </summary>
		/// <value>The source EdStudViol for EdStudViolId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudViol EdStudViolIdSource
      	{
            get { return entityData.EdStudViolIdSource; }
            set { entityData.EdStudViolIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MdiStudClnq"/>.
		/// </summary>
		/// <value>The source MdiStudClnq for MdiStudClnqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MdiStudClnq MdiStudClnqIdSource
      	{
            get { return entityData.MdiStudClnqIdSource; }
            set { entityData.MdiStudClnqIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MdiStudHosptl"/>.
		/// </summary>
		/// <value>The source MdiStudHosptl for MdiStudHosptlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MdiStudHosptl MdiStudHosptlIdSource
      	{
            get { return entityData.MdiStudHosptlIdSource; }
            set { entityData.MdiStudHosptlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MltCdeBhvrAttndcRltd"/>.
		/// </summary>
		/// <value>The source MltCdeBhvrAttndcRltd for MltCdeBhvrAttndcRltdId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MltCdeBhvrAttndcRltd MltCdeBhvrAttndcRltdIdSource
      	{
            get { return entityData.MltCdeBhvrAttndcRltdIdSource; }
            set { entityData.MltCdeBhvrAttndcRltdIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MltLvlBhvrAttndc"/>.
		/// </summary>
		/// <value>The source MltLvlBhvrAttndc for MltLvlBhvrAttndcId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MltLvlBhvrAttndc MltLvlBhvrAttndcIdSource
      	{
            get { return entityData.MltLvlBhvrAttndcIdSource; }
            set { entityData.MltLvlBhvrAttndcIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 400));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MLT_STUD_BHVR_ATTNDC"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MLT_STUD_BHVR_ATTNDC_ID", "ED_STUD_SEMESTER_ID", "BHVR_ATTNDC_FLG", "MLT_LVL_BHVR_ATTNDC_ID", "NO_DAYS", "FROM_DATE", "TO_DATE", "DEDUCT_MARK", "MLT_CDE_BHVR_ATTNDC_RLTD_ID", "DEDUCT_DATE", "NOTES", "GS_CODE_PASS_FAIL_ID", "ED_STUD_VIOL_ID", "ED_STUD_ABSENCE_ID", "MDI_STUD_CLNQ_ID", "MDI_STUD_HOSPTL_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MltStudBhvrAttndcEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MltStudBhvrAttndc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MltStudBhvrAttndc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MltStudBhvrAttndc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MltStudBhvrAttndc Entity 
		///</summary>
		protected virtual MltStudBhvrAttndc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MltStudBhvrAttndc copy = new MltStudBhvrAttndc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MltStudBhvrAttndcId = this.MltStudBhvrAttndcId;
					copy.OriginalMltStudBhvrAttndcId = this.OriginalMltStudBhvrAttndcId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.BhvrAttndcFlg = this.BhvrAttndcFlg;
				copy.MltLvlBhvrAttndcId = this.MltLvlBhvrAttndcId;
				copy.NoDays = this.NoDays;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.DeductMark = this.DeductMark;
				copy.MltCdeBhvrAttndcRltdId = this.MltCdeBhvrAttndcRltdId;
				copy.DeductDate = this.DeductDate;
				copy.Notes = this.Notes;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.EdStudViolId = this.EdStudViolId;
				copy.EdStudAbsenceId = this.EdStudAbsenceId;
				copy.MdiStudClnqId = this.MdiStudClnqId;
				copy.MdiStudHosptlId = this.MdiStudHosptlId;
			
			if (this.EdStudAbsenceIdSource != null && existingCopies.Contains(this.EdStudAbsenceIdSource))
				copy.EdStudAbsenceIdSource = existingCopies[this.EdStudAbsenceIdSource] as EdStudAbsence;
			else
				copy.EdStudAbsenceIdSource = MakeCopyOf(this.EdStudAbsenceIdSource, existingCopies) as EdStudAbsence;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EdStudViolIdSource != null && existingCopies.Contains(this.EdStudViolIdSource))
				copy.EdStudViolIdSource = existingCopies[this.EdStudViolIdSource] as EdStudViol;
			else
				copy.EdStudViolIdSource = MakeCopyOf(this.EdStudViolIdSource, existingCopies) as EdStudViol;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.MdiStudClnqIdSource != null && existingCopies.Contains(this.MdiStudClnqIdSource))
				copy.MdiStudClnqIdSource = existingCopies[this.MdiStudClnqIdSource] as MdiStudClnq;
			else
				copy.MdiStudClnqIdSource = MakeCopyOf(this.MdiStudClnqIdSource, existingCopies) as MdiStudClnq;
			if (this.MdiStudHosptlIdSource != null && existingCopies.Contains(this.MdiStudHosptlIdSource))
				copy.MdiStudHosptlIdSource = existingCopies[this.MdiStudHosptlIdSource] as MdiStudHosptl;
			else
				copy.MdiStudHosptlIdSource = MakeCopyOf(this.MdiStudHosptlIdSource, existingCopies) as MdiStudHosptl;
			if (this.MltCdeBhvrAttndcRltdIdSource != null && existingCopies.Contains(this.MltCdeBhvrAttndcRltdIdSource))
				copy.MltCdeBhvrAttndcRltdIdSource = existingCopies[this.MltCdeBhvrAttndcRltdIdSource] as MltCdeBhvrAttndcRltd;
			else
				copy.MltCdeBhvrAttndcRltdIdSource = MakeCopyOf(this.MltCdeBhvrAttndcRltdIdSource, existingCopies) as MltCdeBhvrAttndcRltd;
			if (this.MltLvlBhvrAttndcIdSource != null && existingCopies.Contains(this.MltLvlBhvrAttndcIdSource))
				copy.MltLvlBhvrAttndcIdSource = existingCopies[this.MltLvlBhvrAttndcIdSource] as MltLvlBhvrAttndc;
			else
				copy.MltLvlBhvrAttndcIdSource = MakeCopyOf(this.MltLvlBhvrAttndcIdSource, existingCopies) as MltLvlBhvrAttndc;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MltStudBhvrAttndc Entity 
		///</summary>
		public virtual MltStudBhvrAttndc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MltStudBhvrAttndc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MltStudBhvrAttndc DeepCopy()
		{
			return EntityHelper.Clone<MltStudBhvrAttndc>(this as MltStudBhvrAttndc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MltStudBhvrAttndcEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MltStudBhvrAttndcEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MltStudBhvrAttndcEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MltStudBhvrAttndcColumn column)
		{
			switch(column)
			{
					case MltStudBhvrAttndcColumn.MltStudBhvrAttndcId:
					return entityData.MltStudBhvrAttndcId != _originalData.MltStudBhvrAttndcId;
					case MltStudBhvrAttndcColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case MltStudBhvrAttndcColumn.BhvrAttndcFlg:
					return entityData.BhvrAttndcFlg != _originalData.BhvrAttndcFlg;
					case MltStudBhvrAttndcColumn.MltLvlBhvrAttndcId:
					return entityData.MltLvlBhvrAttndcId != _originalData.MltLvlBhvrAttndcId;
					case MltStudBhvrAttndcColumn.NoDays:
					return entityData.NoDays != _originalData.NoDays;
					case MltStudBhvrAttndcColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case MltStudBhvrAttndcColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case MltStudBhvrAttndcColumn.DeductMark:
					return entityData.DeductMark != _originalData.DeductMark;
					case MltStudBhvrAttndcColumn.MltCdeBhvrAttndcRltdId:
					return entityData.MltCdeBhvrAttndcRltdId != _originalData.MltCdeBhvrAttndcRltdId;
					case MltStudBhvrAttndcColumn.DeductDate:
					return entityData.DeductDate != _originalData.DeductDate;
					case MltStudBhvrAttndcColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case MltStudBhvrAttndcColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case MltStudBhvrAttndcColumn.EdStudViolId:
					return entityData.EdStudViolId != _originalData.EdStudViolId;
					case MltStudBhvrAttndcColumn.EdStudAbsenceId:
					return entityData.EdStudAbsenceId != _originalData.EdStudAbsenceId;
					case MltStudBhvrAttndcColumn.MdiStudClnqId:
					return entityData.MdiStudClnqId != _originalData.MdiStudClnqId;
					case MltStudBhvrAttndcColumn.MdiStudHosptlId:
					return entityData.MdiStudHosptlId != _originalData.MdiStudHosptlId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MltStudBhvrAttndcColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MltStudBhvrAttndcId != _originalData.MltStudBhvrAttndcId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.BhvrAttndcFlg != _originalData.BhvrAttndcFlg;
			result = result || entityData.MltLvlBhvrAttndcId != _originalData.MltLvlBhvrAttndcId;
			result = result || entityData.NoDays != _originalData.NoDays;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.DeductMark != _originalData.DeductMark;
			result = result || entityData.MltCdeBhvrAttndcRltdId != _originalData.MltCdeBhvrAttndcRltdId;
			result = result || entityData.DeductDate != _originalData.DeductDate;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.EdStudViolId != _originalData.EdStudViolId;
			result = result || entityData.EdStudAbsenceId != _originalData.EdStudAbsenceId;
			result = result || entityData.MdiStudClnqId != _originalData.MdiStudClnqId;
			result = result || entityData.MdiStudHosptlId != _originalData.MdiStudHosptlId;
			return result;
		}	
		
		///<summary>
		///  Returns a MltStudBhvrAttndc Entity with the original data.
		///</summary>
		public MltStudBhvrAttndc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMltStudBhvrAttndc(
				_originalData.MltStudBhvrAttndcId,
				_originalData.EdStudSemesterId,
				_originalData.BhvrAttndcFlg,
				_originalData.MltLvlBhvrAttndcId,
				_originalData.NoDays,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.DeductMark,
				_originalData.MltCdeBhvrAttndcRltdId,
				_originalData.DeductDate,
				_originalData.Notes,
				_originalData.GsCodePassFailId,
				_originalData.EdStudViolId,
				_originalData.EdStudAbsenceId,
				_originalData.MdiStudClnqId,
				_originalData.MdiStudHosptlId
				);
				
			return (MltStudBhvrAttndc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MltStudBhvrAttndcBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MltStudBhvrAttndcBase)
				return ValueEquals(this, (MltStudBhvrAttndcBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MltStudBhvrAttndcBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MltStudBhvrAttndcId.GetHashCode() ^ 
					this.EdStudSemesterId.GetHashCode() ^ 
					((this.BhvrAttndcFlg == null) ? string.Empty : this.BhvrAttndcFlg.ToString()).GetHashCode() ^ 
					this.MltLvlBhvrAttndcId.GetHashCode() ^ 
					((this.NoDays == null) ? string.Empty : this.NoDays.ToString()).GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					((this.DeductMark == null) ? string.Empty : this.DeductMark.ToString()).GetHashCode() ^ 
					((this.MltCdeBhvrAttndcRltdId == null) ? string.Empty : this.MltCdeBhvrAttndcRltdId.ToString()).GetHashCode() ^ 
					((this.DeductDate == null) ? string.Empty : this.DeductDate.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString()).GetHashCode() ^ 
					((this.EdStudViolId == null) ? string.Empty : this.EdStudViolId.ToString()).GetHashCode() ^ 
					((this.EdStudAbsenceId == null) ? string.Empty : this.EdStudAbsenceId.ToString()).GetHashCode() ^ 
					((this.MdiStudClnqId == null) ? string.Empty : this.MdiStudClnqId.ToString()).GetHashCode() ^ 
					((this.MdiStudHosptlId == null) ? string.Empty : this.MdiStudHosptlId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MltStudBhvrAttndcBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MltStudBhvrAttndcBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MltStudBhvrAttndcBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MltStudBhvrAttndcBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MltStudBhvrAttndcBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MltStudBhvrAttndcBase Object1, MltStudBhvrAttndcBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MltStudBhvrAttndcId != Object2.MltStudBhvrAttndcId)
				equal = false;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if ( Object1.BhvrAttndcFlg != null && Object2.BhvrAttndcFlg != null )
			{
				if (Object1.BhvrAttndcFlg != Object2.BhvrAttndcFlg)
					equal = false;
			}
			else if (Object1.BhvrAttndcFlg == null ^ Object2.BhvrAttndcFlg == null )
			{
				equal = false;
			}
			if (Object1.MltLvlBhvrAttndcId != Object2.MltLvlBhvrAttndcId)
				equal = false;
			if ( Object1.NoDays != null && Object2.NoDays != null )
			{
				if (Object1.NoDays != Object2.NoDays)
					equal = false;
			}
			else if (Object1.NoDays == null ^ Object2.NoDays == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.DeductMark != null && Object2.DeductMark != null )
			{
				if (Object1.DeductMark != Object2.DeductMark)
					equal = false;
			}
			else if (Object1.DeductMark == null ^ Object2.DeductMark == null )
			{
				equal = false;
			}
			if ( Object1.MltCdeBhvrAttndcRltdId != null && Object2.MltCdeBhvrAttndcRltdId != null )
			{
				if (Object1.MltCdeBhvrAttndcRltdId != Object2.MltCdeBhvrAttndcRltdId)
					equal = false;
			}
			else if (Object1.MltCdeBhvrAttndcRltdId == null ^ Object2.MltCdeBhvrAttndcRltdId == null )
			{
				equal = false;
			}
			if ( Object1.DeductDate != null && Object2.DeductDate != null )
			{
				if (Object1.DeductDate != Object2.DeductDate)
					equal = false;
			}
			else if (Object1.DeductDate == null ^ Object2.DeductDate == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailId != null && Object2.GsCodePassFailId != null )
			{
				if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
					equal = false;
			}
			else if (Object1.GsCodePassFailId == null ^ Object2.GsCodePassFailId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudViolId != null && Object2.EdStudViolId != null )
			{
				if (Object1.EdStudViolId != Object2.EdStudViolId)
					equal = false;
			}
			else if (Object1.EdStudViolId == null ^ Object2.EdStudViolId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudAbsenceId != null && Object2.EdStudAbsenceId != null )
			{
				if (Object1.EdStudAbsenceId != Object2.EdStudAbsenceId)
					equal = false;
			}
			else if (Object1.EdStudAbsenceId == null ^ Object2.EdStudAbsenceId == null )
			{
				equal = false;
			}
			if ( Object1.MdiStudClnqId != null && Object2.MdiStudClnqId != null )
			{
				if (Object1.MdiStudClnqId != Object2.MdiStudClnqId)
					equal = false;
			}
			else if (Object1.MdiStudClnqId == null ^ Object2.MdiStudClnqId == null )
			{
				equal = false;
			}
			if ( Object1.MdiStudHosptlId != null && Object2.MdiStudHosptlId != null )
			{
				if (Object1.MdiStudHosptlId != Object2.MdiStudHosptlId)
					equal = false;
			}
			else if (Object1.MdiStudHosptlId == null ^ Object2.MdiStudHosptlId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MltStudBhvrAttndcBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MltStudBhvrAttndcComparer GetComparer()
        {
            return new MltStudBhvrAttndcComparer();
        }
        */

        // Comparer delegates back to MltStudBhvrAttndc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MltStudBhvrAttndc rhs, MltStudBhvrAttndcColumn which)
        {
            switch (which)
            {
            	
            	
            	case MltStudBhvrAttndcColumn.MltStudBhvrAttndcId:
            		return this.MltStudBhvrAttndcId.CompareTo(rhs.MltStudBhvrAttndcId);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.BhvrAttndcFlg:
            		return this.BhvrAttndcFlg.Value.CompareTo(rhs.BhvrAttndcFlg.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.MltLvlBhvrAttndcId:
            		return this.MltLvlBhvrAttndcId.CompareTo(rhs.MltLvlBhvrAttndcId);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.NoDays:
            		return this.NoDays.Value.CompareTo(rhs.NoDays.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.DeductMark:
            		return this.DeductMark.Value.CompareTo(rhs.DeductMark.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.MltCdeBhvrAttndcRltdId:
            		return this.MltCdeBhvrAttndcRltdId.Value.CompareTo(rhs.MltCdeBhvrAttndcRltdId.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.DeductDate:
            		return this.DeductDate.Value.CompareTo(rhs.DeductDate.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.Value.CompareTo(rhs.GsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.EdStudViolId:
            		return this.EdStudViolId.Value.CompareTo(rhs.EdStudViolId.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.EdStudAbsenceId:
            		return this.EdStudAbsenceId.Value.CompareTo(rhs.EdStudAbsenceId.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.MdiStudClnqId:
            		return this.MdiStudClnqId.Value.CompareTo(rhs.MdiStudClnqId.Value);
            		
            		                 
            	
            	
            	case MltStudBhvrAttndcColumn.MdiStudHosptlId:
            		return this.MdiStudHosptlId.Value.CompareTo(rhs.MdiStudHosptlId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MltStudBhvrAttndcKey> Members
		
		// member variable for the EntityId property
		private MltStudBhvrAttndcKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MltStudBhvrAttndcKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MltStudBhvrAttndcKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MltStudBhvrAttndc")
					.Append("|").Append( this.MltStudBhvrAttndcId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- MltStudBhvrAttndcId: {0}{16}- EdStudSemesterId: {1}{16}- BhvrAttndcFlg: {2}{16}- MltLvlBhvrAttndcId: {3}{16}- NoDays: {4}{16}- FromDate: {5}{16}- ToDate: {6}{16}- DeductMark: {7}{16}- MltCdeBhvrAttndcRltdId: {8}{16}- DeductDate: {9}{16}- Notes: {10}{16}- GsCodePassFailId: {11}{16}- EdStudViolId: {12}{16}- EdStudAbsenceId: {13}{16}- MdiStudClnqId: {14}{16}- MdiStudHosptlId: {15}{16}{18}", 
				this.MltStudBhvrAttndcId,
				this.EdStudSemesterId,
				(this.BhvrAttndcFlg == null) ? string.Empty : this.BhvrAttndcFlg.ToString(),
				this.MltLvlBhvrAttndcId,
				(this.NoDays == null) ? string.Empty : this.NoDays.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.DeductMark == null) ? string.Empty : this.DeductMark.ToString(),
				(this.MltCdeBhvrAttndcRltdId == null) ? string.Empty : this.MltCdeBhvrAttndcRltdId.ToString(),
				(this.DeductDate == null) ? string.Empty : this.DeductDate.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString(),
				(this.EdStudViolId == null) ? string.Empty : this.EdStudViolId.ToString(),
				(this.EdStudAbsenceId == null) ? string.Empty : this.EdStudAbsenceId.ToString(),
				(this.MdiStudClnqId == null) ? string.Empty : this.MdiStudClnqId.ToString(),
				(this.MdiStudHosptlId == null) ? string.Empty : this.MdiStudHosptlId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MLT_STUD_BHVR_ATTNDC' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MltStudBhvrAttndcEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MLT_STUD_BHVR_ATTNDC_ID : متابعة خصم درجات سلوك ومواظبة طالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MLT_STUD_BHVR_ATTNDC"</remarks>
		public System.Decimal MltStudBhvrAttndcId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalMltStudBhvrAttndcId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : مسلسل السجل الدراسي للطالب
		/// </summary>
		public System.Decimal		  EdStudSemesterId = 0.0m;
		
		/// <summary>
		/// BHVR_ATTNDC_FLG : مؤشر سلوك او مواظبة 1/2
		/// </summary>
		public System.Decimal?		  BhvrAttndcFlg = null;
		
		/// <summary>
		/// MLT_LVL_BHVR_ATTNDC_ID : درجات السلوك والمواظبة لكل فصل مستوى
		/// </summary>
		public System.Decimal		  MltLvlBhvrAttndcId = 0.0m;
		
		/// <summary>
		/// NO_DAYS : عدد الايام
		/// </summary>
		public System.Decimal?		  NoDays = null;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// DEDUCT_MARK : خصم من درجة
		/// </summary>
		public System.Decimal?		  DeductMark = null;
		
		/// <summary>
		/// MLT_CDE_BHVR_ATTNDC_RLTD_ID : سبب  الخصم من السلوك والمواظبة
		/// </summary>
		public System.Decimal?		  MltCdeBhvrAttndcRltdId = null;
		
		/// <summary>
		/// DEDUCT_DATE : تاريخ الخصم
		/// </summary>
		public System.DateTime?		  DeductDate = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePassFailId = null;
		
		/// <summary>
		/// ED_STUD_VIOL_ID : 
		/// </summary>
		public System.Decimal?		  EdStudViolId = null;
		
		/// <summary>
		/// ED_STUD_ABSENCE_ID : 
		/// </summary>
		public System.Decimal?		  EdStudAbsenceId = null;
		
		/// <summary>
		/// MDI_STUD_CLNQ_ID : بيانات طلب عيادة
		/// </summary>
		public System.Decimal?		  MdiStudClnqId = null;
		
		/// <summary>
		/// MDI_STUD_HOSPTL_ID : بيانات دخول مستشفى
		/// </summary>
		public System.Decimal?		  MdiStudHosptlId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStudAbsence _edStudAbsenceIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudAbsence"/>.
		/// </summary>
		/// <value>The source EdStudAbsence for EdStudAbsenceId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudAbsence EdStudAbsenceIdSource
      	{
            get { return this._edStudAbsenceIdSource; }
            set { this._edStudAbsenceIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private EdStudViol _edStudViolIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudViol"/>.
		/// </summary>
		/// <value>The source EdStudViol for EdStudViolId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudViol EdStudViolIdSource
      	{
            get { return this._edStudViolIdSource; }
            set { this._edStudViolIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		private MdiStudClnq _mdiStudClnqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MdiStudClnq"/>.
		/// </summary>
		/// <value>The source MdiStudClnq for MdiStudClnqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MdiStudClnq MdiStudClnqIdSource
      	{
            get { return this._mdiStudClnqIdSource; }
            set { this._mdiStudClnqIdSource = value; }
      	}
		private MdiStudHosptl _mdiStudHosptlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MdiStudHosptl"/>.
		/// </summary>
		/// <value>The source MdiStudHosptl for MdiStudHosptlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MdiStudHosptl MdiStudHosptlIdSource
      	{
            get { return this._mdiStudHosptlIdSource; }
            set { this._mdiStudHosptlIdSource = value; }
      	}
		private MltCdeBhvrAttndcRltd _mltCdeBhvrAttndcRltdIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MltCdeBhvrAttndcRltd"/>.
		/// </summary>
		/// <value>The source MltCdeBhvrAttndcRltd for MltCdeBhvrAttndcRltdId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MltCdeBhvrAttndcRltd MltCdeBhvrAttndcRltdIdSource
      	{
            get { return this._mltCdeBhvrAttndcRltdIdSource; }
            set { this._mltCdeBhvrAttndcRltdIdSource = value; }
      	}
		private MltLvlBhvrAttndc _mltLvlBhvrAttndcIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MltLvlBhvrAttndc"/>.
		/// </summary>
		/// <value>The source MltLvlBhvrAttndc for MltLvlBhvrAttndcId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MltLvlBhvrAttndc MltLvlBhvrAttndcIdSource
      	{
            get { return this._mltLvlBhvrAttndcIdSource; }
            set { this._mltLvlBhvrAttndcIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MltStudBhvrAttndcEntityData _tmp = new MltStudBhvrAttndcEntityData();
						
			_tmp.MltStudBhvrAttndcId = this.MltStudBhvrAttndcId;
			_tmp.OriginalMltStudBhvrAttndcId = this.OriginalMltStudBhvrAttndcId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.BhvrAttndcFlg = this.BhvrAttndcFlg;
			_tmp.MltLvlBhvrAttndcId = this.MltLvlBhvrAttndcId;
			_tmp.NoDays = this.NoDays;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DeductMark = this.DeductMark;
			_tmp.MltCdeBhvrAttndcRltdId = this.MltCdeBhvrAttndcRltdId;
			_tmp.DeductDate = this.DeductDate;
			_tmp.Notes = this.Notes;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudViolId = this.EdStudViolId;
			_tmp.EdStudAbsenceId = this.EdStudAbsenceId;
			_tmp.MdiStudClnqId = this.MdiStudClnqId;
			_tmp.MdiStudHosptlId = this.MdiStudHosptlId;
			
			#region Source Parent Composite Entities
			if (this.EdStudAbsenceIdSource != null)
				_tmp.EdStudAbsenceIdSource = MakeCopyOf(this.EdStudAbsenceIdSource) as EdStudAbsence;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.EdStudViolIdSource != null)
				_tmp.EdStudViolIdSource = MakeCopyOf(this.EdStudViolIdSource) as EdStudViol;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			if (this.MdiStudClnqIdSource != null)
				_tmp.MdiStudClnqIdSource = MakeCopyOf(this.MdiStudClnqIdSource) as MdiStudClnq;
			if (this.MdiStudHosptlIdSource != null)
				_tmp.MdiStudHosptlIdSource = MakeCopyOf(this.MdiStudHosptlIdSource) as MdiStudHosptl;
			if (this.MltCdeBhvrAttndcRltdIdSource != null)
				_tmp.MltCdeBhvrAttndcRltdIdSource = MakeCopyOf(this.MltCdeBhvrAttndcRltdIdSource) as MltCdeBhvrAttndcRltd;
			if (this.MltLvlBhvrAttndcIdSource != null)
				_tmp.MltLvlBhvrAttndcIdSource = MakeCopyOf(this.MltLvlBhvrAttndcIdSource) as MltLvlBhvrAttndc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MltStudBhvrAttndcEntityData _tmp = new MltStudBhvrAttndcEntityData();
						
			_tmp.MltStudBhvrAttndcId = this.MltStudBhvrAttndcId;
			_tmp.OriginalMltStudBhvrAttndcId = this.OriginalMltStudBhvrAttndcId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.BhvrAttndcFlg = this.BhvrAttndcFlg;
			_tmp.MltLvlBhvrAttndcId = this.MltLvlBhvrAttndcId;
			_tmp.NoDays = this.NoDays;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DeductMark = this.DeductMark;
			_tmp.MltCdeBhvrAttndcRltdId = this.MltCdeBhvrAttndcRltdId;
			_tmp.DeductDate = this.DeductDate;
			_tmp.Notes = this.Notes;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudViolId = this.EdStudViolId;
			_tmp.EdStudAbsenceId = this.EdStudAbsenceId;
			_tmp.MdiStudClnqId = this.MdiStudClnqId;
			_tmp.MdiStudHosptlId = this.MdiStudHosptlId;
			
			#region Source Parent Composite Entities
			if (this.EdStudAbsenceIdSource != null && existingCopies.Contains(this.EdStudAbsenceIdSource))
				_tmp.EdStudAbsenceIdSource = existingCopies[this.EdStudAbsenceIdSource] as EdStudAbsence;
			else
				_tmp.EdStudAbsenceIdSource = MakeCopyOf(this.EdStudAbsenceIdSource, existingCopies) as EdStudAbsence;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EdStudViolIdSource != null && existingCopies.Contains(this.EdStudViolIdSource))
				_tmp.EdStudViolIdSource = existingCopies[this.EdStudViolIdSource] as EdStudViol;
			else
				_tmp.EdStudViolIdSource = MakeCopyOf(this.EdStudViolIdSource, existingCopies) as EdStudViol;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.MdiStudClnqIdSource != null && existingCopies.Contains(this.MdiStudClnqIdSource))
				_tmp.MdiStudClnqIdSource = existingCopies[this.MdiStudClnqIdSource] as MdiStudClnq;
			else
				_tmp.MdiStudClnqIdSource = MakeCopyOf(this.MdiStudClnqIdSource, existingCopies) as MdiStudClnq;
			if (this.MdiStudHosptlIdSource != null && existingCopies.Contains(this.MdiStudHosptlIdSource))
				_tmp.MdiStudHosptlIdSource = existingCopies[this.MdiStudHosptlIdSource] as MdiStudHosptl;
			else
				_tmp.MdiStudHosptlIdSource = MakeCopyOf(this.MdiStudHosptlIdSource, existingCopies) as MdiStudHosptl;
			if (this.MltCdeBhvrAttndcRltdIdSource != null && existingCopies.Contains(this.MltCdeBhvrAttndcRltdIdSource))
				_tmp.MltCdeBhvrAttndcRltdIdSource = existingCopies[this.MltCdeBhvrAttndcRltdIdSource] as MltCdeBhvrAttndcRltd;
			else
				_tmp.MltCdeBhvrAttndcRltdIdSource = MakeCopyOf(this.MltCdeBhvrAttndcRltdIdSource, existingCopies) as MltCdeBhvrAttndcRltd;
			if (this.MltLvlBhvrAttndcIdSource != null && existingCopies.Contains(this.MltLvlBhvrAttndcIdSource))
				_tmp.MltLvlBhvrAttndcIdSource = existingCopies[this.MltLvlBhvrAttndcIdSource] as MltLvlBhvrAttndc;
			else
				_tmp.MltLvlBhvrAttndcIdSource = MakeCopyOf(this.MltLvlBhvrAttndcIdSource, existingCopies) as MltLvlBhvrAttndc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltStudBhvrAttndcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MltStudBhvrAttndcColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltStudBhvrAttndcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MltStudBhvrAttndcColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltStudBhvrAttndcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MltStudBhvrAttndcColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MltStudBhvrAttndcEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MltStudBhvrAttndcEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltStudBhvrAttndcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MltStudBhvrAttndcColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MltStudBhvrAttndcEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MltStudBhvrAttndcEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MltStudBhvrAttndcEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MltStudBhvrAttndc"/> object.
	/// </remarks>
	public class MltStudBhvrAttndcEventArgs : System.EventArgs
	{
		private MltStudBhvrAttndcColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MltStudBhvrAttndcEventArgs class.
		///</summary>
		public MltStudBhvrAttndcEventArgs(MltStudBhvrAttndcColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MltStudBhvrAttndcEventArgs class.
		///</summary>
		public MltStudBhvrAttndcEventArgs(MltStudBhvrAttndcColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MltStudBhvrAttndcColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MltStudBhvrAttndcColumn" />
		public MltStudBhvrAttndcColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MltStudBhvrAttndc related events.
	///</summary>
	public delegate void MltStudBhvrAttndcEventHandler(object sender, MltStudBhvrAttndcEventArgs e);
	
	#region MltStudBhvrAttndcComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MltStudBhvrAttndcComparer : System.Collections.Generic.IComparer<MltStudBhvrAttndc>
	{
		MltStudBhvrAttndcColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MltStudBhvrAttndcComparer"/> class.
        /// </summary>
		public MltStudBhvrAttndcComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MltStudBhvrAttndcComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MltStudBhvrAttndcComparer(MltStudBhvrAttndcColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MltStudBhvrAttndc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MltStudBhvrAttndc"/> to compare.</param>
        /// <param name="b">The second <c>MltStudBhvrAttndc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MltStudBhvrAttndc a, MltStudBhvrAttndc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MltStudBhvrAttndc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MltStudBhvrAttndc a, MltStudBhvrAttndc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MltStudBhvrAttndcColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MltStudBhvrAttndcKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MltStudBhvrAttndc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MltStudBhvrAttndcKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcKey class.
		/// </summary>
		public MltStudBhvrAttndcKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcKey class.
		/// </summary>
		public MltStudBhvrAttndcKey(MltStudBhvrAttndcBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MltStudBhvrAttndcId = entity.MltStudBhvrAttndcId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MltStudBhvrAttndcKey class.
		/// </summary>
		public MltStudBhvrAttndcKey(System.Decimal _mltStudBhvrAttndcId)
		{
			#region Init Properties

			this.MltStudBhvrAttndcId = _mltStudBhvrAttndcId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MltStudBhvrAttndcBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MltStudBhvrAttndcBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MltStudBhvrAttndcId property
		private System.Decimal _mltStudBhvrAttndcId;
		
		/// <summary>
		/// Gets or sets the MltStudBhvrAttndcId property.
		/// </summary>
		public System.Decimal MltStudBhvrAttndcId
		{
			get { return _mltStudBhvrAttndcId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MltStudBhvrAttndcId = value;
				
				_mltStudBhvrAttndcId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MltStudBhvrAttndcId = ( values["MltStudBhvrAttndcId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["MltStudBhvrAttndcId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MltStudBhvrAttndcId", MltStudBhvrAttndcId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MltStudBhvrAttndcId: {0}{1}",
								MltStudBhvrAttndcId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MltStudBhvrAttndcColumn Enum
	
	/// <summary>
	/// Enumerate the MltStudBhvrAttndc columns.
	/// </summary>
	[Serializable]
	public enum MltStudBhvrAttndcColumn : int
	{
		/// <summary>
		/// MltStudBhvrAttndcId : متابعة خصم درجات سلوك ومواظبة طالب
		/// </summary>
		[EnumTextValue("MLT_STUD_BHVR_ATTNDC_ID")]
		[ColumnEnum("MLT_STUD_BHVR_ATTNDC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		MltStudBhvrAttndcId = 1,
		/// <summary>
		/// EdStudSemesterId : مسلسل السجل الدراسي للطالب
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudSemesterId = 2,
		/// <summary>
		/// BhvrAttndcFlg : مؤشر سلوك او مواظبة 1/2
		/// </summary>
		[EnumTextValue("BHVR_ATTNDC_FLG")]
		[ColumnEnum("BHVR_ATTNDC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BhvrAttndcFlg = 3,
		/// <summary>
		/// MltLvlBhvrAttndcId : درجات السلوك والمواظبة لكل فصل مستوى
		/// </summary>
		[EnumTextValue("MLT_LVL_BHVR_ATTNDC_ID")]
		[ColumnEnum("MLT_LVL_BHVR_ATTNDC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MltLvlBhvrAttndcId = 4,
		/// <summary>
		/// NoDays : عدد الايام
		/// </summary>
		[EnumTextValue("NO_DAYS")]
		[ColumnEnum("NO_DAYS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NoDays = 5,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 6,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 7,
		/// <summary>
		/// DeductMark : خصم من درجة
		/// </summary>
		[EnumTextValue("DEDUCT_MARK")]
		[ColumnEnum("DEDUCT_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DeductMark = 8,
		/// <summary>
		/// MltCdeBhvrAttndcRltdId : سبب  الخصم من السلوك والمواظبة
		/// </summary>
		[EnumTextValue("MLT_CDE_BHVR_ATTNDC_RLTD_ID")]
		[ColumnEnum("MLT_CDE_BHVR_ATTNDC_RLTD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MltCdeBhvrAttndcRltdId = 9,
		/// <summary>
		/// DeductDate : تاريخ الخصم
		/// </summary>
		[EnumTextValue("DEDUCT_DATE")]
		[ColumnEnum("DEDUCT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeductDate = 10,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		Notes = 11,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailId = 12,
		/// <summary>
		/// EdStudViolId : 
		/// </summary>
		[EnumTextValue("ED_STUD_VIOL_ID")]
		[ColumnEnum("ED_STUD_VIOL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudViolId = 13,
		/// <summary>
		/// EdStudAbsenceId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ABSENCE_ID")]
		[ColumnEnum("ED_STUD_ABSENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudAbsenceId = 14,
		/// <summary>
		/// MdiStudClnqId : بيانات طلب عيادة
		/// </summary>
		[EnumTextValue("MDI_STUD_CLNQ_ID")]
		[ColumnEnum("MDI_STUD_CLNQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MdiStudClnqId = 15,
		/// <summary>
		/// MdiStudHosptlId : بيانات دخول مستشفى
		/// </summary>
		[EnumTextValue("MDI_STUD_HOSPTL_ID")]
		[ColumnEnum("MDI_STUD_HOSPTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MdiStudHosptlId = 16
	}//End enum

	#endregion MltStudBhvrAttndcColumn Enum

} // end namespace
