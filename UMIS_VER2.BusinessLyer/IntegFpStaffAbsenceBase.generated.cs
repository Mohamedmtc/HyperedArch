
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IntegFpStaffAbsence.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'INTEG_FP_STAFF_ABSENCE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IntegFpStaffAbsenceBase : EntityBase, IIntegFpStaffAbsence, IEntityId<IntegFpStaffAbsenceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IntegFpStaffAbsenceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IntegFpStaffAbsenceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IntegFpStaffAbsenceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IntegFpStaffAbsence> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegFpStaffAbsenceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegFpStaffAbsenceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IntegFpStaffAbsenceBase"/> instance.
		///</summary>
		public IntegFpStaffAbsenceBase()
		{
			this.entityData = new IntegFpStaffAbsenceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IntegFpStaffAbsenceBase"/> instance.
		///</summary>
		///<param name="_dayDate"></param>
		///<param name="_startFrom"></param>
		///<param name="_endTo"></param>
		///<param name="_courseCode"></param>
		///<param name="_lecturerId"></param>
		///<param name="_lecturerName"></param>
		///<param name="_checkIn"></param>
		///<param name="_checkout"></param>
		///<param name="_absence"></param>
		///<param name="_hallcode"></param>
		public IntegFpStaffAbsenceBase(System.DateTime? _dayDate, System.DateTime? _startFrom, 
			System.DateTime? _endTo, System.String _courseCode, System.String _lecturerId, 
			System.String _lecturerName, System.DateTime? _checkIn, System.DateTime? _checkout, 
			System.DateTime? _absence, System.String _hallcode)
		{
			this.entityData = new IntegFpStaffAbsenceEntityData();
			this.backupData = null;

			this.DayDate = _dayDate;
			this.StartFrom = _startFrom;
			this.EndTo = _endTo;
			this.CourseCode = _courseCode;
			this.LecturerId = _lecturerId;
			this.LecturerName = _lecturerName;
			this.CheckIn = _checkIn;
			this.Checkout = _checkout;
			this.Absence = _absence;
			this.Hallcode = _hallcode;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IntegFpStaffAbsence"/> instance.
		///</summary>
		///<param name="_dayDate"></param>
		///<param name="_startFrom"></param>
		///<param name="_endTo"></param>
		///<param name="_courseCode"></param>
		///<param name="_lecturerId"></param>
		///<param name="_lecturerName"></param>
		///<param name="_checkIn"></param>
		///<param name="_checkout"></param>
		///<param name="_absence"></param>
		///<param name="_hallcode"></param>
		public static IntegFpStaffAbsence CreateIntegFpStaffAbsence(System.DateTime? _dayDate, System.DateTime? _startFrom, 
			System.DateTime? _endTo, System.String _courseCode, System.String _lecturerId, 
			System.String _lecturerName, System.DateTime? _checkIn, System.DateTime? _checkout, 
			System.DateTime? _absence, System.String _hallcode)
		{
			IntegFpStaffAbsence newIntegFpStaffAbsence = new IntegFpStaffAbsence();
			newIntegFpStaffAbsence.DayDate = _dayDate;
			newIntegFpStaffAbsence.StartFrom = _startFrom;
			newIntegFpStaffAbsence.EndTo = _endTo;
			newIntegFpStaffAbsence.CourseCode = _courseCode;
			newIntegFpStaffAbsence.LecturerId = _lecturerId;
			newIntegFpStaffAbsence.LecturerName = _lecturerName;
			newIntegFpStaffAbsence.CheckIn = _checkIn;
			newIntegFpStaffAbsence.Checkout = _checkout;
			newIntegFpStaffAbsence.Absence = _absence;
			newIntegFpStaffAbsence.Hallcode = _hallcode;
			return newIntegFpStaffAbsence;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DayDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDayDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DayDate
		{
			get
			{
				return this.entityData.DayDate; 
			}
			
			set
			{
				if (this.entityData.DayDate == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.DayDate, this.entityData.DayDate);
				this.entityData.DayDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.DayDate, this.entityData.DayDate);
				OnPropertyChanged("DayDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartFrom
		{
			get
			{
				return this.entityData.StartFrom; 
			}
			
			set
			{
				if (this.entityData.StartFrom == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.StartFrom, this.entityData.StartFrom);
				this.entityData.StartFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.StartFrom, this.entityData.StartFrom);
				OnPropertyChanged("StartFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndTo
		{
			get
			{
				return this.entityData.EndTo; 
			}
			
			set
			{
				if (this.entityData.EndTo == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.EndTo, this.entityData.EndTo);
				this.entityData.EndTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.EndTo, this.entityData.EndTo);
				OnPropertyChanged("EndTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CourseCode
		{
			get
			{
				return this.entityData.CourseCode; 
			}
			
			set
			{
				if (this.entityData.CourseCode == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.CourseCode, this.entityData.CourseCode);
				this.entityData.CourseCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.CourseCode, this.entityData.CourseCode);
				OnPropertyChanged("CourseCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LecturerId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LecturerId
		{
			get
			{
				return this.entityData.LecturerId; 
			}
			
			set
			{
				if (this.entityData.LecturerId == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.LecturerId, this.entityData.LecturerId);
				this.entityData.LecturerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.LecturerId, this.entityData.LecturerId);
				OnPropertyChanged("LecturerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LecturerName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String LecturerName
		{
			get
			{
				return this.entityData.LecturerName; 
			}
			
			set
			{
				if (this.entityData.LecturerName == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.LecturerName, this.entityData.LecturerName);
				this.entityData.LecturerName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.LecturerName, this.entityData.LecturerName);
				OnPropertyChanged("LecturerName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckIn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCheckInNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CheckIn
		{
			get
			{
				return this.entityData.CheckIn; 
			}
			
			set
			{
				if (this.entityData.CheckIn == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.CheckIn, this.entityData.CheckIn);
				this.entityData.CheckIn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.CheckIn, this.entityData.CheckIn);
				OnPropertyChanged("CheckIn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Checkout property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCheckoutNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Checkout
		{
			get
			{
				return this.entityData.Checkout; 
			}
			
			set
			{
				if (this.entityData.Checkout == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.Checkout, this.entityData.Checkout);
				this.entityData.Checkout = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.Checkout, this.entityData.Checkout);
				OnPropertyChanged("Checkout");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Absence property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAbsenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Absence
		{
			get
			{
				return this.entityData.Absence; 
			}
			
			set
			{
				if (this.entityData.Absence == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.Absence, this.entityData.Absence);
				this.entityData.Absence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.Absence, this.entityData.Absence);
				OnPropertyChanged("Absence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IntegFpStaffAbsenceId property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal IntegFpStaffAbsenceId
		{
			get
			{
				return this.entityData.IntegFpStaffAbsenceId; 
			}
			
			set
			{
				if (this.entityData.IntegFpStaffAbsenceId == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.IntegFpStaffAbsenceId, this.entityData.IntegFpStaffAbsenceId);
				this.entityData.IntegFpStaffAbsenceId = value;
				this.EntityId.IntegFpStaffAbsenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.IntegFpStaffAbsenceId, this.entityData.IntegFpStaffAbsenceId);
				OnPropertyChanged("IntegFpStaffAbsenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Hallcode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Hallcode
		{
			get
			{
				return this.entityData.Hallcode; 
			}
			
			set
			{
				if (this.entityData.Hallcode == value)
					return;
					
				OnColumnChanging(IntegFpStaffAbsenceColumn.Hallcode, this.entityData.Hallcode);
				this.entityData.Hallcode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegFpStaffAbsenceColumn.Hallcode, this.entityData.Hallcode);
				OnPropertyChanged("Hallcode");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of IntegFpStaffAbsenceDtl objects
		///	which are related to this object through the relation FK_INTEG_FP_STAFF_ABSENCE_DTL_INTEG_FP_STAFF_ABSENCE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<IntegFpStaffAbsenceDtl> IntegFpStaffAbsenceDtlCollection
		{
			get { return entityData.IntegFpStaffAbsenceDtlCollection; }
			set { entityData.IntegFpStaffAbsenceDtlCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CourseCode", "Course Code", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LecturerId", "Lecturer Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LecturerName", "Lecturer Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Hallcode", "Hallcode", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "INTEG_FP_STAFF_ABSENCE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DAY_DATE", "start_from", "end_to", "course_code", "lecturer_id", "lecturer_name", "check_in", "checkout", "absence", "INTEG_FP_STAFF_ABSENCE_ID", "hallcode"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IntegFpStaffAbsenceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IntegFpStaffAbsence) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IntegFpStaffAbsence>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IntegFpStaffAbsence);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IntegFpStaffAbsence Entity 
		///</summary>
		protected virtual IntegFpStaffAbsence Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IntegFpStaffAbsence copy = new IntegFpStaffAbsence();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DayDate = this.DayDate;
				copy.StartFrom = this.StartFrom;
				copy.EndTo = this.EndTo;
				copy.CourseCode = this.CourseCode;
				copy.LecturerId = this.LecturerId;
				copy.LecturerName = this.LecturerName;
				copy.CheckIn = this.CheckIn;
				copy.Checkout = this.Checkout;
				copy.Absence = this.Absence;
				copy.IntegFpStaffAbsenceId = this.IntegFpStaffAbsenceId;
				copy.Hallcode = this.Hallcode;
			
		
			//deep copy nested objects
			copy.IntegFpStaffAbsenceDtlCollection = (TList<IntegFpStaffAbsenceDtl>) MakeCopyOf(this.IntegFpStaffAbsenceDtlCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IntegFpStaffAbsence Entity 
		///</summary>
		public virtual IntegFpStaffAbsence Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IntegFpStaffAbsence Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IntegFpStaffAbsence DeepCopy()
		{
			return EntityHelper.Clone<IntegFpStaffAbsence>(this as IntegFpStaffAbsence);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IntegFpStaffAbsenceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IntegFpStaffAbsenceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IntegFpStaffAbsenceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IntegFpStaffAbsenceColumn column)
		{
			switch(column)
			{
					case IntegFpStaffAbsenceColumn.DayDate:
					return entityData.DayDate != _originalData.DayDate;
					case IntegFpStaffAbsenceColumn.StartFrom:
					return entityData.StartFrom != _originalData.StartFrom;
					case IntegFpStaffAbsenceColumn.EndTo:
					return entityData.EndTo != _originalData.EndTo;
					case IntegFpStaffAbsenceColumn.CourseCode:
					return entityData.CourseCode != _originalData.CourseCode;
					case IntegFpStaffAbsenceColumn.LecturerId:
					return entityData.LecturerId != _originalData.LecturerId;
					case IntegFpStaffAbsenceColumn.LecturerName:
					return entityData.LecturerName != _originalData.LecturerName;
					case IntegFpStaffAbsenceColumn.CheckIn:
					return entityData.CheckIn != _originalData.CheckIn;
					case IntegFpStaffAbsenceColumn.Checkout:
					return entityData.Checkout != _originalData.Checkout;
					case IntegFpStaffAbsenceColumn.Absence:
					return entityData.Absence != _originalData.Absence;
					case IntegFpStaffAbsenceColumn.IntegFpStaffAbsenceId:
					return entityData.IntegFpStaffAbsenceId != _originalData.IntegFpStaffAbsenceId;
					case IntegFpStaffAbsenceColumn.Hallcode:
					return entityData.Hallcode != _originalData.Hallcode;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IntegFpStaffAbsenceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DayDate != _originalData.DayDate;
			result = result || entityData.StartFrom != _originalData.StartFrom;
			result = result || entityData.EndTo != _originalData.EndTo;
			result = result || entityData.CourseCode != _originalData.CourseCode;
			result = result || entityData.LecturerId != _originalData.LecturerId;
			result = result || entityData.LecturerName != _originalData.LecturerName;
			result = result || entityData.CheckIn != _originalData.CheckIn;
			result = result || entityData.Checkout != _originalData.Checkout;
			result = result || entityData.Absence != _originalData.Absence;
			result = result || entityData.IntegFpStaffAbsenceId != _originalData.IntegFpStaffAbsenceId;
			result = result || entityData.Hallcode != _originalData.Hallcode;
			return result;
		}	
		
		///<summary>
		///  Returns a IntegFpStaffAbsence Entity with the original data.
		///</summary>
		public IntegFpStaffAbsence GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIntegFpStaffAbsence(
				_originalData.DayDate,
				_originalData.StartFrom,
				_originalData.EndTo,
				_originalData.CourseCode,
				_originalData.LecturerId,
				_originalData.LecturerName,
				_originalData.CheckIn,
				_originalData.Checkout,
				_originalData.Absence,
				_originalData.Hallcode
				);
				
			return (IntegFpStaffAbsence)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IntegFpStaffAbsenceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IntegFpStaffAbsenceBase)
				return ValueEquals(this, (IntegFpStaffAbsenceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IntegFpStaffAbsenceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return ((this.DayDate == null) ? string.Empty : this.DayDate.ToString()).GetHashCode() ^ 
					((this.StartFrom == null) ? string.Empty : this.StartFrom.ToString()).GetHashCode() ^ 
					((this.EndTo == null) ? string.Empty : this.EndTo.ToString()).GetHashCode() ^ 
					((this.CourseCode == null) ? string.Empty : this.CourseCode.ToString()).GetHashCode() ^ 
					((this.LecturerId == null) ? string.Empty : this.LecturerId.ToString()).GetHashCode() ^ 
					((this.LecturerName == null) ? string.Empty : this.LecturerName.ToString()).GetHashCode() ^ 
					((this.CheckIn == null) ? string.Empty : this.CheckIn.ToString()).GetHashCode() ^ 
					((this.Checkout == null) ? string.Empty : this.Checkout.ToString()).GetHashCode() ^ 
					((this.Absence == null) ? string.Empty : this.Absence.ToString()).GetHashCode() ^ 
					this.IntegFpStaffAbsenceId.GetHashCode() ^ 
					((this.Hallcode == null) ? string.Empty : this.Hallcode.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IntegFpStaffAbsenceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IntegFpStaffAbsenceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IntegFpStaffAbsenceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IntegFpStaffAbsenceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IntegFpStaffAbsenceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IntegFpStaffAbsenceBase Object1, IntegFpStaffAbsenceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if ( Object1.DayDate != null && Object2.DayDate != null )
			{
				if (Object1.DayDate != Object2.DayDate)
					equal = false;
			}
			else if (Object1.DayDate == null ^ Object2.DayDate == null )
			{
				equal = false;
			}
			if ( Object1.StartFrom != null && Object2.StartFrom != null )
			{
				if (Object1.StartFrom != Object2.StartFrom)
					equal = false;
			}
			else if (Object1.StartFrom == null ^ Object2.StartFrom == null )
			{
				equal = false;
			}
			if ( Object1.EndTo != null && Object2.EndTo != null )
			{
				if (Object1.EndTo != Object2.EndTo)
					equal = false;
			}
			else if (Object1.EndTo == null ^ Object2.EndTo == null )
			{
				equal = false;
			}
			if ( Object1.CourseCode != null && Object2.CourseCode != null )
			{
				if (Object1.CourseCode != Object2.CourseCode)
					equal = false;
			}
			else if (Object1.CourseCode == null ^ Object2.CourseCode == null )
			{
				equal = false;
			}
			if ( Object1.LecturerId != null && Object2.LecturerId != null )
			{
				if (Object1.LecturerId != Object2.LecturerId)
					equal = false;
			}
			else if (Object1.LecturerId == null ^ Object2.LecturerId == null )
			{
				equal = false;
			}
			if ( Object1.LecturerName != null && Object2.LecturerName != null )
			{
				if (Object1.LecturerName != Object2.LecturerName)
					equal = false;
			}
			else if (Object1.LecturerName == null ^ Object2.LecturerName == null )
			{
				equal = false;
			}
			if ( Object1.CheckIn != null && Object2.CheckIn != null )
			{
				if (Object1.CheckIn != Object2.CheckIn)
					equal = false;
			}
			else if (Object1.CheckIn == null ^ Object2.CheckIn == null )
			{
				equal = false;
			}
			if ( Object1.Checkout != null && Object2.Checkout != null )
			{
				if (Object1.Checkout != Object2.Checkout)
					equal = false;
			}
			else if (Object1.Checkout == null ^ Object2.Checkout == null )
			{
				equal = false;
			}
			if ( Object1.Absence != null && Object2.Absence != null )
			{
				if (Object1.Absence != Object2.Absence)
					equal = false;
			}
			else if (Object1.Absence == null ^ Object2.Absence == null )
			{
				equal = false;
			}
			if (Object1.IntegFpStaffAbsenceId != Object2.IntegFpStaffAbsenceId)
				equal = false;
			if ( Object1.Hallcode != null && Object2.Hallcode != null )
			{
				if (Object1.Hallcode != Object2.Hallcode)
					equal = false;
			}
			else if (Object1.Hallcode == null ^ Object2.Hallcode == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IntegFpStaffAbsenceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IntegFpStaffAbsenceComparer GetComparer()
        {
            return new IntegFpStaffAbsenceComparer();
        }
        */

        // Comparer delegates back to IntegFpStaffAbsence
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IntegFpStaffAbsence rhs, IntegFpStaffAbsenceColumn which)
        {
            switch (which)
            {
            	
            	
            	case IntegFpStaffAbsenceColumn.DayDate:
            		return this.DayDate.Value.CompareTo(rhs.DayDate.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.StartFrom:
            		return this.StartFrom.Value.CompareTo(rhs.StartFrom.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.EndTo:
            		return this.EndTo.Value.CompareTo(rhs.EndTo.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.CourseCode:
            		return this.CourseCode.CompareTo(rhs.CourseCode);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.LecturerId:
            		return this.LecturerId.CompareTo(rhs.LecturerId);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.LecturerName:
            		return this.LecturerName.CompareTo(rhs.LecturerName);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.CheckIn:
            		return this.CheckIn.Value.CompareTo(rhs.CheckIn.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.Checkout:
            		return this.Checkout.Value.CompareTo(rhs.Checkout.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.Absence:
            		return this.Absence.Value.CompareTo(rhs.Absence.Value);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.IntegFpStaffAbsenceId:
            		return this.IntegFpStaffAbsenceId.CompareTo(rhs.IntegFpStaffAbsenceId);
            		
            		                 
            	
            	
            	case IntegFpStaffAbsenceColumn.Hallcode:
            		return this.Hallcode.CompareTo(rhs.Hallcode);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IntegFpStaffAbsenceKey> Members
		
		// member variable for the EntityId property
		private IntegFpStaffAbsenceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IntegFpStaffAbsenceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IntegFpStaffAbsenceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IntegFpStaffAbsence")
					.Append("|").Append( this.IntegFpStaffAbsenceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- DayDate: {0}{11}- StartFrom: {1}{11}- EndTo: {2}{11}- CourseCode: {3}{11}- LecturerId: {4}{11}- LecturerName: {5}{11}- CheckIn: {6}{11}- Checkout: {7}{11}- Absence: {8}{11}- IntegFpStaffAbsenceId: {9}{11}- Hallcode: {10}{11}{13}", 
				(this.DayDate == null) ? string.Empty : this.DayDate.ToString(),
				(this.StartFrom == null) ? string.Empty : this.StartFrom.ToString(),
				(this.EndTo == null) ? string.Empty : this.EndTo.ToString(),
				(this.CourseCode == null) ? string.Empty : this.CourseCode.ToString(),
				(this.LecturerId == null) ? string.Empty : this.LecturerId.ToString(),
				(this.LecturerName == null) ? string.Empty : this.LecturerName.ToString(),
				(this.CheckIn == null) ? string.Empty : this.CheckIn.ToString(),
				(this.Checkout == null) ? string.Empty : this.Checkout.ToString(),
				(this.Absence == null) ? string.Empty : this.Absence.ToString(),
				this.IntegFpStaffAbsenceId,
				(this.Hallcode == null) ? string.Empty : this.Hallcode.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'INTEG_FP_STAFF_ABSENCE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IntegFpStaffAbsenceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// INTEG_FP_STAFF_ABSENCE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "INTEG_FP_STAFF_ABSENCE"</remarks>
		public System.Decimal IntegFpStaffAbsenceId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DAY_DATE : 
		/// </summary>
		public System.DateTime?		  DayDate = null;
		
		/// <summary>
		/// start_from : 
		/// </summary>
		public System.DateTime?		  StartFrom = null;
		
		/// <summary>
		/// end_to : 
		/// </summary>
		public System.DateTime?		  EndTo = null;
		
		/// <summary>
		/// course_code : 
		/// </summary>
		public System.String		  CourseCode = null;
		
		/// <summary>
		/// lecturer_id : 
		/// </summary>
		public System.String		  LecturerId = null;
		
		/// <summary>
		/// lecturer_name : 
		/// </summary>
		public System.String		  LecturerName = null;
		
		/// <summary>
		/// check_in : 
		/// </summary>
		public System.DateTime?		  CheckIn = null;
		
		/// <summary>
		/// checkout : 
		/// </summary>
		public System.DateTime?		  Checkout = null;
		
		/// <summary>
		/// absence : 
		/// </summary>
		public System.DateTime?		  Absence = null;
		
		/// <summary>
		/// hallcode : 
		/// </summary>
		public System.String		  Hallcode = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region IntegFpStaffAbsenceDtlCollection
		
		private TList<IntegFpStaffAbsenceDtl> _integFpStaffAbsenceDtlIntegFpStaffAbsenceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _integFpStaffAbsenceDtlIntegFpStaffAbsenceId
		/// </summary>
		
		public TList<IntegFpStaffAbsenceDtl> IntegFpStaffAbsenceDtlCollection
		{
			get
			{
				if (_integFpStaffAbsenceDtlIntegFpStaffAbsenceId == null)
				{
				_integFpStaffAbsenceDtlIntegFpStaffAbsenceId = new TList<IntegFpStaffAbsenceDtl>();
				}
	
				return _integFpStaffAbsenceDtlIntegFpStaffAbsenceId;
			}
			set { _integFpStaffAbsenceDtlIntegFpStaffAbsenceId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IntegFpStaffAbsenceEntityData _tmp = new IntegFpStaffAbsenceEntityData();
						
			_tmp.IntegFpStaffAbsenceId = this.IntegFpStaffAbsenceId;
			
			_tmp.DayDate = this.DayDate;
			_tmp.StartFrom = this.StartFrom;
			_tmp.EndTo = this.EndTo;
			_tmp.CourseCode = this.CourseCode;
			_tmp.LecturerId = this.LecturerId;
			_tmp.LecturerName = this.LecturerName;
			_tmp.CheckIn = this.CheckIn;
			_tmp.Checkout = this.Checkout;
			_tmp.Absence = this.Absence;
			_tmp.Hallcode = this.Hallcode;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._integFpStaffAbsenceDtlIntegFpStaffAbsenceId != null)
				_tmp.IntegFpStaffAbsenceDtlCollection = (TList<IntegFpStaffAbsenceDtl>) MakeCopyOf(this.IntegFpStaffAbsenceDtlCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IntegFpStaffAbsenceEntityData _tmp = new IntegFpStaffAbsenceEntityData();
						
			_tmp.IntegFpStaffAbsenceId = this.IntegFpStaffAbsenceId;
			
			_tmp.DayDate = this.DayDate;
			_tmp.StartFrom = this.StartFrom;
			_tmp.EndTo = this.EndTo;
			_tmp.CourseCode = this.CourseCode;
			_tmp.LecturerId = this.LecturerId;
			_tmp.LecturerName = this.LecturerName;
			_tmp.CheckIn = this.CheckIn;
			_tmp.Checkout = this.Checkout;
			_tmp.Absence = this.Absence;
			_tmp.Hallcode = this.Hallcode;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.IntegFpStaffAbsenceDtlCollection = (TList<IntegFpStaffAbsenceDtl>) MakeCopyOf(this.IntegFpStaffAbsenceDtlCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegFpStaffAbsenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IntegFpStaffAbsenceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegFpStaffAbsenceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IntegFpStaffAbsenceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegFpStaffAbsenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IntegFpStaffAbsenceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IntegFpStaffAbsenceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IntegFpStaffAbsenceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegFpStaffAbsenceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IntegFpStaffAbsenceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IntegFpStaffAbsenceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IntegFpStaffAbsenceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IntegFpStaffAbsenceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IntegFpStaffAbsence"/> object.
	/// </remarks>
	public class IntegFpStaffAbsenceEventArgs : System.EventArgs
	{
		private IntegFpStaffAbsenceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IntegFpStaffAbsenceEventArgs class.
		///</summary>
		public IntegFpStaffAbsenceEventArgs(IntegFpStaffAbsenceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IntegFpStaffAbsenceEventArgs class.
		///</summary>
		public IntegFpStaffAbsenceEventArgs(IntegFpStaffAbsenceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IntegFpStaffAbsenceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IntegFpStaffAbsenceColumn" />
		public IntegFpStaffAbsenceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IntegFpStaffAbsence related events.
	///</summary>
	public delegate void IntegFpStaffAbsenceEventHandler(object sender, IntegFpStaffAbsenceEventArgs e);
	
	#region IntegFpStaffAbsenceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IntegFpStaffAbsenceComparer : System.Collections.Generic.IComparer<IntegFpStaffAbsence>
	{
		IntegFpStaffAbsenceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IntegFpStaffAbsenceComparer"/> class.
        /// </summary>
		public IntegFpStaffAbsenceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IntegFpStaffAbsenceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IntegFpStaffAbsenceComparer(IntegFpStaffAbsenceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IntegFpStaffAbsence"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IntegFpStaffAbsence"/> to compare.</param>
        /// <param name="b">The second <c>IntegFpStaffAbsence</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IntegFpStaffAbsence a, IntegFpStaffAbsence b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IntegFpStaffAbsence entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IntegFpStaffAbsence a, IntegFpStaffAbsence b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IntegFpStaffAbsenceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IntegFpStaffAbsenceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IntegFpStaffAbsence"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IntegFpStaffAbsenceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceKey class.
		/// </summary>
		public IntegFpStaffAbsenceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceKey class.
		/// </summary>
		public IntegFpStaffAbsenceKey(IntegFpStaffAbsenceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IntegFpStaffAbsenceId = entity.IntegFpStaffAbsenceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegFpStaffAbsenceKey class.
		/// </summary>
		public IntegFpStaffAbsenceKey(System.Decimal _integFpStaffAbsenceId)
		{
			#region Init Properties

			this.IntegFpStaffAbsenceId = _integFpStaffAbsenceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IntegFpStaffAbsenceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IntegFpStaffAbsenceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IntegFpStaffAbsenceId property
		private System.Decimal _integFpStaffAbsenceId;
		
		/// <summary>
		/// Gets or sets the IntegFpStaffAbsenceId property.
		/// </summary>
		public System.Decimal IntegFpStaffAbsenceId
		{
			get { return _integFpStaffAbsenceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IntegFpStaffAbsenceId = value;
				
				_integFpStaffAbsenceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IntegFpStaffAbsenceId = ( values["IntegFpStaffAbsenceId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["IntegFpStaffAbsenceId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IntegFpStaffAbsenceId", IntegFpStaffAbsenceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IntegFpStaffAbsenceId: {0}{1}",
								IntegFpStaffAbsenceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IntegFpStaffAbsenceColumn Enum
	
	/// <summary>
	/// Enumerate the IntegFpStaffAbsence columns.
	/// </summary>
	[Serializable]
	public enum IntegFpStaffAbsenceColumn : int
	{
		/// <summary>
		/// DayDate : 
		/// </summary>
		[EnumTextValue("DAY_DATE")]
		[ColumnEnum("DAY_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DayDate = 1,
		/// <summary>
		/// StartFrom : 
		/// </summary>
		[EnumTextValue("start_from")]
		[ColumnEnum("start_from", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartFrom = 2,
		/// <summary>
		/// EndTo : 
		/// </summary>
		[EnumTextValue("end_to")]
		[ColumnEnum("end_to", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndTo = 3,
		/// <summary>
		/// CourseCode : 
		/// </summary>
		[EnumTextValue("course_code")]
		[ColumnEnum("course_code", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CourseCode = 4,
		/// <summary>
		/// LecturerId : 
		/// </summary>
		[EnumTextValue("lecturer_id")]
		[ColumnEnum("lecturer_id", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		LecturerId = 5,
		/// <summary>
		/// LecturerName : 
		/// </summary>
		[EnumTextValue("lecturer_name")]
		[ColumnEnum("lecturer_name", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		LecturerName = 6,
		/// <summary>
		/// CheckIn : 
		/// </summary>
		[EnumTextValue("check_in")]
		[ColumnEnum("check_in", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CheckIn = 7,
		/// <summary>
		/// Checkout : 
		/// </summary>
		[EnumTextValue("checkout")]
		[ColumnEnum("checkout", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Checkout = 8,
		/// <summary>
		/// Absence : 
		/// </summary>
		[EnumTextValue("absence")]
		[ColumnEnum("absence", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Absence = 9,
		/// <summary>
		/// IntegFpStaffAbsenceId : 
		/// </summary>
		[EnumTextValue("INTEG_FP_STAFF_ABSENCE_ID")]
		[ColumnEnum("INTEG_FP_STAFF_ABSENCE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		IntegFpStaffAbsenceId = 10,
		/// <summary>
		/// Hallcode : 
		/// </summary>
		[EnumTextValue("hallcode")]
		[ColumnEnum("hallcode", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Hallcode = 11
	}//End enum

	#endregion IntegFpStaffAbsenceColumn Enum

} // end namespace
