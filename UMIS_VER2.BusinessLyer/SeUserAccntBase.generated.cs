
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SeUserAccnt.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SE_USER_ACCNT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SeUserAccntBase : EntityBase, ISeUserAccnt, IEntityId<SeUserAccntKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SeUserAccntEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SeUserAccntEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SeUserAccntEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SeUserAccnt> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeUserAccntEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeUserAccntEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeUserAccntBase"/> instance.
		///</summary>
		public SeUserAccntBase()
		{
			this.entityData = new SeUserAccntEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SeUserAccntBase"/> instance.
		///</summary>
		///<param name="_seUserAccntId"></param>
		///<param name="_seUserId"></param>
		///<param name="_seAccountId"></param>
		///<param name="_contCreateFlg"></param>
		///<param name="_isActive"></param>
		///<param name="_rcvMailFlg"></param>
		///<param name="_headFlg">تعديل بيانات تاريخية</param>
		///<param name="_availPeriodFromDate"></param>
		///<param name="_availPeriodFromTime"></param>
		///<param name="_availPeriodToDate"></param>
		///<param name="_availPeriodToTime"></param>
		///<param name="_entMainId">جامعة -كلية -قسم</param>
		///<param name="_hasAvailPeriod"></param>
		///<param name="_userTableId">ED_STUD_ID,SA_STAFF_ID</param>
		///<param name="_byforceFlg">حذف ايصالات </param>
		///<param name="_lastDate"></param>
		///<param name="_seUserLstId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_gsCodeGenderId"></param>
		public SeUserAccntBase(System.Decimal _seUserAccntId, System.Decimal _seUserId, 
			System.Decimal _seAccountId, System.Decimal? _contCreateFlg, System.Decimal _isActive, 
			System.Decimal? _rcvMailFlg, System.Decimal? _headFlg, System.DateTime? _availPeriodFromDate, 
			System.DateTime? _availPeriodFromTime, System.DateTime? _availPeriodToDate, System.DateTime? _availPeriodToTime, 
			System.Decimal? _entMainId, System.Decimal? _hasAvailPeriod, System.Decimal? _userTableId, 
			System.Decimal? _byforceFlg, System.DateTime? _lastDate, System.Decimal? _seUserLstId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _gsCodeGenderId)
		{
			this.entityData = new SeUserAccntEntityData();
			this.backupData = null;

			this.SeUserAccntId = _seUserAccntId;
			this.SeUserId = _seUserId;
			this.SeAccountId = _seAccountId;
			this.ContCreateFlg = _contCreateFlg;
			this.IsActive = _isActive;
			this.RcvMailFlg = _rcvMailFlg;
			this.HeadFlg = _headFlg;
			this.AvailPeriodFromDate = _availPeriodFromDate;
			this.AvailPeriodFromTime = _availPeriodFromTime;
			this.AvailPeriodToDate = _availPeriodToDate;
			this.AvailPeriodToTime = _availPeriodToTime;
			this.EntMainId = _entMainId;
			this.HasAvailPeriod = _hasAvailPeriod;
			this.UserTableId = _userTableId;
			this.ByforceFlg = _byforceFlg;
			this.LastDate = _lastDate;
			this.SeUserLstId = _seUserLstId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.GsCodeGenderId = _gsCodeGenderId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SeUserAccnt"/> instance.
		///</summary>
		///<param name="_seUserAccntId"></param>
		///<param name="_seUserId"></param>
		///<param name="_seAccountId"></param>
		///<param name="_contCreateFlg"></param>
		///<param name="_isActive"></param>
		///<param name="_rcvMailFlg"></param>
		///<param name="_headFlg">تعديل بيانات تاريخية</param>
		///<param name="_availPeriodFromDate"></param>
		///<param name="_availPeriodFromTime"></param>
		///<param name="_availPeriodToDate"></param>
		///<param name="_availPeriodToTime"></param>
		///<param name="_entMainId">جامعة -كلية -قسم</param>
		///<param name="_hasAvailPeriod"></param>
		///<param name="_userTableId">ED_STUD_ID,SA_STAFF_ID</param>
		///<param name="_byforceFlg">حذف ايصالات </param>
		///<param name="_lastDate"></param>
		///<param name="_seUserLstId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_gsCodeGenderId"></param>
		public static SeUserAccnt CreateSeUserAccnt(System.Decimal _seUserAccntId, System.Decimal _seUserId, 
			System.Decimal _seAccountId, System.Decimal? _contCreateFlg, System.Decimal _isActive, 
			System.Decimal? _rcvMailFlg, System.Decimal? _headFlg, System.DateTime? _availPeriodFromDate, 
			System.DateTime? _availPeriodFromTime, System.DateTime? _availPeriodToDate, System.DateTime? _availPeriodToTime, 
			System.Decimal? _entMainId, System.Decimal? _hasAvailPeriod, System.Decimal? _userTableId, 
			System.Decimal? _byforceFlg, System.DateTime? _lastDate, System.Decimal? _seUserLstId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _gsCodeGenderId)
		{
			SeUserAccnt newSeUserAccnt = new SeUserAccnt();
			newSeUserAccnt.SeUserAccntId = _seUserAccntId;
			newSeUserAccnt.SeUserId = _seUserId;
			newSeUserAccnt.SeAccountId = _seAccountId;
			newSeUserAccnt.ContCreateFlg = _contCreateFlg;
			newSeUserAccnt.IsActive = _isActive;
			newSeUserAccnt.RcvMailFlg = _rcvMailFlg;
			newSeUserAccnt.HeadFlg = _headFlg;
			newSeUserAccnt.AvailPeriodFromDate = _availPeriodFromDate;
			newSeUserAccnt.AvailPeriodFromTime = _availPeriodFromTime;
			newSeUserAccnt.AvailPeriodToDate = _availPeriodToDate;
			newSeUserAccnt.AvailPeriodToTime = _availPeriodToTime;
			newSeUserAccnt.EntMainId = _entMainId;
			newSeUserAccnt.HasAvailPeriod = _hasAvailPeriod;
			newSeUserAccnt.UserTableId = _userTableId;
			newSeUserAccnt.ByforceFlg = _byforceFlg;
			newSeUserAccnt.LastDate = _lastDate;
			newSeUserAccnt.SeUserLstId = _seUserLstId;
			newSeUserAccnt.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newSeUserAccnt.GsCodeGenderId = _gsCodeGenderId;
			return newSeUserAccnt;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SeUserAccntId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SeUserAccntId
		{
			get
			{
				return this.entityData.SeUserAccntId; 
			}
			
			set
			{
				if (this.entityData.SeUserAccntId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.SeUserAccntId, this.entityData.SeUserAccntId);
				this.entityData.SeUserAccntId = value;
				this.EntityId.SeUserAccntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.SeUserAccntId, this.entityData.SeUserAccntId);
				OnPropertyChanged("SeUserAccntId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SE_USER_ACCNT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SE_USER_ACCNT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSeUserAccntId
		{
			get { return this.entityData.OriginalSeUserAccntId; }
			set { this.entityData.OriginalSeUserAccntId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeAccountId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeAccountId
		{
			get
			{
				return this.entityData.SeAccountId; 
			}
			
			set
			{
				if (this.entityData.SeAccountId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.SeAccountId, this.entityData.SeAccountId);
				this.entityData.SeAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.SeAccountId, this.entityData.SeAccountId);
				OnPropertyChanged("SeAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContCreateFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsContCreateFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ContCreateFlg
		{
			get
			{
				return this.entityData.ContCreateFlg; 
			}
			
			set
			{
				if (this.entityData.ContCreateFlg == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.ContCreateFlg, this.entityData.ContCreateFlg);
				this.entityData.ContCreateFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.ContCreateFlg, this.entityData.ContCreateFlg);
				OnPropertyChanged("ContCreateFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RcvMailFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRcvMailFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RcvMailFlg
		{
			get
			{
				return this.entityData.RcvMailFlg; 
			}
			
			set
			{
				if (this.entityData.RcvMailFlg == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.RcvMailFlg, this.entityData.RcvMailFlg);
				this.entityData.RcvMailFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.RcvMailFlg, this.entityData.RcvMailFlg);
				OnPropertyChanged("RcvMailFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HeadFlg property. 
		///		تعديل بيانات تاريخية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHeadFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تعديل بيانات تاريخية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HeadFlg
		{
			get
			{
				return this.entityData.HeadFlg; 
			}
			
			set
			{
				if (this.entityData.HeadFlg == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.HeadFlg, this.entityData.HeadFlg);
				this.entityData.HeadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.HeadFlg, this.entityData.HeadFlg);
				OnPropertyChanged("HeadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailPeriodFromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAvailPeriodFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AvailPeriodFromDate
		{
			get
			{
				return this.entityData.AvailPeriodFromDate; 
			}
			
			set
			{
				if (this.entityData.AvailPeriodFromDate == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.AvailPeriodFromDate, this.entityData.AvailPeriodFromDate);
				this.entityData.AvailPeriodFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.AvailPeriodFromDate, this.entityData.AvailPeriodFromDate);
				OnPropertyChanged("AvailPeriodFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailPeriodFromTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAvailPeriodFromTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AvailPeriodFromTime
		{
			get
			{
				return this.entityData.AvailPeriodFromTime; 
			}
			
			set
			{
				if (this.entityData.AvailPeriodFromTime == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.AvailPeriodFromTime, this.entityData.AvailPeriodFromTime);
				this.entityData.AvailPeriodFromTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.AvailPeriodFromTime, this.entityData.AvailPeriodFromTime);
				OnPropertyChanged("AvailPeriodFromTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailPeriodToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAvailPeriodToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AvailPeriodToDate
		{
			get
			{
				return this.entityData.AvailPeriodToDate; 
			}
			
			set
			{
				if (this.entityData.AvailPeriodToDate == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.AvailPeriodToDate, this.entityData.AvailPeriodToDate);
				this.entityData.AvailPeriodToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.AvailPeriodToDate, this.entityData.AvailPeriodToDate);
				OnPropertyChanged("AvailPeriodToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailPeriodToTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAvailPeriodToTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AvailPeriodToTime
		{
			get
			{
				return this.entityData.AvailPeriodToTime; 
			}
			
			set
			{
				if (this.entityData.AvailPeriodToTime == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.AvailPeriodToTime, this.entityData.AvailPeriodToTime);
				this.entityData.AvailPeriodToTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.AvailPeriodToTime, this.entityData.AvailPeriodToTime);
				OnPropertyChanged("AvailPeriodToTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		جامعة -كلية -قسم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"جامعة -كلية -قسم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HasAvailPeriod property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHasAvailPeriodNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HasAvailPeriod
		{
			get
			{
				return this.entityData.HasAvailPeriod; 
			}
			
			set
			{
				if (this.entityData.HasAvailPeriod == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.HasAvailPeriod, this.entityData.HasAvailPeriod);
				this.entityData.HasAvailPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.HasAvailPeriod, this.entityData.HasAvailPeriod);
				OnPropertyChanged("HasAvailPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserTableId property. 
		///		ED_STUD_ID,SA_STAFF_ID
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUserTableIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ED_STUD_ID,SA_STAFF_ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UserTableId
		{
			get
			{
				return this.entityData.UserTableId; 
			}
			
			set
			{
				if (this.entityData.UserTableId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.UserTableId, this.entityData.UserTableId);
				this.entityData.UserTableId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.UserTableId, this.entityData.UserTableId);
				OnPropertyChanged("UserTableId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ByforceFlg property. 
		///		حذف ايصالات 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsByforceFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"حذف ايصالات "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ByforceFlg
		{
			get
			{
				return this.entityData.ByforceFlg; 
			}
			
			set
			{
				if (this.entityData.ByforceFlg == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.ByforceFlg, this.entityData.ByforceFlg);
				this.entityData.ByforceFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.ByforceFlg, this.entityData.ByforceFlg);
				OnPropertyChanged("ByforceFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserLstId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserLstIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserLstId
		{
			get
			{
				return this.entityData.SeUserLstId; 
			}
			
			set
			{
				if (this.entityData.SeUserLstId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.SeUserLstId, this.entityData.SeUserLstId);
				this.entityData.SeUserLstId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.SeUserLstId, this.entityData.SeUserLstId);
				OnPropertyChanged("SeUserLstId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeGenderId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeGenderIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeGenderId
		{
			get
			{
				return this.entityData.GsCodeGenderId; 
			}
			
			set
			{
				if (this.entityData.GsCodeGenderId == value)
					return;
					
				OnColumnChanging(SeUserAccntColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				this.entityData.GsCodeGenderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeUserAccntColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				OnPropertyChanged("GsCodeGenderId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SeAccnt"/>.
		/// </summary>
		/// <value>The source SeAccnt for SeAccountId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeAccnt SeAccountIdSource
      	{
            get { return entityData.SeAccountIdSource; }
            set { entityData.SeAccountIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return entityData.GsCodeGenderIdSource; }
            set { entityData.GsCodeGenderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SeUserAccntFormDiff objects
		///	which are related to this object through the relation FK_AUTO_0528
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccntFormDiff> SeUserAccntFormDiffCollection
		{
			get { return entityData.SeUserAccntFormDiffCollection; }
			set { entityData.SeUserAccntFormDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccntControlDiff objects
		///	which are related to this object through the relation FK_SE_USER_ACCNT_CONTROL_DIFF_SE_USER_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccntControlDiff> SeUserAccntControlDiffCollection
		{
			get { return entityData.SeUserAccntControlDiffCollection; }
			set { entityData.SeUserAccntControlDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccntDeg objects
		///	which are related to this object through the relation FK_SE_USER_ACCNT_DEG_SE_USER_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccntDeg> SeUserAccntDegCollection
		{
			get { return entityData.SeUserAccntDegCollection; }
			set { entityData.SeUserAccntDegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvMessage objects
		///	which are related to this object through the relation FK_SV_MESSAGE_SE_USER_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvMessage> SvMessageCollection
		{
			get { return entityData.SvMessageCollection; }
			set { entityData.SvMessageCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvUserMessage objects
		///	which are related to this object through the relation FK_SV_USER_MESSAGE_SE_USER_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvUserMessage> SvUserMessageCollection
		{
			get { return entityData.SvUserMessageCollection; }
			set { entityData.SvUserMessageCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SE_USER_ACCNT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SE_USER_ACCNT_ID", "SE_USER_ID", "SE_ACCOUNT_ID", "CONT_CREATE_FLG", "IS_ACTIVE", "RCV_MAIL_FLG", "HEAD_FLG", "AVAIL_PERIOD_FROM_DATE", "AVAIL_PERIOD_FROM_TIME", "AVAIL_PERIOD_TO_DATE", "AVAIL_PERIOD_TO_TIME", "ENT_MAIN_ID", "HAS_AVAIL_PERIOD", "USER_TABLE_ID", "BYFORCE_FLG", "LAST_DATE", "SE_USER_LST_ID", "AS_CODE_DEGREE_CLASS_ID", "GS_CODE_GENDER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SeUserAccntEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SeUserAccnt) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SeUserAccnt>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SeUserAccnt);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SeUserAccnt Entity 
		///</summary>
		protected virtual SeUserAccnt Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SeUserAccnt copy = new SeUserAccnt();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SeUserAccntId = this.SeUserAccntId;
					copy.OriginalSeUserAccntId = this.OriginalSeUserAccntId;
				copy.SeUserId = this.SeUserId;
				copy.SeAccountId = this.SeAccountId;
				copy.ContCreateFlg = this.ContCreateFlg;
				copy.IsActive = this.IsActive;
				copy.RcvMailFlg = this.RcvMailFlg;
				copy.HeadFlg = this.HeadFlg;
				copy.AvailPeriodFromDate = this.AvailPeriodFromDate;
				copy.AvailPeriodFromTime = this.AvailPeriodFromTime;
				copy.AvailPeriodToDate = this.AvailPeriodToDate;
				copy.AvailPeriodToTime = this.AvailPeriodToTime;
				copy.EntMainId = this.EntMainId;
				copy.HasAvailPeriod = this.HasAvailPeriod;
				copy.UserTableId = this.UserTableId;
				copy.ByforceFlg = this.ByforceFlg;
				copy.LastDate = this.LastDate;
				copy.SeUserLstId = this.SeUserLstId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.GsCodeGenderId = this.GsCodeGenderId;
			
			if (this.SeAccountIdSource != null && existingCopies.Contains(this.SeAccountIdSource))
				copy.SeAccountIdSource = existingCopies[this.SeAccountIdSource] as SeAccnt;
			else
				copy.SeAccountIdSource = MakeCopyOf(this.SeAccountIdSource, existingCopies) as SeAccnt;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				copy.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				copy.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection, existingCopies); 
			copy.SeUserAccntControlDiffCollection = (TList<SeUserAccntControlDiff>) MakeCopyOf(this.SeUserAccntControlDiffCollection, existingCopies); 
			copy.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection, existingCopies); 
			copy.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection, existingCopies); 
			copy.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SeUserAccnt Entity 
		///</summary>
		public virtual SeUserAccnt Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SeUserAccnt Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SeUserAccnt DeepCopy()
		{
			return EntityHelper.Clone<SeUserAccnt>(this as SeUserAccnt);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SeUserAccntEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SeUserAccntEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SeUserAccntEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SeUserAccntColumn column)
		{
			switch(column)
			{
					case SeUserAccntColumn.SeUserAccntId:
					return entityData.SeUserAccntId != _originalData.SeUserAccntId;
					case SeUserAccntColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SeUserAccntColumn.SeAccountId:
					return entityData.SeAccountId != _originalData.SeAccountId;
					case SeUserAccntColumn.ContCreateFlg:
					return entityData.ContCreateFlg != _originalData.ContCreateFlg;
					case SeUserAccntColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case SeUserAccntColumn.RcvMailFlg:
					return entityData.RcvMailFlg != _originalData.RcvMailFlg;
					case SeUserAccntColumn.HeadFlg:
					return entityData.HeadFlg != _originalData.HeadFlg;
					case SeUserAccntColumn.AvailPeriodFromDate:
					return entityData.AvailPeriodFromDate != _originalData.AvailPeriodFromDate;
					case SeUserAccntColumn.AvailPeriodFromTime:
					return entityData.AvailPeriodFromTime != _originalData.AvailPeriodFromTime;
					case SeUserAccntColumn.AvailPeriodToDate:
					return entityData.AvailPeriodToDate != _originalData.AvailPeriodToDate;
					case SeUserAccntColumn.AvailPeriodToTime:
					return entityData.AvailPeriodToTime != _originalData.AvailPeriodToTime;
					case SeUserAccntColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case SeUserAccntColumn.HasAvailPeriod:
					return entityData.HasAvailPeriod != _originalData.HasAvailPeriod;
					case SeUserAccntColumn.UserTableId:
					return entityData.UserTableId != _originalData.UserTableId;
					case SeUserAccntColumn.ByforceFlg:
					return entityData.ByforceFlg != _originalData.ByforceFlg;
					case SeUserAccntColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case SeUserAccntColumn.SeUserLstId:
					return entityData.SeUserLstId != _originalData.SeUserLstId;
					case SeUserAccntColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case SeUserAccntColumn.GsCodeGenderId:
					return entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SeUserAccntColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SeUserAccntId != _originalData.SeUserAccntId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.SeAccountId != _originalData.SeAccountId;
			result = result || entityData.ContCreateFlg != _originalData.ContCreateFlg;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.RcvMailFlg != _originalData.RcvMailFlg;
			result = result || entityData.HeadFlg != _originalData.HeadFlg;
			result = result || entityData.AvailPeriodFromDate != _originalData.AvailPeriodFromDate;
			result = result || entityData.AvailPeriodFromTime != _originalData.AvailPeriodFromTime;
			result = result || entityData.AvailPeriodToDate != _originalData.AvailPeriodToDate;
			result = result || entityData.AvailPeriodToTime != _originalData.AvailPeriodToTime;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.HasAvailPeriod != _originalData.HasAvailPeriod;
			result = result || entityData.UserTableId != _originalData.UserTableId;
			result = result || entityData.ByforceFlg != _originalData.ByforceFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserLstId != _originalData.SeUserLstId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			return result;
		}	
		
		///<summary>
		///  Returns a SeUserAccnt Entity with the original data.
		///</summary>
		public SeUserAccnt GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSeUserAccnt(
				_originalData.SeUserAccntId,
				_originalData.SeUserId,
				_originalData.SeAccountId,
				_originalData.ContCreateFlg,
				_originalData.IsActive,
				_originalData.RcvMailFlg,
				_originalData.HeadFlg,
				_originalData.AvailPeriodFromDate,
				_originalData.AvailPeriodFromTime,
				_originalData.AvailPeriodToDate,
				_originalData.AvailPeriodToTime,
				_originalData.EntMainId,
				_originalData.HasAvailPeriod,
				_originalData.UserTableId,
				_originalData.ByforceFlg,
				_originalData.LastDate,
				_originalData.SeUserLstId,
				_originalData.AsCodeDegreeClassId,
				_originalData.GsCodeGenderId
				);
				
			return (SeUserAccnt)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SeUserAccntBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SeUserAccntBase)
				return ValueEquals(this, (SeUserAccntBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SeUserAccntBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SeUserAccntId.GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					this.SeAccountId.GetHashCode() ^ 
					((this.ContCreateFlg == null) ? string.Empty : this.ContCreateFlg.ToString()).GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					((this.RcvMailFlg == null) ? string.Empty : this.RcvMailFlg.ToString()).GetHashCode() ^ 
					((this.HeadFlg == null) ? string.Empty : this.HeadFlg.ToString()).GetHashCode() ^ 
					((this.AvailPeriodFromDate == null) ? string.Empty : this.AvailPeriodFromDate.ToString()).GetHashCode() ^ 
					((this.AvailPeriodFromTime == null) ? string.Empty : this.AvailPeriodFromTime.ToString()).GetHashCode() ^ 
					((this.AvailPeriodToDate == null) ? string.Empty : this.AvailPeriodToDate.ToString()).GetHashCode() ^ 
					((this.AvailPeriodToTime == null) ? string.Empty : this.AvailPeriodToTime.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.HasAvailPeriod == null) ? string.Empty : this.HasAvailPeriod.ToString()).GetHashCode() ^ 
					((this.UserTableId == null) ? string.Empty : this.UserTableId.ToString()).GetHashCode() ^ 
					((this.ByforceFlg == null) ? string.Empty : this.ByforceFlg.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserLstId == null) ? string.Empty : this.SeUserLstId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeUserAccntBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeUserAccntBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SeUserAccntBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SeUserAccntBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeUserAccntBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SeUserAccntBase Object1, SeUserAccntBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SeUserAccntId != Object2.SeUserAccntId)
				equal = false;
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if (Object1.SeAccountId != Object2.SeAccountId)
				equal = false;
			if ( Object1.ContCreateFlg != null && Object2.ContCreateFlg != null )
			{
				if (Object1.ContCreateFlg != Object2.ContCreateFlg)
					equal = false;
			}
			else if (Object1.ContCreateFlg == null ^ Object2.ContCreateFlg == null )
			{
				equal = false;
			}
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if ( Object1.RcvMailFlg != null && Object2.RcvMailFlg != null )
			{
				if (Object1.RcvMailFlg != Object2.RcvMailFlg)
					equal = false;
			}
			else if (Object1.RcvMailFlg == null ^ Object2.RcvMailFlg == null )
			{
				equal = false;
			}
			if ( Object1.HeadFlg != null && Object2.HeadFlg != null )
			{
				if (Object1.HeadFlg != Object2.HeadFlg)
					equal = false;
			}
			else if (Object1.HeadFlg == null ^ Object2.HeadFlg == null )
			{
				equal = false;
			}
			if ( Object1.AvailPeriodFromDate != null && Object2.AvailPeriodFromDate != null )
			{
				if (Object1.AvailPeriodFromDate != Object2.AvailPeriodFromDate)
					equal = false;
			}
			else if (Object1.AvailPeriodFromDate == null ^ Object2.AvailPeriodFromDate == null )
			{
				equal = false;
			}
			if ( Object1.AvailPeriodFromTime != null && Object2.AvailPeriodFromTime != null )
			{
				if (Object1.AvailPeriodFromTime != Object2.AvailPeriodFromTime)
					equal = false;
			}
			else if (Object1.AvailPeriodFromTime == null ^ Object2.AvailPeriodFromTime == null )
			{
				equal = false;
			}
			if ( Object1.AvailPeriodToDate != null && Object2.AvailPeriodToDate != null )
			{
				if (Object1.AvailPeriodToDate != Object2.AvailPeriodToDate)
					equal = false;
			}
			else if (Object1.AvailPeriodToDate == null ^ Object2.AvailPeriodToDate == null )
			{
				equal = false;
			}
			if ( Object1.AvailPeriodToTime != null && Object2.AvailPeriodToTime != null )
			{
				if (Object1.AvailPeriodToTime != Object2.AvailPeriodToTime)
					equal = false;
			}
			else if (Object1.AvailPeriodToTime == null ^ Object2.AvailPeriodToTime == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.HasAvailPeriod != null && Object2.HasAvailPeriod != null )
			{
				if (Object1.HasAvailPeriod != Object2.HasAvailPeriod)
					equal = false;
			}
			else if (Object1.HasAvailPeriod == null ^ Object2.HasAvailPeriod == null )
			{
				equal = false;
			}
			if ( Object1.UserTableId != null && Object2.UserTableId != null )
			{
				if (Object1.UserTableId != Object2.UserTableId)
					equal = false;
			}
			else if (Object1.UserTableId == null ^ Object2.UserTableId == null )
			{
				equal = false;
			}
			if ( Object1.ByforceFlg != null && Object2.ByforceFlg != null )
			{
				if (Object1.ByforceFlg != Object2.ByforceFlg)
					equal = false;
			}
			else if (Object1.ByforceFlg == null ^ Object2.ByforceFlg == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserLstId != null && Object2.SeUserLstId != null )
			{
				if (Object1.SeUserLstId != Object2.SeUserLstId)
					equal = false;
			}
			else if (Object1.SeUserLstId == null ^ Object2.SeUserLstId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeGenderId != null && Object2.GsCodeGenderId != null )
			{
				if (Object1.GsCodeGenderId != Object2.GsCodeGenderId)
					equal = false;
			}
			else if (Object1.GsCodeGenderId == null ^ Object2.GsCodeGenderId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SeUserAccntBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SeUserAccntComparer GetComparer()
        {
            return new SeUserAccntComparer();
        }
        */

        // Comparer delegates back to SeUserAccnt
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SeUserAccnt rhs, SeUserAccntColumn which)
        {
            switch (which)
            {
            	
            	
            	case SeUserAccntColumn.SeUserAccntId:
            		return this.SeUserAccntId.CompareTo(rhs.SeUserAccntId);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.SeAccountId:
            		return this.SeAccountId.CompareTo(rhs.SeAccountId);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.ContCreateFlg:
            		return this.ContCreateFlg.Value.CompareTo(rhs.ContCreateFlg.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.RcvMailFlg:
            		return this.RcvMailFlg.Value.CompareTo(rhs.RcvMailFlg.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.HeadFlg:
            		return this.HeadFlg.Value.CompareTo(rhs.HeadFlg.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.AvailPeriodFromDate:
            		return this.AvailPeriodFromDate.Value.CompareTo(rhs.AvailPeriodFromDate.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.AvailPeriodFromTime:
            		return this.AvailPeriodFromTime.Value.CompareTo(rhs.AvailPeriodFromTime.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.AvailPeriodToDate:
            		return this.AvailPeriodToDate.Value.CompareTo(rhs.AvailPeriodToDate.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.AvailPeriodToTime:
            		return this.AvailPeriodToTime.Value.CompareTo(rhs.AvailPeriodToTime.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.HasAvailPeriod:
            		return this.HasAvailPeriod.Value.CompareTo(rhs.HasAvailPeriod.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.UserTableId:
            		return this.UserTableId.Value.CompareTo(rhs.UserTableId.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.ByforceFlg:
            		return this.ByforceFlg.Value.CompareTo(rhs.ByforceFlg.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.SeUserLstId:
            		return this.SeUserLstId.Value.CompareTo(rhs.SeUserLstId.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case SeUserAccntColumn.GsCodeGenderId:
            		return this.GsCodeGenderId.Value.CompareTo(rhs.GsCodeGenderId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SeUserAccntKey> Members
		
		// member variable for the EntityId property
		private SeUserAccntKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SeUserAccntKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SeUserAccntKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SeUserAccnt")
					.Append("|").Append( this.SeUserAccntId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- SeUserAccntId: {0}{19}- SeUserId: {1}{19}- SeAccountId: {2}{19}- ContCreateFlg: {3}{19}- IsActive: {4}{19}- RcvMailFlg: {5}{19}- HeadFlg: {6}{19}- AvailPeriodFromDate: {7}{19}- AvailPeriodFromTime: {8}{19}- AvailPeriodToDate: {9}{19}- AvailPeriodToTime: {10}{19}- EntMainId: {11}{19}- HasAvailPeriod: {12}{19}- UserTableId: {13}{19}- ByforceFlg: {14}{19}- LastDate: {15}{19}- SeUserLstId: {16}{19}- AsCodeDegreeClassId: {17}{19}- GsCodeGenderId: {18}{19}{21}", 
				this.SeUserAccntId,
				this.SeUserId,
				this.SeAccountId,
				(this.ContCreateFlg == null) ? string.Empty : this.ContCreateFlg.ToString(),
				this.IsActive,
				(this.RcvMailFlg == null) ? string.Empty : this.RcvMailFlg.ToString(),
				(this.HeadFlg == null) ? string.Empty : this.HeadFlg.ToString(),
				(this.AvailPeriodFromDate == null) ? string.Empty : this.AvailPeriodFromDate.ToString(),
				(this.AvailPeriodFromTime == null) ? string.Empty : this.AvailPeriodFromTime.ToString(),
				(this.AvailPeriodToDate == null) ? string.Empty : this.AvailPeriodToDate.ToString(),
				(this.AvailPeriodToTime == null) ? string.Empty : this.AvailPeriodToTime.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.HasAvailPeriod == null) ? string.Empty : this.HasAvailPeriod.ToString(),
				(this.UserTableId == null) ? string.Empty : this.UserTableId.ToString(),
				(this.ByforceFlg == null) ? string.Empty : this.ByforceFlg.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserLstId == null) ? string.Empty : this.SeUserLstId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SE_USER_ACCNT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SeUserAccntEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SE_USER_ACCNT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SE_USER_ACCNT"</remarks>
		public System.Decimal SeUserAccntId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSeUserAccntId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// SE_ACCOUNT_ID : 
		/// </summary>
		public System.Decimal		  SeAccountId = 0.0m;
		
		/// <summary>
		/// CONT_CREATE_FLG : 
		/// </summary>
		public System.Decimal?		  ContCreateFlg = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// RCV_MAIL_FLG : 
		/// </summary>
		public System.Decimal?		  RcvMailFlg = null;
		
		/// <summary>
		/// HEAD_FLG : تعديل بيانات تاريخية
		/// </summary>
		public System.Decimal?		  HeadFlg = null;
		
		/// <summary>
		/// AVAIL_PERIOD_FROM_DATE : 
		/// </summary>
		public System.DateTime?		  AvailPeriodFromDate = null;
		
		/// <summary>
		/// AVAIL_PERIOD_FROM_TIME : 
		/// </summary>
		public System.DateTime?		  AvailPeriodFromTime = null;
		
		/// <summary>
		/// AVAIL_PERIOD_TO_DATE : 
		/// </summary>
		public System.DateTime?		  AvailPeriodToDate = null;
		
		/// <summary>
		/// AVAIL_PERIOD_TO_TIME : 
		/// </summary>
		public System.DateTime?		  AvailPeriodToTime = null;
		
		/// <summary>
		/// ENT_MAIN_ID : جامعة -كلية -قسم
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// HAS_AVAIL_PERIOD : 
		/// </summary>
		public System.Decimal?		  HasAvailPeriod = null;
		
		/// <summary>
		/// USER_TABLE_ID : ED_STUD_ID,SA_STAFF_ID
		/// </summary>
		public System.Decimal?		  UserTableId = null;
		
		/// <summary>
		/// BYFORCE_FLG : حذف ايصالات 
		/// </summary>
		public System.Decimal?		  ByforceFlg = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_LST_ID : 
		/// </summary>
		public System.Decimal?		  SeUserLstId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// GS_CODE_GENDER_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeGenderId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SeAccnt _seAccountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeAccnt"/>.
		/// </summary>
		/// <value>The source SeAccnt for SeAccountId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeAccnt SeAccountIdSource
      	{
            get { return this._seAccountIdSource; }
            set { this._seAccountIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private GsCodeGender _gsCodeGenderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return this._gsCodeGenderIdSource; }
            set { this._gsCodeGenderIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SeUserAccntFormDiffCollection
		
		private TList<SeUserAccntFormDiff> _seUserAccntFormDiffSeUserAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntFormDiffSeUserAccountId
		/// </summary>
		
		public TList<SeUserAccntFormDiff> SeUserAccntFormDiffCollection
		{
			get
			{
				if (_seUserAccntFormDiffSeUserAccountId == null)
				{
				_seUserAccntFormDiffSeUserAccountId = new TList<SeUserAccntFormDiff>();
				}
	
				return _seUserAccntFormDiffSeUserAccountId;
			}
			set { _seUserAccntFormDiffSeUserAccountId = value; }
		}
		
		#endregion

		#region SeUserAccntControlDiffCollection
		
		private TList<SeUserAccntControlDiff> _seUserAccntControlDiffSeUserAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntControlDiffSeUserAccountId
		/// </summary>
		
		public TList<SeUserAccntControlDiff> SeUserAccntControlDiffCollection
		{
			get
			{
				if (_seUserAccntControlDiffSeUserAccountId == null)
				{
				_seUserAccntControlDiffSeUserAccountId = new TList<SeUserAccntControlDiff>();
				}
	
				return _seUserAccntControlDiffSeUserAccountId;
			}
			set { _seUserAccntControlDiffSeUserAccountId = value; }
		}
		
		#endregion

		#region SeUserAccntDegCollection
		
		private TList<SeUserAccntDeg> _seUserAccntDegSeUserAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntDegSeUserAccntId
		/// </summary>
		
		public TList<SeUserAccntDeg> SeUserAccntDegCollection
		{
			get
			{
				if (_seUserAccntDegSeUserAccntId == null)
				{
				_seUserAccntDegSeUserAccntId = new TList<SeUserAccntDeg>();
				}
	
				return _seUserAccntDegSeUserAccntId;
			}
			set { _seUserAccntDegSeUserAccntId = value; }
		}
		
		#endregion

		#region SvMessageCollection
		
		private TList<SvMessage> _svMessageSeUserAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svMessageSeUserAccntId
		/// </summary>
		
		public TList<SvMessage> SvMessageCollection
		{
			get
			{
				if (_svMessageSeUserAccntId == null)
				{
				_svMessageSeUserAccntId = new TList<SvMessage>();
				}
	
				return _svMessageSeUserAccntId;
			}
			set { _svMessageSeUserAccntId = value; }
		}
		
		#endregion

		#region SvUserMessageCollection
		
		private TList<SvUserMessage> _svUserMessageSeUserAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svUserMessageSeUserAccntId
		/// </summary>
		
		public TList<SvUserMessage> SvUserMessageCollection
		{
			get
			{
				if (_svUserMessageSeUserAccntId == null)
				{
				_svUserMessageSeUserAccntId = new TList<SvUserMessage>();
				}
	
				return _svUserMessageSeUserAccntId;
			}
			set { _svUserMessageSeUserAccntId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SeUserAccntEntityData _tmp = new SeUserAccntEntityData();
						
			_tmp.SeUserAccntId = this.SeUserAccntId;
			_tmp.OriginalSeUserAccntId = this.OriginalSeUserAccntId;
			
			_tmp.SeUserId = this.SeUserId;
			_tmp.SeAccountId = this.SeAccountId;
			_tmp.ContCreateFlg = this.ContCreateFlg;
			_tmp.IsActive = this.IsActive;
			_tmp.RcvMailFlg = this.RcvMailFlg;
			_tmp.HeadFlg = this.HeadFlg;
			_tmp.AvailPeriodFromDate = this.AvailPeriodFromDate;
			_tmp.AvailPeriodFromTime = this.AvailPeriodFromTime;
			_tmp.AvailPeriodToDate = this.AvailPeriodToDate;
			_tmp.AvailPeriodToTime = this.AvailPeriodToTime;
			_tmp.EntMainId = this.EntMainId;
			_tmp.HasAvailPeriod = this.HasAvailPeriod;
			_tmp.UserTableId = this.UserTableId;
			_tmp.ByforceFlg = this.ByforceFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserLstId = this.SeUserLstId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			
			#region Source Parent Composite Entities
			if (this.SeAccountIdSource != null)
				_tmp.SeAccountIdSource = MakeCopyOf(this.SeAccountIdSource) as SeAccnt;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.GsCodeGenderIdSource != null)
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource) as GsCodeGender;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._seUserAccntFormDiffSeUserAccountId != null)
				_tmp.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection); 
			if (this._seUserAccntControlDiffSeUserAccountId != null)
				_tmp.SeUserAccntControlDiffCollection = (TList<SeUserAccntControlDiff>) MakeCopyOf(this.SeUserAccntControlDiffCollection); 
			if (this._seUserAccntDegSeUserAccntId != null)
				_tmp.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection); 
			if (this._svMessageSeUserAccntId != null)
				_tmp.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection); 
			if (this._svUserMessageSeUserAccntId != null)
				_tmp.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SeUserAccntEntityData _tmp = new SeUserAccntEntityData();
						
			_tmp.SeUserAccntId = this.SeUserAccntId;
			_tmp.OriginalSeUserAccntId = this.OriginalSeUserAccntId;
			
			_tmp.SeUserId = this.SeUserId;
			_tmp.SeAccountId = this.SeAccountId;
			_tmp.ContCreateFlg = this.ContCreateFlg;
			_tmp.IsActive = this.IsActive;
			_tmp.RcvMailFlg = this.RcvMailFlg;
			_tmp.HeadFlg = this.HeadFlg;
			_tmp.AvailPeriodFromDate = this.AvailPeriodFromDate;
			_tmp.AvailPeriodFromTime = this.AvailPeriodFromTime;
			_tmp.AvailPeriodToDate = this.AvailPeriodToDate;
			_tmp.AvailPeriodToTime = this.AvailPeriodToTime;
			_tmp.EntMainId = this.EntMainId;
			_tmp.HasAvailPeriod = this.HasAvailPeriod;
			_tmp.UserTableId = this.UserTableId;
			_tmp.ByforceFlg = this.ByforceFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserLstId = this.SeUserLstId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			
			#region Source Parent Composite Entities
			if (this.SeAccountIdSource != null && existingCopies.Contains(this.SeAccountIdSource))
				_tmp.SeAccountIdSource = existingCopies[this.SeAccountIdSource] as SeAccnt;
			else
				_tmp.SeAccountIdSource = MakeCopyOf(this.SeAccountIdSource, existingCopies) as SeAccnt;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				_tmp.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection, existingCopies); 
			_tmp.SeUserAccntControlDiffCollection = (TList<SeUserAccntControlDiff>) MakeCopyOf(this.SeUserAccntControlDiffCollection, existingCopies); 
			_tmp.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection, existingCopies); 
			_tmp.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection, existingCopies); 
			_tmp.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeUserAccntColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SeUserAccntColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeUserAccntColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SeUserAccntColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeUserAccntColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SeUserAccntColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SeUserAccntEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SeUserAccntEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeUserAccntColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SeUserAccntColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SeUserAccntEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SeUserAccntEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SeUserAccntEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SeUserAccnt"/> object.
	/// </remarks>
	public class SeUserAccntEventArgs : System.EventArgs
	{
		private SeUserAccntColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SeUserAccntEventArgs class.
		///</summary>
		public SeUserAccntEventArgs(SeUserAccntColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SeUserAccntEventArgs class.
		///</summary>
		public SeUserAccntEventArgs(SeUserAccntColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SeUserAccntColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SeUserAccntColumn" />
		public SeUserAccntColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SeUserAccnt related events.
	///</summary>
	public delegate void SeUserAccntEventHandler(object sender, SeUserAccntEventArgs e);
	
	#region SeUserAccntComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SeUserAccntComparer : System.Collections.Generic.IComparer<SeUserAccnt>
	{
		SeUserAccntColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SeUserAccntComparer"/> class.
        /// </summary>
		public SeUserAccntComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SeUserAccntComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SeUserAccntComparer(SeUserAccntColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SeUserAccnt"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SeUserAccnt"/> to compare.</param>
        /// <param name="b">The second <c>SeUserAccnt</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SeUserAccnt a, SeUserAccnt b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SeUserAccnt entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SeUserAccnt a, SeUserAccnt b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SeUserAccntColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SeUserAccntKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SeUserAccnt"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SeUserAccntKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SeUserAccntKey class.
		/// </summary>
		public SeUserAccntKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SeUserAccntKey class.
		/// </summary>
		public SeUserAccntKey(SeUserAccntBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SeUserAccntId = entity.SeUserAccntId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SeUserAccntKey class.
		/// </summary>
		public SeUserAccntKey(System.Decimal _seUserAccntId)
		{
			#region Init Properties

			this.SeUserAccntId = _seUserAccntId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SeUserAccntBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SeUserAccntBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SeUserAccntId property
		private System.Decimal _seUserAccntId;
		
		/// <summary>
		/// Gets or sets the SeUserAccntId property.
		/// </summary>
		public System.Decimal SeUserAccntId
		{
			get { return _seUserAccntId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SeUserAccntId = value;
				
				_seUserAccntId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SeUserAccntId = ( values["SeUserAccntId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SeUserAccntId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SeUserAccntId", SeUserAccntId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SeUserAccntId: {0}{1}",
								SeUserAccntId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SeUserAccntColumn Enum
	
	/// <summary>
	/// Enumerate the SeUserAccnt columns.
	/// </summary>
	[Serializable]
	public enum SeUserAccntColumn : int
	{
		/// <summary>
		/// SeUserAccntId : 
		/// </summary>
		[EnumTextValue("SE_USER_ACCNT_ID")]
		[ColumnEnum("SE_USER_ACCNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SeUserAccntId = 1,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 2,
		/// <summary>
		/// SeAccountId : 
		/// </summary>
		[EnumTextValue("SE_ACCOUNT_ID")]
		[ColumnEnum("SE_ACCOUNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeAccountId = 3,
		/// <summary>
		/// ContCreateFlg : 
		/// </summary>
		[EnumTextValue("CONT_CREATE_FLG")]
		[ColumnEnum("CONT_CREATE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ContCreateFlg = 4,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 5,
		/// <summary>
		/// RcvMailFlg : 
		/// </summary>
		[EnumTextValue("RCV_MAIL_FLG")]
		[ColumnEnum("RCV_MAIL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RcvMailFlg = 6,
		/// <summary>
		/// HeadFlg : تعديل بيانات تاريخية
		/// </summary>
		[EnumTextValue("HEAD_FLG")]
		[ColumnEnum("HEAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HeadFlg = 7,
		/// <summary>
		/// AvailPeriodFromDate : 
		/// </summary>
		[EnumTextValue("AVAIL_PERIOD_FROM_DATE")]
		[ColumnEnum("AVAIL_PERIOD_FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AvailPeriodFromDate = 8,
		/// <summary>
		/// AvailPeriodFromTime : 
		/// </summary>
		[EnumTextValue("AVAIL_PERIOD_FROM_TIME")]
		[ColumnEnum("AVAIL_PERIOD_FROM_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AvailPeriodFromTime = 9,
		/// <summary>
		/// AvailPeriodToDate : 
		/// </summary>
		[EnumTextValue("AVAIL_PERIOD_TO_DATE")]
		[ColumnEnum("AVAIL_PERIOD_TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AvailPeriodToDate = 10,
		/// <summary>
		/// AvailPeriodToTime : 
		/// </summary>
		[EnumTextValue("AVAIL_PERIOD_TO_TIME")]
		[ColumnEnum("AVAIL_PERIOD_TO_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AvailPeriodToTime = 11,
		/// <summary>
		/// EntMainId : جامعة -كلية -قسم
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 12,
		/// <summary>
		/// HasAvailPeriod : 
		/// </summary>
		[EnumTextValue("HAS_AVAIL_PERIOD")]
		[ColumnEnum("HAS_AVAIL_PERIOD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HasAvailPeriod = 13,
		/// <summary>
		/// UserTableId : ED_STUD_ID,SA_STAFF_ID
		/// </summary>
		[EnumTextValue("USER_TABLE_ID")]
		[ColumnEnum("USER_TABLE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		UserTableId = 14,
		/// <summary>
		/// ByforceFlg : حذف ايصالات 
		/// </summary>
		[EnumTextValue("BYFORCE_FLG")]
		[ColumnEnum("BYFORCE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ByforceFlg = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16,
		/// <summary>
		/// SeUserLstId : 
		/// </summary>
		[EnumTextValue("SE_USER_LST_ID")]
		[ColumnEnum("SE_USER_LST_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserLstId = 17,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 18,
		/// <summary>
		/// GsCodeGenderId : 
		/// </summary>
		[EnumTextValue("GS_CODE_GENDER_ID")]
		[ColumnEnum("GS_CODE_GENDER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeGenderId = 19
	}//End enum

	#endregion SeUserAccntColumn Enum

} // end namespace
