
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCourseRegAdd.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_COURSE_REG_ADD' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCourseRegAddBase : EntityBase, IEdStudCourseRegAdd, IEntityId<EdStudCourseRegAddKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAddEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCourseRegAddEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAddEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCourseRegAdd> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAddEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAddEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAddBase"/> instance.
		///</summary>
		public EdStudCourseRegAddBase()
		{
			this.entityData = new EdStudCourseRegAddEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAddBase"/> instance.
		///</summary>
		///<param name="_edStudCourseRegAddId"></param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_actualCourseDegree"></param>
		///<param name="_actualEdCodeGradingId"></param>
		///<param name="_actualGsCodePassFailId"></param>
		///<param name="_actualCoursePoint"></param>
		///<param name="_clemMark"></param>
		///<param name="_raiseMark"></param>
		///<param name="_finalCourseDegree"></param>
		///<param name="_finalEdCodeGradingId"></param>
		///<param name="_finalGsCodePassFailId"></param>
		///<param name="_finalCoursePoint"></param>
		public EdStudCourseRegAddBase(System.Decimal _edStudCourseRegAddId, System.Decimal _edStudCourseRegId, 
			System.Decimal? _actualCourseDegree, System.Decimal? _actualEdCodeGradingId, 
			System.Decimal? _actualGsCodePassFailId, System.Decimal? _actualCoursePoint, 
			System.Decimal? _clemMark, System.Decimal? _raiseMark, System.Decimal? _finalCourseDegree, 
			System.Decimal? _finalEdCodeGradingId, System.Decimal? _finalGsCodePassFailId, 
			System.Decimal? _finalCoursePoint)
		{
			this.entityData = new EdStudCourseRegAddEntityData();
			this.backupData = null;

			this.EdStudCourseRegAddId = _edStudCourseRegAddId;
			this.EdStudCourseRegId = _edStudCourseRegId;
			this.ActualCourseDegree = _actualCourseDegree;
			this.ActualEdCodeGradingId = _actualEdCodeGradingId;
			this.ActualGsCodePassFailId = _actualGsCodePassFailId;
			this.ActualCoursePoint = _actualCoursePoint;
			this.ClemMark = _clemMark;
			this.RaiseMark = _raiseMark;
			this.FinalCourseDegree = _finalCourseDegree;
			this.FinalEdCodeGradingId = _finalEdCodeGradingId;
			this.FinalGsCodePassFailId = _finalGsCodePassFailId;
			this.FinalCoursePoint = _finalCoursePoint;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCourseRegAdd"/> instance.
		///</summary>
		///<param name="_edStudCourseRegAddId"></param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_actualCourseDegree"></param>
		///<param name="_actualEdCodeGradingId"></param>
		///<param name="_actualGsCodePassFailId"></param>
		///<param name="_actualCoursePoint"></param>
		///<param name="_clemMark"></param>
		///<param name="_raiseMark"></param>
		///<param name="_finalCourseDegree"></param>
		///<param name="_finalEdCodeGradingId"></param>
		///<param name="_finalGsCodePassFailId"></param>
		///<param name="_finalCoursePoint"></param>
		public static EdStudCourseRegAdd CreateEdStudCourseRegAdd(System.Decimal _edStudCourseRegAddId, System.Decimal _edStudCourseRegId, 
			System.Decimal? _actualCourseDegree, System.Decimal? _actualEdCodeGradingId, 
			System.Decimal? _actualGsCodePassFailId, System.Decimal? _actualCoursePoint, 
			System.Decimal? _clemMark, System.Decimal? _raiseMark, System.Decimal? _finalCourseDegree, 
			System.Decimal? _finalEdCodeGradingId, System.Decimal? _finalGsCodePassFailId, 
			System.Decimal? _finalCoursePoint)
		{
			EdStudCourseRegAdd newEdStudCourseRegAdd = new EdStudCourseRegAdd();
			newEdStudCourseRegAdd.EdStudCourseRegAddId = _edStudCourseRegAddId;
			newEdStudCourseRegAdd.EdStudCourseRegId = _edStudCourseRegId;
			newEdStudCourseRegAdd.ActualCourseDegree = _actualCourseDegree;
			newEdStudCourseRegAdd.ActualEdCodeGradingId = _actualEdCodeGradingId;
			newEdStudCourseRegAdd.ActualGsCodePassFailId = _actualGsCodePassFailId;
			newEdStudCourseRegAdd.ActualCoursePoint = _actualCoursePoint;
			newEdStudCourseRegAdd.ClemMark = _clemMark;
			newEdStudCourseRegAdd.RaiseMark = _raiseMark;
			newEdStudCourseRegAdd.FinalCourseDegree = _finalCourseDegree;
			newEdStudCourseRegAdd.FinalEdCodeGradingId = _finalEdCodeGradingId;
			newEdStudCourseRegAdd.FinalGsCodePassFailId = _finalGsCodePassFailId;
			newEdStudCourseRegAdd.FinalCoursePoint = _finalCoursePoint;
			return newEdStudCourseRegAdd;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegAddId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCourseRegAddId
		{
			get
			{
				return this.entityData.EdStudCourseRegAddId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegAddId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.EdStudCourseRegAddId, this.entityData.EdStudCourseRegAddId);
				this.entityData.EdStudCourseRegAddId = value;
				this.EntityId.EdStudCourseRegAddId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.EdStudCourseRegAddId, this.entityData.EdStudCourseRegAddId);
				OnPropertyChanged("EdStudCourseRegAddId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_COURSE_REG_ADD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_COURSE_REG_ADD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCourseRegAddId
		{
			get { return this.entityData.OriginalEdStudCourseRegAddId; }
			set { this.entityData.OriginalEdStudCourseRegAddId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudCourseRegId
		{
			get
			{
				return this.entityData.EdStudCourseRegId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				this.entityData.EdStudCourseRegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				OnPropertyChanged("EdStudCourseRegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualCourseDegree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsActualCourseDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ActualCourseDegree
		{
			get
			{
				return this.entityData.ActualCourseDegree; 
			}
			
			set
			{
				if (this.entityData.ActualCourseDegree == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.ActualCourseDegree, this.entityData.ActualCourseDegree);
				this.entityData.ActualCourseDegree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.ActualCourseDegree, this.entityData.ActualCourseDegree);
				OnPropertyChanged("ActualCourseDegree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualEdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsActualEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ActualEdCodeGradingId
		{
			get
			{
				return this.entityData.ActualEdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.ActualEdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.ActualEdCodeGradingId, this.entityData.ActualEdCodeGradingId);
				this.entityData.ActualEdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.ActualEdCodeGradingId, this.entityData.ActualEdCodeGradingId);
				OnPropertyChanged("ActualEdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualGsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsActualGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ActualGsCodePassFailId
		{
			get
			{
				return this.entityData.ActualGsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.ActualGsCodePassFailId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.ActualGsCodePassFailId, this.entityData.ActualGsCodePassFailId);
				this.entityData.ActualGsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.ActualGsCodePassFailId, this.entityData.ActualGsCodePassFailId);
				OnPropertyChanged("ActualGsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualCoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsActualCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ActualCoursePoint
		{
			get
			{
				return this.entityData.ActualCoursePoint; 
			}
			
			set
			{
				if (this.entityData.ActualCoursePoint == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.ActualCoursePoint, this.entityData.ActualCoursePoint);
				this.entityData.ActualCoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.ActualCoursePoint, this.entityData.ActualCoursePoint);
				OnPropertyChanged("ActualCoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClemMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsClemMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ClemMark
		{
			get
			{
				return this.entityData.ClemMark; 
			}
			
			set
			{
				if (this.entityData.ClemMark == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.ClemMark, this.entityData.ClemMark);
				this.entityData.ClemMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.ClemMark, this.entityData.ClemMark);
				OnPropertyChanged("ClemMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RaiseMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RaiseMark
		{
			get
			{
				return this.entityData.RaiseMark; 
			}
			
			set
			{
				if (this.entityData.RaiseMark == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.RaiseMark, this.entityData.RaiseMark);
				this.entityData.RaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.RaiseMark, this.entityData.RaiseMark);
				OnPropertyChanged("RaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinalCourseDegree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFinalCourseDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FinalCourseDegree
		{
			get
			{
				return this.entityData.FinalCourseDegree; 
			}
			
			set
			{
				if (this.entityData.FinalCourseDegree == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.FinalCourseDegree, this.entityData.FinalCourseDegree);
				this.entityData.FinalCourseDegree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.FinalCourseDegree, this.entityData.FinalCourseDegree);
				OnPropertyChanged("FinalCourseDegree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinalEdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFinalEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FinalEdCodeGradingId
		{
			get
			{
				return this.entityData.FinalEdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.FinalEdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.FinalEdCodeGradingId, this.entityData.FinalEdCodeGradingId);
				this.entityData.FinalEdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.FinalEdCodeGradingId, this.entityData.FinalEdCodeGradingId);
				OnPropertyChanged("FinalEdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinalGsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFinalGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FinalGsCodePassFailId
		{
			get
			{
				return this.entityData.FinalGsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.FinalGsCodePassFailId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.FinalGsCodePassFailId, this.entityData.FinalGsCodePassFailId);
				this.entityData.FinalGsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.FinalGsCodePassFailId, this.entityData.FinalGsCodePassFailId);
				OnPropertyChanged("FinalGsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinalCoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFinalCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FinalCoursePoint
		{
			get
			{
				return this.entityData.FinalCoursePoint; 
			}
			
			set
			{
				if (this.entityData.FinalCoursePoint == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAddColumn.FinalCoursePoint, this.entityData.FinalCoursePoint);
				this.entityData.FinalCoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAddColumn.FinalCoursePoint, this.entityData.FinalCoursePoint);
				OnPropertyChanged("FinalCoursePoint");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for ActualEdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading ActualEdCodeGradingIdSource
      	{
            get { return entityData.ActualEdCodeGradingIdSource; }
            set { entityData.ActualEdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for FinalEdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading FinalEdCodeGradingIdSource
      	{
            get { return entityData.FinalEdCodeGradingIdSource; }
            set { entityData.FinalEdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return entityData.EdStudCourseRegIdSource; }
            set { entityData.EdStudCourseRegIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for FinalGsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail FinalGsCodePassFailIdSource
      	{
            get { return entityData.FinalGsCodePassFailIdSource; }
            set { entityData.FinalGsCodePassFailIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for ActualGsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail ActualGsCodePassFailIdSource
      	{
            get { return entityData.ActualGsCodePassFailIdSource; }
            set { entityData.ActualGsCodePassFailIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_COURSE_REG_ADD"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_COURSE_REG_ADD_ID", "ED_STUD_COURSE_REG_ID", "ACTUAL_COURSE_DEGREE", "ACTUAL_ED_CODE_GRADING_ID", "ACTUAL_GS_CODE_PASS_FAIL_ID", "ACTUAL_COURSE_POINT", "CLEM_MARK", "RAISE_MARK", "FINAL_COURSE_DEGREE", "FINAL_ED_CODE_GRADING_ID", "FINAL_GS_CODE_PASS_FAIL_ID", "FINAL_COURSE_POINT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCourseRegAddEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCourseRegAdd) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCourseRegAdd>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCourseRegAdd);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCourseRegAdd Entity 
		///</summary>
		protected virtual EdStudCourseRegAdd Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCourseRegAdd copy = new EdStudCourseRegAdd();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCourseRegAddId = this.EdStudCourseRegAddId;
					copy.OriginalEdStudCourseRegAddId = this.OriginalEdStudCourseRegAddId;
				copy.EdStudCourseRegId = this.EdStudCourseRegId;
				copy.ActualCourseDegree = this.ActualCourseDegree;
				copy.ActualEdCodeGradingId = this.ActualEdCodeGradingId;
				copy.ActualGsCodePassFailId = this.ActualGsCodePassFailId;
				copy.ActualCoursePoint = this.ActualCoursePoint;
				copy.ClemMark = this.ClemMark;
				copy.RaiseMark = this.RaiseMark;
				copy.FinalCourseDegree = this.FinalCourseDegree;
				copy.FinalEdCodeGradingId = this.FinalEdCodeGradingId;
				copy.FinalGsCodePassFailId = this.FinalGsCodePassFailId;
				copy.FinalCoursePoint = this.FinalCoursePoint;
			
			if (this.ActualEdCodeGradingIdSource != null && existingCopies.Contains(this.ActualEdCodeGradingIdSource))
				copy.ActualEdCodeGradingIdSource = existingCopies[this.ActualEdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.ActualEdCodeGradingIdSource = MakeCopyOf(this.ActualEdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.FinalEdCodeGradingIdSource != null && existingCopies.Contains(this.FinalEdCodeGradingIdSource))
				copy.FinalEdCodeGradingIdSource = existingCopies[this.FinalEdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.FinalEdCodeGradingIdSource = MakeCopyOf(this.FinalEdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				copy.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				copy.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
			if (this.FinalGsCodePassFailIdSource != null && existingCopies.Contains(this.FinalGsCodePassFailIdSource))
				copy.FinalGsCodePassFailIdSource = existingCopies[this.FinalGsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.FinalGsCodePassFailIdSource = MakeCopyOf(this.FinalGsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.ActualGsCodePassFailIdSource != null && existingCopies.Contains(this.ActualGsCodePassFailIdSource))
				copy.ActualGsCodePassFailIdSource = existingCopies[this.ActualGsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.ActualGsCodePassFailIdSource = MakeCopyOf(this.ActualGsCodePassFailIdSource, existingCopies) as GsCodePassFail;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAdd Entity 
		///</summary>
		public virtual EdStudCourseRegAdd Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAdd Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCourseRegAdd DeepCopy()
		{
			return EntityHelper.Clone<EdStudCourseRegAdd>(this as EdStudCourseRegAdd);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCourseRegAddEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCourseRegAddEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCourseRegAddEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCourseRegAddColumn column)
		{
			switch(column)
			{
					case EdStudCourseRegAddColumn.EdStudCourseRegAddId:
					return entityData.EdStudCourseRegAddId != _originalData.EdStudCourseRegAddId;
					case EdStudCourseRegAddColumn.EdStudCourseRegId:
					return entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
					case EdStudCourseRegAddColumn.ActualCourseDegree:
					return entityData.ActualCourseDegree != _originalData.ActualCourseDegree;
					case EdStudCourseRegAddColumn.ActualEdCodeGradingId:
					return entityData.ActualEdCodeGradingId != _originalData.ActualEdCodeGradingId;
					case EdStudCourseRegAddColumn.ActualGsCodePassFailId:
					return entityData.ActualGsCodePassFailId != _originalData.ActualGsCodePassFailId;
					case EdStudCourseRegAddColumn.ActualCoursePoint:
					return entityData.ActualCoursePoint != _originalData.ActualCoursePoint;
					case EdStudCourseRegAddColumn.ClemMark:
					return entityData.ClemMark != _originalData.ClemMark;
					case EdStudCourseRegAddColumn.RaiseMark:
					return entityData.RaiseMark != _originalData.RaiseMark;
					case EdStudCourseRegAddColumn.FinalCourseDegree:
					return entityData.FinalCourseDegree != _originalData.FinalCourseDegree;
					case EdStudCourseRegAddColumn.FinalEdCodeGradingId:
					return entityData.FinalEdCodeGradingId != _originalData.FinalEdCodeGradingId;
					case EdStudCourseRegAddColumn.FinalGsCodePassFailId:
					return entityData.FinalGsCodePassFailId != _originalData.FinalGsCodePassFailId;
					case EdStudCourseRegAddColumn.FinalCoursePoint:
					return entityData.FinalCoursePoint != _originalData.FinalCoursePoint;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCourseRegAddColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCourseRegAddId != _originalData.EdStudCourseRegAddId;
			result = result || entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
			result = result || entityData.ActualCourseDegree != _originalData.ActualCourseDegree;
			result = result || entityData.ActualEdCodeGradingId != _originalData.ActualEdCodeGradingId;
			result = result || entityData.ActualGsCodePassFailId != _originalData.ActualGsCodePassFailId;
			result = result || entityData.ActualCoursePoint != _originalData.ActualCoursePoint;
			result = result || entityData.ClemMark != _originalData.ClemMark;
			result = result || entityData.RaiseMark != _originalData.RaiseMark;
			result = result || entityData.FinalCourseDegree != _originalData.FinalCourseDegree;
			result = result || entityData.FinalEdCodeGradingId != _originalData.FinalEdCodeGradingId;
			result = result || entityData.FinalGsCodePassFailId != _originalData.FinalGsCodePassFailId;
			result = result || entityData.FinalCoursePoint != _originalData.FinalCoursePoint;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCourseRegAdd Entity with the original data.
		///</summary>
		public EdStudCourseRegAdd GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCourseRegAdd(
				_originalData.EdStudCourseRegAddId,
				_originalData.EdStudCourseRegId,
				_originalData.ActualCourseDegree,
				_originalData.ActualEdCodeGradingId,
				_originalData.ActualGsCodePassFailId,
				_originalData.ActualCoursePoint,
				_originalData.ClemMark,
				_originalData.RaiseMark,
				_originalData.FinalCourseDegree,
				_originalData.FinalEdCodeGradingId,
				_originalData.FinalGsCodePassFailId,
				_originalData.FinalCoursePoint
				);
				
			return (EdStudCourseRegAdd)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCourseRegAddBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCourseRegAddBase)
				return ValueEquals(this, (EdStudCourseRegAddBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCourseRegAddBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCourseRegAddId.GetHashCode() ^ 
					this.EdStudCourseRegId.GetHashCode() ^ 
					((this.ActualCourseDegree == null) ? string.Empty : this.ActualCourseDegree.ToString()).GetHashCode() ^ 
					((this.ActualEdCodeGradingId == null) ? string.Empty : this.ActualEdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.ActualGsCodePassFailId == null) ? string.Empty : this.ActualGsCodePassFailId.ToString()).GetHashCode() ^ 
					((this.ActualCoursePoint == null) ? string.Empty : this.ActualCoursePoint.ToString()).GetHashCode() ^ 
					((this.ClemMark == null) ? string.Empty : this.ClemMark.ToString()).GetHashCode() ^ 
					((this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString()).GetHashCode() ^ 
					((this.FinalCourseDegree == null) ? string.Empty : this.FinalCourseDegree.ToString()).GetHashCode() ^ 
					((this.FinalEdCodeGradingId == null) ? string.Empty : this.FinalEdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.FinalGsCodePassFailId == null) ? string.Empty : this.FinalGsCodePassFailId.ToString()).GetHashCode() ^ 
					((this.FinalCoursePoint == null) ? string.Empty : this.FinalCoursePoint.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCourseRegAddBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCourseRegAddBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCourseRegAddBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCourseRegAddBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCourseRegAddBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCourseRegAddBase Object1, EdStudCourseRegAddBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCourseRegAddId != Object2.EdStudCourseRegAddId)
				equal = false;
			if (Object1.EdStudCourseRegId != Object2.EdStudCourseRegId)
				equal = false;
			if ( Object1.ActualCourseDegree != null && Object2.ActualCourseDegree != null )
			{
				if (Object1.ActualCourseDegree != Object2.ActualCourseDegree)
					equal = false;
			}
			else if (Object1.ActualCourseDegree == null ^ Object2.ActualCourseDegree == null )
			{
				equal = false;
			}
			if ( Object1.ActualEdCodeGradingId != null && Object2.ActualEdCodeGradingId != null )
			{
				if (Object1.ActualEdCodeGradingId != Object2.ActualEdCodeGradingId)
					equal = false;
			}
			else if (Object1.ActualEdCodeGradingId == null ^ Object2.ActualEdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.ActualGsCodePassFailId != null && Object2.ActualGsCodePassFailId != null )
			{
				if (Object1.ActualGsCodePassFailId != Object2.ActualGsCodePassFailId)
					equal = false;
			}
			else if (Object1.ActualGsCodePassFailId == null ^ Object2.ActualGsCodePassFailId == null )
			{
				equal = false;
			}
			if ( Object1.ActualCoursePoint != null && Object2.ActualCoursePoint != null )
			{
				if (Object1.ActualCoursePoint != Object2.ActualCoursePoint)
					equal = false;
			}
			else if (Object1.ActualCoursePoint == null ^ Object2.ActualCoursePoint == null )
			{
				equal = false;
			}
			if ( Object1.ClemMark != null && Object2.ClemMark != null )
			{
				if (Object1.ClemMark != Object2.ClemMark)
					equal = false;
			}
			else if (Object1.ClemMark == null ^ Object2.ClemMark == null )
			{
				equal = false;
			}
			if ( Object1.RaiseMark != null && Object2.RaiseMark != null )
			{
				if (Object1.RaiseMark != Object2.RaiseMark)
					equal = false;
			}
			else if (Object1.RaiseMark == null ^ Object2.RaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.FinalCourseDegree != null && Object2.FinalCourseDegree != null )
			{
				if (Object1.FinalCourseDegree != Object2.FinalCourseDegree)
					equal = false;
			}
			else if (Object1.FinalCourseDegree == null ^ Object2.FinalCourseDegree == null )
			{
				equal = false;
			}
			if ( Object1.FinalEdCodeGradingId != null && Object2.FinalEdCodeGradingId != null )
			{
				if (Object1.FinalEdCodeGradingId != Object2.FinalEdCodeGradingId)
					equal = false;
			}
			else if (Object1.FinalEdCodeGradingId == null ^ Object2.FinalEdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.FinalGsCodePassFailId != null && Object2.FinalGsCodePassFailId != null )
			{
				if (Object1.FinalGsCodePassFailId != Object2.FinalGsCodePassFailId)
					equal = false;
			}
			else if (Object1.FinalGsCodePassFailId == null ^ Object2.FinalGsCodePassFailId == null )
			{
				equal = false;
			}
			if ( Object1.FinalCoursePoint != null && Object2.FinalCoursePoint != null )
			{
				if (Object1.FinalCoursePoint != Object2.FinalCoursePoint)
					equal = false;
			}
			else if (Object1.FinalCoursePoint == null ^ Object2.FinalCoursePoint == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCourseRegAddBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCourseRegAddComparer GetComparer()
        {
            return new EdStudCourseRegAddComparer();
        }
        */

        // Comparer delegates back to EdStudCourseRegAdd
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCourseRegAdd rhs, EdStudCourseRegAddColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCourseRegAddColumn.EdStudCourseRegAddId:
            		return this.EdStudCourseRegAddId.CompareTo(rhs.EdStudCourseRegAddId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.EdStudCourseRegId:
            		return this.EdStudCourseRegId.CompareTo(rhs.EdStudCourseRegId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.ActualCourseDegree:
            		return this.ActualCourseDegree.Value.CompareTo(rhs.ActualCourseDegree.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.ActualEdCodeGradingId:
            		return this.ActualEdCodeGradingId.Value.CompareTo(rhs.ActualEdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.ActualGsCodePassFailId:
            		return this.ActualGsCodePassFailId.Value.CompareTo(rhs.ActualGsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.ActualCoursePoint:
            		return this.ActualCoursePoint.Value.CompareTo(rhs.ActualCoursePoint.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.ClemMark:
            		return this.ClemMark.Value.CompareTo(rhs.ClemMark.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.RaiseMark:
            		return this.RaiseMark.Value.CompareTo(rhs.RaiseMark.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.FinalCourseDegree:
            		return this.FinalCourseDegree.Value.CompareTo(rhs.FinalCourseDegree.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.FinalEdCodeGradingId:
            		return this.FinalEdCodeGradingId.Value.CompareTo(rhs.FinalEdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.FinalGsCodePassFailId:
            		return this.FinalGsCodePassFailId.Value.CompareTo(rhs.FinalGsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAddColumn.FinalCoursePoint:
            		return this.FinalCoursePoint.Value.CompareTo(rhs.FinalCoursePoint.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCourseRegAddKey> Members
		
		// member variable for the EntityId property
		private EdStudCourseRegAddKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCourseRegAddKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCourseRegAddKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCourseRegAdd")
					.Append("|").Append( this.EdStudCourseRegAddId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- EdStudCourseRegAddId: {0}{12}- EdStudCourseRegId: {1}{12}- ActualCourseDegree: {2}{12}- ActualEdCodeGradingId: {3}{12}- ActualGsCodePassFailId: {4}{12}- ActualCoursePoint: {5}{12}- ClemMark: {6}{12}- RaiseMark: {7}{12}- FinalCourseDegree: {8}{12}- FinalEdCodeGradingId: {9}{12}- FinalGsCodePassFailId: {10}{12}- FinalCoursePoint: {11}{12}{14}", 
				this.EdStudCourseRegAddId,
				this.EdStudCourseRegId,
				(this.ActualCourseDegree == null) ? string.Empty : this.ActualCourseDegree.ToString(),
				(this.ActualEdCodeGradingId == null) ? string.Empty : this.ActualEdCodeGradingId.ToString(),
				(this.ActualGsCodePassFailId == null) ? string.Empty : this.ActualGsCodePassFailId.ToString(),
				(this.ActualCoursePoint == null) ? string.Empty : this.ActualCoursePoint.ToString(),
				(this.ClemMark == null) ? string.Empty : this.ClemMark.ToString(),
				(this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString(),
				(this.FinalCourseDegree == null) ? string.Empty : this.FinalCourseDegree.ToString(),
				(this.FinalEdCodeGradingId == null) ? string.Empty : this.FinalEdCodeGradingId.ToString(),
				(this.FinalGsCodePassFailId == null) ? string.Empty : this.FinalGsCodePassFailId.ToString(),
				(this.FinalCoursePoint == null) ? string.Empty : this.FinalCoursePoint.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_COURSE_REG_ADD' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCourseRegAddEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_COURSE_REG_ADD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_COURSE_REG_ADD"</remarks>
		public System.Decimal EdStudCourseRegAddId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCourseRegAddId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_COURSE_REG_ID : 
		/// </summary>
		public System.Decimal		  EdStudCourseRegId = 0.0m;
		
		/// <summary>
		/// ACTUAL_COURSE_DEGREE : 
		/// </summary>
		public System.Decimal?		  ActualCourseDegree = null;
		
		/// <summary>
		/// ACTUAL_ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  ActualEdCodeGradingId = null;
		
		/// <summary>
		/// ACTUAL_GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  ActualGsCodePassFailId = null;
		
		/// <summary>
		/// ACTUAL_COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  ActualCoursePoint = null;
		
		/// <summary>
		/// CLEM_MARK : 
		/// </summary>
		public System.Decimal?		  ClemMark = null;
		
		/// <summary>
		/// RAISE_MARK : 
		/// </summary>
		public System.Decimal?		  RaiseMark = null;
		
		/// <summary>
		/// FINAL_COURSE_DEGREE : 
		/// </summary>
		public System.Decimal?		  FinalCourseDegree = null;
		
		/// <summary>
		/// FINAL_ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  FinalEdCodeGradingId = null;
		
		/// <summary>
		/// FINAL_GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  FinalGsCodePassFailId = null;
		
		/// <summary>
		/// FINAL_COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  FinalCoursePoint = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeGrading _actualEdCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for ActualEdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading ActualEdCodeGradingIdSource
      	{
            get { return this._actualEdCodeGradingIdSource; }
            set { this._actualEdCodeGradingIdSource = value; }
      	}
		private EdCodeGrading _finalEdCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for FinalEdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading FinalEdCodeGradingIdSource
      	{
            get { return this._finalEdCodeGradingIdSource; }
            set { this._finalEdCodeGradingIdSource = value; }
      	}
		private EdStudCourseReg _edStudCourseRegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return this._edStudCourseRegIdSource; }
            set { this._edStudCourseRegIdSource = value; }
      	}
		private GsCodePassFail _finalGsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for FinalGsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail FinalGsCodePassFailIdSource
      	{
            get { return this._finalGsCodePassFailIdSource; }
            set { this._finalGsCodePassFailIdSource = value; }
      	}
		private GsCodePassFail _actualGsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for ActualGsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail ActualGsCodePassFailIdSource
      	{
            get { return this._actualGsCodePassFailIdSource; }
            set { this._actualGsCodePassFailIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCourseRegAddEntityData _tmp = new EdStudCourseRegAddEntityData();
						
			_tmp.EdStudCourseRegAddId = this.EdStudCourseRegAddId;
			_tmp.OriginalEdStudCourseRegAddId = this.OriginalEdStudCourseRegAddId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.ActualCourseDegree = this.ActualCourseDegree;
			_tmp.ActualEdCodeGradingId = this.ActualEdCodeGradingId;
			_tmp.ActualGsCodePassFailId = this.ActualGsCodePassFailId;
			_tmp.ActualCoursePoint = this.ActualCoursePoint;
			_tmp.ClemMark = this.ClemMark;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.FinalCourseDegree = this.FinalCourseDegree;
			_tmp.FinalEdCodeGradingId = this.FinalEdCodeGradingId;
			_tmp.FinalGsCodePassFailId = this.FinalGsCodePassFailId;
			_tmp.FinalCoursePoint = this.FinalCoursePoint;
			
			#region Source Parent Composite Entities
			if (this.ActualEdCodeGradingIdSource != null)
				_tmp.ActualEdCodeGradingIdSource = MakeCopyOf(this.ActualEdCodeGradingIdSource) as EdCodeGrading;
			if (this.FinalEdCodeGradingIdSource != null)
				_tmp.FinalEdCodeGradingIdSource = MakeCopyOf(this.FinalEdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdStudCourseRegIdSource != null)
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource) as EdStudCourseReg;
			if (this.FinalGsCodePassFailIdSource != null)
				_tmp.FinalGsCodePassFailIdSource = MakeCopyOf(this.FinalGsCodePassFailIdSource) as GsCodePassFail;
			if (this.ActualGsCodePassFailIdSource != null)
				_tmp.ActualGsCodePassFailIdSource = MakeCopyOf(this.ActualGsCodePassFailIdSource) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCourseRegAddEntityData _tmp = new EdStudCourseRegAddEntityData();
						
			_tmp.EdStudCourseRegAddId = this.EdStudCourseRegAddId;
			_tmp.OriginalEdStudCourseRegAddId = this.OriginalEdStudCourseRegAddId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.ActualCourseDegree = this.ActualCourseDegree;
			_tmp.ActualEdCodeGradingId = this.ActualEdCodeGradingId;
			_tmp.ActualGsCodePassFailId = this.ActualGsCodePassFailId;
			_tmp.ActualCoursePoint = this.ActualCoursePoint;
			_tmp.ClemMark = this.ClemMark;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.FinalCourseDegree = this.FinalCourseDegree;
			_tmp.FinalEdCodeGradingId = this.FinalEdCodeGradingId;
			_tmp.FinalGsCodePassFailId = this.FinalGsCodePassFailId;
			_tmp.FinalCoursePoint = this.FinalCoursePoint;
			
			#region Source Parent Composite Entities
			if (this.ActualEdCodeGradingIdSource != null && existingCopies.Contains(this.ActualEdCodeGradingIdSource))
				_tmp.ActualEdCodeGradingIdSource = existingCopies[this.ActualEdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.ActualEdCodeGradingIdSource = MakeCopyOf(this.ActualEdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.FinalEdCodeGradingIdSource != null && existingCopies.Contains(this.FinalEdCodeGradingIdSource))
				_tmp.FinalEdCodeGradingIdSource = existingCopies[this.FinalEdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.FinalEdCodeGradingIdSource = MakeCopyOf(this.FinalEdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				_tmp.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
			if (this.FinalGsCodePassFailIdSource != null && existingCopies.Contains(this.FinalGsCodePassFailIdSource))
				_tmp.FinalGsCodePassFailIdSource = existingCopies[this.FinalGsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.FinalGsCodePassFailIdSource = MakeCopyOf(this.FinalGsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.ActualGsCodePassFailIdSource != null && existingCopies.Contains(this.ActualGsCodePassFailIdSource))
				_tmp.ActualGsCodePassFailIdSource = existingCopies[this.ActualGsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.ActualGsCodePassFailIdSource = MakeCopyOf(this.ActualGsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAddColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAddColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAddColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAddColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAddColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAddColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAddEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAddEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAddColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAddColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAddEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAddEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCourseRegAddEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCourseRegAdd"/> object.
	/// </remarks>
	public class EdStudCourseRegAddEventArgs : System.EventArgs
	{
		private EdStudCourseRegAddColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAddEventArgs class.
		///</summary>
		public EdStudCourseRegAddEventArgs(EdStudCourseRegAddColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAddEventArgs class.
		///</summary>
		public EdStudCourseRegAddEventArgs(EdStudCourseRegAddColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCourseRegAddColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCourseRegAddColumn" />
		public EdStudCourseRegAddColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCourseRegAdd related events.
	///</summary>
	public delegate void EdStudCourseRegAddEventHandler(object sender, EdStudCourseRegAddEventArgs e);
	
	#region EdStudCourseRegAddComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCourseRegAddComparer : System.Collections.Generic.IComparer<EdStudCourseRegAdd>
	{
		EdStudCourseRegAddColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAddComparer"/> class.
        /// </summary>
		public EdStudCourseRegAddComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAddComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCourseRegAddComparer(EdStudCourseRegAddColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCourseRegAdd"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCourseRegAdd"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCourseRegAdd</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCourseRegAdd a, EdStudCourseRegAdd b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCourseRegAdd entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCourseRegAdd a, EdStudCourseRegAdd b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCourseRegAddColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCourseRegAddKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCourseRegAdd"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCourseRegAddKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddKey class.
		/// </summary>
		public EdStudCourseRegAddKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddKey class.
		/// </summary>
		public EdStudCourseRegAddKey(EdStudCourseRegAddBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCourseRegAddId = entity.EdStudCourseRegAddId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAddKey class.
		/// </summary>
		public EdStudCourseRegAddKey(System.Decimal _edStudCourseRegAddId)
		{
			#region Init Properties

			this.EdStudCourseRegAddId = _edStudCourseRegAddId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCourseRegAddBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCourseRegAddBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCourseRegAddId property
		private System.Decimal _edStudCourseRegAddId;
		
		/// <summary>
		/// Gets or sets the EdStudCourseRegAddId property.
		/// </summary>
		public System.Decimal EdStudCourseRegAddId
		{
			get { return _edStudCourseRegAddId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCourseRegAddId = value;
				
				_edStudCourseRegAddId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCourseRegAddId = ( values["EdStudCourseRegAddId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCourseRegAddId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCourseRegAddId", EdStudCourseRegAddId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCourseRegAddId: {0}{1}",
								EdStudCourseRegAddId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCourseRegAddColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCourseRegAdd columns.
	/// </summary>
	[Serializable]
	public enum EdStudCourseRegAddColumn : int
	{
		/// <summary>
		/// EdStudCourseRegAddId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ADD_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ADD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCourseRegAddId = 1,
		/// <summary>
		/// EdStudCourseRegId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudCourseRegId = 2,
		/// <summary>
		/// ActualCourseDegree : 
		/// </summary>
		[EnumTextValue("ACTUAL_COURSE_DEGREE")]
		[ColumnEnum("ACTUAL_COURSE_DEGREE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ActualCourseDegree = 3,
		/// <summary>
		/// ActualEdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ACTUAL_ED_CODE_GRADING_ID")]
		[ColumnEnum("ACTUAL_ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ActualEdCodeGradingId = 4,
		/// <summary>
		/// ActualGsCodePassFailId : 
		/// </summary>
		[EnumTextValue("ACTUAL_GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("ACTUAL_GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ActualGsCodePassFailId = 5,
		/// <summary>
		/// ActualCoursePoint : 
		/// </summary>
		[EnumTextValue("ACTUAL_COURSE_POINT")]
		[ColumnEnum("ACTUAL_COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ActualCoursePoint = 6,
		/// <summary>
		/// ClemMark : 
		/// </summary>
		[EnumTextValue("CLEM_MARK")]
		[ColumnEnum("CLEM_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ClemMark = 7,
		/// <summary>
		/// RaiseMark : 
		/// </summary>
		[EnumTextValue("RAISE_MARK")]
		[ColumnEnum("RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RaiseMark = 8,
		/// <summary>
		/// FinalCourseDegree : 
		/// </summary>
		[EnumTextValue("FINAL_COURSE_DEGREE")]
		[ColumnEnum("FINAL_COURSE_DEGREE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FinalCourseDegree = 9,
		/// <summary>
		/// FinalEdCodeGradingId : 
		/// </summary>
		[EnumTextValue("FINAL_ED_CODE_GRADING_ID")]
		[ColumnEnum("FINAL_ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FinalEdCodeGradingId = 10,
		/// <summary>
		/// FinalGsCodePassFailId : 
		/// </summary>
		[EnumTextValue("FINAL_GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("FINAL_GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FinalGsCodePassFailId = 11,
		/// <summary>
		/// FinalCoursePoint : 
		/// </summary>
		[EnumTextValue("FINAL_COURSE_POINT")]
		[ColumnEnum("FINAL_COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FinalCoursePoint = 12
	}//End enum

	#endregion EdStudCourseRegAddColumn Enum

} // end namespace
