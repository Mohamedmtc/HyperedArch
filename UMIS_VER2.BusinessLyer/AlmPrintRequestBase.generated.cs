
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AlmPrintRequest.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ALM_PRINT_REQUEST' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AlmPrintRequestBase : EntityBase, IAlmPrintRequest, IEntityId<AlmPrintRequestKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AlmPrintRequestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AlmPrintRequestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AlmPrintRequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AlmPrintRequest> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AlmPrintRequestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AlmPrintRequestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AlmPrintRequestBase"/> instance.
		///</summary>
		public AlmPrintRequestBase()
		{
			this.entityData = new AlmPrintRequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AlmPrintRequestBase"/> instance.
		///</summary>
		///<param name="_almPrintRequestId"></param>
		///<param name="_requestDate"></param>
		///<param name="_printDate"></param>
		///<param name="_requiredCopiesNo"></param>
		///<param name="_printedCopiesNo"></param>
		///<param name="_edStudId"></param>
		///<param name="_printTranscriptFlag"></param>
		///<param name="_printCertificateFlag"></param>
		///<param name="_certificateTypeFlag"></param>
		public AlmPrintRequestBase(System.Decimal _almPrintRequestId, System.DateTime? _requestDate, 
			System.DateTime? _printDate, System.Int32? _requiredCopiesNo, System.Int32? _printedCopiesNo, 
			System.Decimal _edStudId, System.Decimal? _printTranscriptFlag, System.Decimal? _printCertificateFlag, 
			System.Decimal? _certificateTypeFlag)
		{
			this.entityData = new AlmPrintRequestEntityData();
			this.backupData = null;

			this.AlmPrintRequestId = _almPrintRequestId;
			this.RequestDate = _requestDate;
			this.PrintDate = _printDate;
			this.RequiredCopiesNo = _requiredCopiesNo;
			this.PrintedCopiesNo = _printedCopiesNo;
			this.EdStudId = _edStudId;
			this.PrintTranscriptFlag = _printTranscriptFlag;
			this.PrintCertificateFlag = _printCertificateFlag;
			this.CertificateTypeFlag = _certificateTypeFlag;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AlmPrintRequest"/> instance.
		///</summary>
		///<param name="_almPrintRequestId"></param>
		///<param name="_requestDate"></param>
		///<param name="_printDate"></param>
		///<param name="_requiredCopiesNo"></param>
		///<param name="_printedCopiesNo"></param>
		///<param name="_edStudId"></param>
		///<param name="_printTranscriptFlag"></param>
		///<param name="_printCertificateFlag"></param>
		///<param name="_certificateTypeFlag"></param>
		public static AlmPrintRequest CreateAlmPrintRequest(System.Decimal _almPrintRequestId, System.DateTime? _requestDate, 
			System.DateTime? _printDate, System.Int32? _requiredCopiesNo, System.Int32? _printedCopiesNo, 
			System.Decimal _edStudId, System.Decimal? _printTranscriptFlag, System.Decimal? _printCertificateFlag, 
			System.Decimal? _certificateTypeFlag)
		{
			AlmPrintRequest newAlmPrintRequest = new AlmPrintRequest();
			newAlmPrintRequest.AlmPrintRequestId = _almPrintRequestId;
			newAlmPrintRequest.RequestDate = _requestDate;
			newAlmPrintRequest.PrintDate = _printDate;
			newAlmPrintRequest.RequiredCopiesNo = _requiredCopiesNo;
			newAlmPrintRequest.PrintedCopiesNo = _printedCopiesNo;
			newAlmPrintRequest.EdStudId = _edStudId;
			newAlmPrintRequest.PrintTranscriptFlag = _printTranscriptFlag;
			newAlmPrintRequest.PrintCertificateFlag = _printCertificateFlag;
			newAlmPrintRequest.CertificateTypeFlag = _certificateTypeFlag;
			return newAlmPrintRequest;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AlmPrintRequestId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AlmPrintRequestId
		{
			get
			{
				return this.entityData.AlmPrintRequestId; 
			}
			
			set
			{
				if (this.entityData.AlmPrintRequestId == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.AlmPrintRequestId, this.entityData.AlmPrintRequestId);
				this.entityData.AlmPrintRequestId = value;
				this.EntityId.AlmPrintRequestId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.AlmPrintRequestId, this.entityData.AlmPrintRequestId);
				OnPropertyChanged("AlmPrintRequestId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ALM_PRINT_REQUEST_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ALM_PRINT_REQUEST_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAlmPrintRequestId
		{
			get { return this.entityData.OriginalAlmPrintRequestId; }
			set { this.entityData.OriginalAlmPrintRequestId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the RequestDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequestDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequestDate
		{
			get
			{
				return this.entityData.RequestDate; 
			}
			
			set
			{
				if (this.entityData.RequestDate == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.RequestDate, this.entityData.RequestDate);
				this.entityData.RequestDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.RequestDate, this.entityData.RequestDate);
				OnPropertyChanged("RequestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrintDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPrintDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PrintDate
		{
			get
			{
				return this.entityData.PrintDate; 
			}
			
			set
			{
				if (this.entityData.PrintDate == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.PrintDate, this.entityData.PrintDate);
				this.entityData.PrintDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.PrintDate, this.entityData.PrintDate);
				OnPropertyChanged("PrintDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequiredCopiesNo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRequiredCopiesNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RequiredCopiesNo
		{
			get
			{
				return this.entityData.RequiredCopiesNo; 
			}
			
			set
			{
				if (this.entityData.RequiredCopiesNo == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.RequiredCopiesNo, this.entityData.RequiredCopiesNo);
				this.entityData.RequiredCopiesNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.RequiredCopiesNo, this.entityData.RequiredCopiesNo);
				OnPropertyChanged("RequiredCopiesNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrintedCopiesNo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPrintedCopiesNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PrintedCopiesNo
		{
			get
			{
				return this.entityData.PrintedCopiesNo; 
			}
			
			set
			{
				if (this.entityData.PrintedCopiesNo == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.PrintedCopiesNo, this.entityData.PrintedCopiesNo);
				this.entityData.PrintedCopiesNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.PrintedCopiesNo, this.entityData.PrintedCopiesNo);
				OnPropertyChanged("PrintedCopiesNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrintTranscriptFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrintTranscriptFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrintTranscriptFlag
		{
			get
			{
				return this.entityData.PrintTranscriptFlag; 
			}
			
			set
			{
				if (this.entityData.PrintTranscriptFlag == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.PrintTranscriptFlag, this.entityData.PrintTranscriptFlag);
				this.entityData.PrintTranscriptFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.PrintTranscriptFlag, this.entityData.PrintTranscriptFlag);
				OnPropertyChanged("PrintTranscriptFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrintCertificateFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrintCertificateFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrintCertificateFlag
		{
			get
			{
				return this.entityData.PrintCertificateFlag; 
			}
			
			set
			{
				if (this.entityData.PrintCertificateFlag == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.PrintCertificateFlag, this.entityData.PrintCertificateFlag);
				this.entityData.PrintCertificateFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.PrintCertificateFlag, this.entityData.PrintCertificateFlag);
				OnPropertyChanged("PrintCertificateFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CertificateTypeFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCertificateTypeFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CertificateTypeFlag
		{
			get
			{
				return this.entityData.CertificateTypeFlag; 
			}
			
			set
			{
				if (this.entityData.CertificateTypeFlag == value)
					return;
					
				OnColumnChanging(AlmPrintRequestColumn.CertificateTypeFlag, this.entityData.CertificateTypeFlag);
				this.entityData.CertificateTypeFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AlmPrintRequestColumn.CertificateTypeFlag, this.entityData.CertificateTypeFlag);
				OnPropertyChanged("CertificateTypeFlag");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ALM_PRINT_REQUEST"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ALM_PRINT_REQUEST_ID", "REQUEST_DATE", "PRINT_DATE", "REQUIRED_COPIES_NO", "PRINTED_COPIES_NO", "ED_STUD_ID", "PRINT_TRANSCRIPT_FLAG", "PRINT_CERTIFICATE_FLAG", "CERTIFICATE_TYPE_FLAG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AlmPrintRequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AlmPrintRequest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AlmPrintRequest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AlmPrintRequest);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AlmPrintRequest Entity 
		///</summary>
		protected virtual AlmPrintRequest Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AlmPrintRequest copy = new AlmPrintRequest();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AlmPrintRequestId = this.AlmPrintRequestId;
					copy.OriginalAlmPrintRequestId = this.OriginalAlmPrintRequestId;
				copy.RequestDate = this.RequestDate;
				copy.PrintDate = this.PrintDate;
				copy.RequiredCopiesNo = this.RequiredCopiesNo;
				copy.PrintedCopiesNo = this.PrintedCopiesNo;
				copy.EdStudId = this.EdStudId;
				copy.PrintTranscriptFlag = this.PrintTranscriptFlag;
				copy.PrintCertificateFlag = this.PrintCertificateFlag;
				copy.CertificateTypeFlag = this.CertificateTypeFlag;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AlmPrintRequest Entity 
		///</summary>
		public virtual AlmPrintRequest Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AlmPrintRequest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AlmPrintRequest DeepCopy()
		{
			return EntityHelper.Clone<AlmPrintRequest>(this as AlmPrintRequest);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AlmPrintRequestEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AlmPrintRequestEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AlmPrintRequestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AlmPrintRequestColumn column)
		{
			switch(column)
			{
					case AlmPrintRequestColumn.AlmPrintRequestId:
					return entityData.AlmPrintRequestId != _originalData.AlmPrintRequestId;
					case AlmPrintRequestColumn.RequestDate:
					return entityData.RequestDate != _originalData.RequestDate;
					case AlmPrintRequestColumn.PrintDate:
					return entityData.PrintDate != _originalData.PrintDate;
					case AlmPrintRequestColumn.RequiredCopiesNo:
					return entityData.RequiredCopiesNo != _originalData.RequiredCopiesNo;
					case AlmPrintRequestColumn.PrintedCopiesNo:
					return entityData.PrintedCopiesNo != _originalData.PrintedCopiesNo;
					case AlmPrintRequestColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case AlmPrintRequestColumn.PrintTranscriptFlag:
					return entityData.PrintTranscriptFlag != _originalData.PrintTranscriptFlag;
					case AlmPrintRequestColumn.PrintCertificateFlag:
					return entityData.PrintCertificateFlag != _originalData.PrintCertificateFlag;
					case AlmPrintRequestColumn.CertificateTypeFlag:
					return entityData.CertificateTypeFlag != _originalData.CertificateTypeFlag;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AlmPrintRequestColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AlmPrintRequestId != _originalData.AlmPrintRequestId;
			result = result || entityData.RequestDate != _originalData.RequestDate;
			result = result || entityData.PrintDate != _originalData.PrintDate;
			result = result || entityData.RequiredCopiesNo != _originalData.RequiredCopiesNo;
			result = result || entityData.PrintedCopiesNo != _originalData.PrintedCopiesNo;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.PrintTranscriptFlag != _originalData.PrintTranscriptFlag;
			result = result || entityData.PrintCertificateFlag != _originalData.PrintCertificateFlag;
			result = result || entityData.CertificateTypeFlag != _originalData.CertificateTypeFlag;
			return result;
		}	
		
		///<summary>
		///  Returns a AlmPrintRequest Entity with the original data.
		///</summary>
		public AlmPrintRequest GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAlmPrintRequest(
				_originalData.AlmPrintRequestId,
				_originalData.RequestDate,
				_originalData.PrintDate,
				_originalData.RequiredCopiesNo,
				_originalData.PrintedCopiesNo,
				_originalData.EdStudId,
				_originalData.PrintTranscriptFlag,
				_originalData.PrintCertificateFlag,
				_originalData.CertificateTypeFlag
				);
				
			return (AlmPrintRequest)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AlmPrintRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AlmPrintRequestBase)
				return ValueEquals(this, (AlmPrintRequestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AlmPrintRequestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AlmPrintRequestId.GetHashCode() ^ 
					((this.RequestDate == null) ? string.Empty : this.RequestDate.ToString()).GetHashCode() ^ 
					((this.PrintDate == null) ? string.Empty : this.PrintDate.ToString()).GetHashCode() ^ 
					((this.RequiredCopiesNo == null) ? string.Empty : this.RequiredCopiesNo.ToString()).GetHashCode() ^ 
					((this.PrintedCopiesNo == null) ? string.Empty : this.PrintedCopiesNo.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.PrintTranscriptFlag == null) ? string.Empty : this.PrintTranscriptFlag.ToString()).GetHashCode() ^ 
					((this.PrintCertificateFlag == null) ? string.Empty : this.PrintCertificateFlag.ToString()).GetHashCode() ^ 
					((this.CertificateTypeFlag == null) ? string.Empty : this.CertificateTypeFlag.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AlmPrintRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AlmPrintRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AlmPrintRequestBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AlmPrintRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AlmPrintRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AlmPrintRequestBase Object1, AlmPrintRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AlmPrintRequestId != Object2.AlmPrintRequestId)
				equal = false;
			if ( Object1.RequestDate != null && Object2.RequestDate != null )
			{
				if (Object1.RequestDate != Object2.RequestDate)
					equal = false;
			}
			else if (Object1.RequestDate == null ^ Object2.RequestDate == null )
			{
				equal = false;
			}
			if ( Object1.PrintDate != null && Object2.PrintDate != null )
			{
				if (Object1.PrintDate != Object2.PrintDate)
					equal = false;
			}
			else if (Object1.PrintDate == null ^ Object2.PrintDate == null )
			{
				equal = false;
			}
			if ( Object1.RequiredCopiesNo != null && Object2.RequiredCopiesNo != null )
			{
				if (Object1.RequiredCopiesNo != Object2.RequiredCopiesNo)
					equal = false;
			}
			else if (Object1.RequiredCopiesNo == null ^ Object2.RequiredCopiesNo == null )
			{
				equal = false;
			}
			if ( Object1.PrintedCopiesNo != null && Object2.PrintedCopiesNo != null )
			{
				if (Object1.PrintedCopiesNo != Object2.PrintedCopiesNo)
					equal = false;
			}
			else if (Object1.PrintedCopiesNo == null ^ Object2.PrintedCopiesNo == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.PrintTranscriptFlag != null && Object2.PrintTranscriptFlag != null )
			{
				if (Object1.PrintTranscriptFlag != Object2.PrintTranscriptFlag)
					equal = false;
			}
			else if (Object1.PrintTranscriptFlag == null ^ Object2.PrintTranscriptFlag == null )
			{
				equal = false;
			}
			if ( Object1.PrintCertificateFlag != null && Object2.PrintCertificateFlag != null )
			{
				if (Object1.PrintCertificateFlag != Object2.PrintCertificateFlag)
					equal = false;
			}
			else if (Object1.PrintCertificateFlag == null ^ Object2.PrintCertificateFlag == null )
			{
				equal = false;
			}
			if ( Object1.CertificateTypeFlag != null && Object2.CertificateTypeFlag != null )
			{
				if (Object1.CertificateTypeFlag != Object2.CertificateTypeFlag)
					equal = false;
			}
			else if (Object1.CertificateTypeFlag == null ^ Object2.CertificateTypeFlag == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AlmPrintRequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AlmPrintRequestComparer GetComparer()
        {
            return new AlmPrintRequestComparer();
        }
        */

        // Comparer delegates back to AlmPrintRequest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AlmPrintRequest rhs, AlmPrintRequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case AlmPrintRequestColumn.AlmPrintRequestId:
            		return this.AlmPrintRequestId.CompareTo(rhs.AlmPrintRequestId);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.RequestDate:
            		return this.RequestDate.Value.CompareTo(rhs.RequestDate.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.PrintDate:
            		return this.PrintDate.Value.CompareTo(rhs.PrintDate.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.RequiredCopiesNo:
            		return this.RequiredCopiesNo.Value.CompareTo(rhs.RequiredCopiesNo.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.PrintedCopiesNo:
            		return this.PrintedCopiesNo.Value.CompareTo(rhs.PrintedCopiesNo.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.PrintTranscriptFlag:
            		return this.PrintTranscriptFlag.Value.CompareTo(rhs.PrintTranscriptFlag.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.PrintCertificateFlag:
            		return this.PrintCertificateFlag.Value.CompareTo(rhs.PrintCertificateFlag.Value);
            		
            		                 
            	
            	
            	case AlmPrintRequestColumn.CertificateTypeFlag:
            		return this.CertificateTypeFlag.Value.CompareTo(rhs.CertificateTypeFlag.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AlmPrintRequestKey> Members
		
		// member variable for the EntityId property
		private AlmPrintRequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AlmPrintRequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AlmPrintRequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AlmPrintRequest")
					.Append("|").Append( this.AlmPrintRequestId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- AlmPrintRequestId: {0}{9}- RequestDate: {1}{9}- PrintDate: {2}{9}- RequiredCopiesNo: {3}{9}- PrintedCopiesNo: {4}{9}- EdStudId: {5}{9}- PrintTranscriptFlag: {6}{9}- PrintCertificateFlag: {7}{9}- CertificateTypeFlag: {8}{9}{11}", 
				this.AlmPrintRequestId,
				(this.RequestDate == null) ? string.Empty : this.RequestDate.ToString(),
				(this.PrintDate == null) ? string.Empty : this.PrintDate.ToString(),
				(this.RequiredCopiesNo == null) ? string.Empty : this.RequiredCopiesNo.ToString(),
				(this.PrintedCopiesNo == null) ? string.Empty : this.PrintedCopiesNo.ToString(),
				this.EdStudId,
				(this.PrintTranscriptFlag == null) ? string.Empty : this.PrintTranscriptFlag.ToString(),
				(this.PrintCertificateFlag == null) ? string.Empty : this.PrintCertificateFlag.ToString(),
				(this.CertificateTypeFlag == null) ? string.Empty : this.CertificateTypeFlag.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ALM_PRINT_REQUEST' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AlmPrintRequestEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ALM_PRINT_REQUEST_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ALM_PRINT_REQUEST"</remarks>
		public System.Decimal AlmPrintRequestId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAlmPrintRequestId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// REQUEST_DATE : 
		/// </summary>
		public System.DateTime?		  RequestDate = null;
		
		/// <summary>
		/// PRINT_DATE : 
		/// </summary>
		public System.DateTime?		  PrintDate = null;
		
		/// <summary>
		/// REQUIRED_COPIES_NO : 
		/// </summary>
		public System.Int32?		  RequiredCopiesNo = null;
		
		/// <summary>
		/// PRINTED_COPIES_NO : 
		/// </summary>
		public System.Int32?		  PrintedCopiesNo = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// PRINT_TRANSCRIPT_FLAG : 
		/// </summary>
		public System.Decimal?		  PrintTranscriptFlag = null;
		
		/// <summary>
		/// PRINT_CERTIFICATE_FLAG : 
		/// </summary>
		public System.Decimal?		  PrintCertificateFlag = null;
		
		/// <summary>
		/// CERTIFICATE_TYPE_FLAG : 
		/// </summary>
		public System.Decimal?		  CertificateTypeFlag = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AlmPrintRequestEntityData _tmp = new AlmPrintRequestEntityData();
						
			_tmp.AlmPrintRequestId = this.AlmPrintRequestId;
			_tmp.OriginalAlmPrintRequestId = this.OriginalAlmPrintRequestId;
			
			_tmp.RequestDate = this.RequestDate;
			_tmp.PrintDate = this.PrintDate;
			_tmp.RequiredCopiesNo = this.RequiredCopiesNo;
			_tmp.PrintedCopiesNo = this.PrintedCopiesNo;
			_tmp.EdStudId = this.EdStudId;
			_tmp.PrintTranscriptFlag = this.PrintTranscriptFlag;
			_tmp.PrintCertificateFlag = this.PrintCertificateFlag;
			_tmp.CertificateTypeFlag = this.CertificateTypeFlag;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AlmPrintRequestEntityData _tmp = new AlmPrintRequestEntityData();
						
			_tmp.AlmPrintRequestId = this.AlmPrintRequestId;
			_tmp.OriginalAlmPrintRequestId = this.OriginalAlmPrintRequestId;
			
			_tmp.RequestDate = this.RequestDate;
			_tmp.PrintDate = this.PrintDate;
			_tmp.RequiredCopiesNo = this.RequiredCopiesNo;
			_tmp.PrintedCopiesNo = this.PrintedCopiesNo;
			_tmp.EdStudId = this.EdStudId;
			_tmp.PrintTranscriptFlag = this.PrintTranscriptFlag;
			_tmp.PrintCertificateFlag = this.PrintCertificateFlag;
			_tmp.CertificateTypeFlag = this.CertificateTypeFlag;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AlmPrintRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AlmPrintRequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AlmPrintRequestColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AlmPrintRequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AlmPrintRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AlmPrintRequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AlmPrintRequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AlmPrintRequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AlmPrintRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AlmPrintRequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AlmPrintRequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AlmPrintRequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AlmPrintRequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AlmPrintRequest"/> object.
	/// </remarks>
	public class AlmPrintRequestEventArgs : System.EventArgs
	{
		private AlmPrintRequestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AlmPrintRequestEventArgs class.
		///</summary>
		public AlmPrintRequestEventArgs(AlmPrintRequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AlmPrintRequestEventArgs class.
		///</summary>
		public AlmPrintRequestEventArgs(AlmPrintRequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AlmPrintRequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AlmPrintRequestColumn" />
		public AlmPrintRequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AlmPrintRequest related events.
	///</summary>
	public delegate void AlmPrintRequestEventHandler(object sender, AlmPrintRequestEventArgs e);
	
	#region AlmPrintRequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AlmPrintRequestComparer : System.Collections.Generic.IComparer<AlmPrintRequest>
	{
		AlmPrintRequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AlmPrintRequestComparer"/> class.
        /// </summary>
		public AlmPrintRequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AlmPrintRequestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AlmPrintRequestComparer(AlmPrintRequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AlmPrintRequest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AlmPrintRequest"/> to compare.</param>
        /// <param name="b">The second <c>AlmPrintRequest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AlmPrintRequest a, AlmPrintRequest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AlmPrintRequest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AlmPrintRequest a, AlmPrintRequest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AlmPrintRequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AlmPrintRequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AlmPrintRequest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AlmPrintRequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestKey class.
		/// </summary>
		public AlmPrintRequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestKey class.
		/// </summary>
		public AlmPrintRequestKey(AlmPrintRequestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AlmPrintRequestId = entity.AlmPrintRequestId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AlmPrintRequestKey class.
		/// </summary>
		public AlmPrintRequestKey(System.Decimal _almPrintRequestId)
		{
			#region Init Properties

			this.AlmPrintRequestId = _almPrintRequestId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AlmPrintRequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AlmPrintRequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AlmPrintRequestId property
		private System.Decimal _almPrintRequestId;
		
		/// <summary>
		/// Gets or sets the AlmPrintRequestId property.
		/// </summary>
		public System.Decimal AlmPrintRequestId
		{
			get { return _almPrintRequestId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AlmPrintRequestId = value;
				
				_almPrintRequestId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AlmPrintRequestId = ( values["AlmPrintRequestId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AlmPrintRequestId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AlmPrintRequestId", AlmPrintRequestId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AlmPrintRequestId: {0}{1}",
								AlmPrintRequestId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AlmPrintRequestColumn Enum
	
	/// <summary>
	/// Enumerate the AlmPrintRequest columns.
	/// </summary>
	[Serializable]
	public enum AlmPrintRequestColumn : int
	{
		/// <summary>
		/// AlmPrintRequestId : 
		/// </summary>
		[EnumTextValue("ALM_PRINT_REQUEST_ID")]
		[ColumnEnum("ALM_PRINT_REQUEST_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AlmPrintRequestId = 1,
		/// <summary>
		/// RequestDate : 
		/// </summary>
		[EnumTextValue("REQUEST_DATE")]
		[ColumnEnum("REQUEST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequestDate = 2,
		/// <summary>
		/// PrintDate : 
		/// </summary>
		[EnumTextValue("PRINT_DATE")]
		[ColumnEnum("PRINT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PrintDate = 3,
		/// <summary>
		/// RequiredCopiesNo : 
		/// </summary>
		[EnumTextValue("REQUIRED_COPIES_NO")]
		[ColumnEnum("REQUIRED_COPIES_NO", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RequiredCopiesNo = 4,
		/// <summary>
		/// PrintedCopiesNo : 
		/// </summary>
		[EnumTextValue("PRINTED_COPIES_NO")]
		[ColumnEnum("PRINTED_COPIES_NO", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PrintedCopiesNo = 5,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 6,
		/// <summary>
		/// PrintTranscriptFlag : 
		/// </summary>
		[EnumTextValue("PRINT_TRANSCRIPT_FLAG")]
		[ColumnEnum("PRINT_TRANSCRIPT_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrintTranscriptFlag = 7,
		/// <summary>
		/// PrintCertificateFlag : 
		/// </summary>
		[EnumTextValue("PRINT_CERTIFICATE_FLAG")]
		[ColumnEnum("PRINT_CERTIFICATE_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrintCertificateFlag = 8,
		/// <summary>
		/// CertificateTypeFlag : 
		/// </summary>
		[EnumTextValue("CERTIFICATE_TYPE_FLAG")]
		[ColumnEnum("CERTIFICATE_TYPE_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CertificateTypeFlag = 9
	}//End enum

	#endregion AlmPrintRequestColumn Enum

} // end namespace
