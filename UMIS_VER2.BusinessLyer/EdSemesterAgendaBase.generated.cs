
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdSemesterAgenda.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_SEMESTER_AGENDA' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdSemesterAgendaBase : EntityBase, IEdSemesterAgenda, IEntityId<EdSemesterAgendaKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdSemesterAgendaEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdSemesterAgendaEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdSemesterAgendaEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdSemesterAgenda> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemesterAgendaEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemesterAgendaEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdSemesterAgendaBase"/> instance.
		///</summary>
		public EdSemesterAgendaBase()
		{
			this.entityData = new EdSemesterAgendaEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdSemesterAgendaBase"/> instance.
		///</summary>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_edSemesterOpenId"></param>
		///<param name="_admOpenAcadSemesterId">Ejust</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_descrEn"></param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_emailFlg"></param>
		///<param name="_empFlg"></param>
		///<param name="_stfFlg"></param>
		///<param name="_studFlg">يعرض النشاط فى فيو طالب</param>
		///<param name="_onlineFlg">يسمح للطلاب التسجيل اونلاين</param>
		///<param name="_toDateAct"></param>
		///<param name="_showFlg"></param>
		///<param name="_newComrFlg"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_audtNote"></param>
		///<param name="_notes">Responsible</param>
		///<param name="_feeRefundPrcnt">نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر</param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		public EdSemesterAgendaBase(System.Decimal _edSemesterAgendaId, System.Decimal? _edSemesterOpenId, 
			System.Decimal? _admOpenAcadSemesterId, System.Decimal _edCodeSemActvityId, System.DateTime? _fromDate, 
			System.DateTime? _toDate, System.String _descrEn, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _emailFlg, System.Decimal? _empFlg, System.Decimal? _stfFlg, 
			System.Decimal? _studFlg, System.Decimal _onlineFlg, System.DateTime? _toDateAct, 
			System.Decimal? _showFlg, System.Boolean? _newComrFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId, System.String _audtNote, System.String _notes, 
			System.Decimal? _feeRefundPrcnt, System.Decimal? _asCodeDegreeId)
		{
			this.entityData = new EdSemesterAgendaEntityData();
			this.backupData = null;

			this.EdSemesterAgendaId = _edSemesterAgendaId;
			this.EdSemesterOpenId = _edSemesterOpenId;
			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			this.EdCodeSemActvityId = _edCodeSemActvityId;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.DescrEn = _descrEn;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.EmailFlg = _emailFlg;
			this.EmpFlg = _empFlg;
			this.StfFlg = _stfFlg;
			this.StudFlg = _studFlg;
			this.OnlineFlg = _onlineFlg;
			this.ToDateAct = _toDateAct;
			this.ShowFlg = _showFlg;
			this.NewComrFlg = _newComrFlg;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
			this.AudtNote = _audtNote;
			this.Notes = _notes;
			this.FeeRefundPrcnt = _feeRefundPrcnt;
			this.AsCodeDegreeId = _asCodeDegreeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdSemesterAgenda"/> instance.
		///</summary>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_edSemesterOpenId"></param>
		///<param name="_admOpenAcadSemesterId">Ejust</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_descrEn"></param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_emailFlg"></param>
		///<param name="_empFlg"></param>
		///<param name="_stfFlg"></param>
		///<param name="_studFlg">يعرض النشاط فى فيو طالب</param>
		///<param name="_onlineFlg">يسمح للطلاب التسجيل اونلاين</param>
		///<param name="_toDateAct"></param>
		///<param name="_showFlg"></param>
		///<param name="_newComrFlg"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_audtNote"></param>
		///<param name="_notes">Responsible</param>
		///<param name="_feeRefundPrcnt">نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر</param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		public static EdSemesterAgenda CreateEdSemesterAgenda(System.Decimal _edSemesterAgendaId, System.Decimal? _edSemesterOpenId, 
			System.Decimal? _admOpenAcadSemesterId, System.Decimal _edCodeSemActvityId, System.DateTime? _fromDate, 
			System.DateTime? _toDate, System.String _descrEn, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _emailFlg, System.Decimal? _empFlg, System.Decimal? _stfFlg, 
			System.Decimal? _studFlg, System.Decimal _onlineFlg, System.DateTime? _toDateAct, 
			System.Decimal? _showFlg, System.Boolean? _newComrFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId, System.String _audtNote, System.String _notes, 
			System.Decimal? _feeRefundPrcnt, System.Decimal? _asCodeDegreeId)
		{
			EdSemesterAgenda newEdSemesterAgenda = new EdSemesterAgenda();
			newEdSemesterAgenda.EdSemesterAgendaId = _edSemesterAgendaId;
			newEdSemesterAgenda.EdSemesterOpenId = _edSemesterOpenId;
			newEdSemesterAgenda.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			newEdSemesterAgenda.EdCodeSemActvityId = _edCodeSemActvityId;
			newEdSemesterAgenda.FromDate = _fromDate;
			newEdSemesterAgenda.ToDate = _toDate;
			newEdSemesterAgenda.DescrEn = _descrEn;
			newEdSemesterAgenda.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newEdSemesterAgenda.EmailFlg = _emailFlg;
			newEdSemesterAgenda.EmpFlg = _empFlg;
			newEdSemesterAgenda.StfFlg = _stfFlg;
			newEdSemesterAgenda.StudFlg = _studFlg;
			newEdSemesterAgenda.OnlineFlg = _onlineFlg;
			newEdSemesterAgenda.ToDateAct = _toDateAct;
			newEdSemesterAgenda.ShowFlg = _showFlg;
			newEdSemesterAgenda.NewComrFlg = _newComrFlg;
			newEdSemesterAgenda.LastDate = _lastDate;
			newEdSemesterAgenda.SeUserId = _seUserId;
			newEdSemesterAgenda.AudtNote = _audtNote;
			newEdSemesterAgenda.Notes = _notes;
			newEdSemesterAgenda.FeeRefundPrcnt = _feeRefundPrcnt;
			newEdSemesterAgenda.AsCodeDegreeId = _asCodeDegreeId;
			return newEdSemesterAgenda;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdSemesterAgendaId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdSemesterAgendaId
		{
			get
			{
				return this.entityData.EdSemesterAgendaId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterAgendaId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				this.entityData.EdSemesterAgendaId = value;
				this.EntityId.EdSemesterAgendaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				OnPropertyChanged("EdSemesterAgendaId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_SEMESTER_AGENDA_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_SEMESTER_AGENDA_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdSemesterAgendaId
		{
			get { return this.entityData.OriginalEdSemesterAgendaId; }
			set { this.entityData.OriginalEdSemesterAgendaId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdSemesterOpenId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdSemesterOpenIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdSemesterOpenId
		{
			get
			{
				return this.entityData.EdSemesterOpenId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterOpenId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.EdSemesterOpenId, this.entityData.EdSemesterOpenId);
				this.entityData.EdSemesterOpenId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.EdSemesterOpenId, this.entityData.EdSemesterOpenId);
				OnPropertyChanged("EdSemesterOpenId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmOpenAcadSemesterId property. 
		///		Ejust
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmOpenAcadSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Ejust"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmOpenAcadSemesterId
		{
			get
			{
				return this.entityData.AdmOpenAcadSemesterId; 
			}
			
			set
			{
				if (this.entityData.AdmOpenAcadSemesterId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				this.entityData.AdmOpenAcadSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				OnPropertyChanged("AdmOpenAcadSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemActvityId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemActvityId
		{
			get
			{
				return this.entityData.EdCodeSemActvityId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemActvityId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				this.entityData.EdCodeSemActvityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				OnPropertyChanged("EdCodeSemActvityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		UG/PG
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"UG/PG"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEmailFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EmailFlg
		{
			get
			{
				return this.entityData.EmailFlg; 
			}
			
			set
			{
				if (this.entityData.EmailFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.EmailFlg, this.entityData.EmailFlg);
				this.entityData.EmailFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.EmailFlg, this.entityData.EmailFlg);
				OnPropertyChanged("EmailFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmpFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEmpFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EmpFlg
		{
			get
			{
				return this.entityData.EmpFlg; 
			}
			
			set
			{
				if (this.entityData.EmpFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.EmpFlg, this.entityData.EmpFlg);
				this.entityData.EmpFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.EmpFlg, this.entityData.EmpFlg);
				OnPropertyChanged("EmpFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StfFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStfFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StfFlg
		{
			get
			{
				return this.entityData.StfFlg; 
			}
			
			set
			{
				if (this.entityData.StfFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.StfFlg, this.entityData.StfFlg);
				this.entityData.StfFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.StfFlg, this.entityData.StfFlg);
				OnPropertyChanged("StfFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFlg property. 
		///		يعرض النشاط فى فيو طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يعرض النشاط فى فيو طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudFlg
		{
			get
			{
				return this.entityData.StudFlg; 
			}
			
			set
			{
				if (this.entityData.StudFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.StudFlg, this.entityData.StudFlg);
				this.entityData.StudFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.StudFlg, this.entityData.StudFlg);
				OnPropertyChanged("StudFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		يسمح للطلاب التسجيل اونلاين
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يسمح للطلاب التسجيل اونلاين"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDateAct property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateActNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDateAct
		{
			get
			{
				return this.entityData.ToDateAct; 
			}
			
			set
			{
				if (this.entityData.ToDateAct == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.ToDateAct, this.entityData.ToDateAct);
				this.entityData.ToDateAct = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.ToDateAct, this.entityData.ToDateAct);
				OnPropertyChanged("ToDateAct");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsShowFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ShowFlg
		{
			get
			{
				return this.entityData.ShowFlg; 
			}
			
			set
			{
				if (this.entityData.ShowFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.ShowFlg, this.entityData.ShowFlg);
				this.entityData.ShowFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.ShowFlg, this.entityData.ShowFlg);
				OnPropertyChanged("ShowFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewComrFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsNewComrFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? NewComrFlg
		{
			get
			{
				return this.entityData.NewComrFlg; 
			}
			
			set
			{
				if (this.entityData.NewComrFlg == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.NewComrFlg, this.entityData.NewComrFlg);
				this.entityData.NewComrFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.NewComrFlg, this.entityData.NewComrFlg);
				OnPropertyChanged("NewComrFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AudtNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String AudtNote
		{
			get
			{
				return this.entityData.AudtNote; 
			}
			
			set
			{
				if (this.entityData.AudtNote == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.AudtNote, this.entityData.AudtNote);
				this.entityData.AudtNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.AudtNote, this.entityData.AudtNote);
				OnPropertyChanged("AudtNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		Responsible
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Responsible"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefundPrcnt property. 
		///		نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeRefundPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeRefundPrcnt
		{
			get
			{
				return this.entityData.FeeRefundPrcnt; 
			}
			
			set
			{
				if (this.entityData.FeeRefundPrcnt == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.FeeRefundPrcnt, this.entityData.FeeRefundPrcnt);
				this.entityData.FeeRefundPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.FeeRefundPrcnt, this.entityData.FeeRefundPrcnt);
				OnPropertyChanged("FeeRefundPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdSemesterAgendaColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterAgendaColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return entityData.AdmOpenAcadSemesterIdSource; }
            set { entityData.AdmOpenAcadSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return entityData.EdCodeSemActvityIdSource; }
            set { entityData.EdCodeSemActvityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterOpen"/>.
		/// </summary>
		/// <value>The source EdSemesterOpen for EdSemesterOpenId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdSemesterOpen EdSemesterOpenIdSource
      	{
            get { return entityData.EdSemesterOpenIdSource; }
            set { entityData.EdSemesterOpenIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdSemAgendaForm objects
		///	which are related to this object through the relation FK_ED_SEM_AGENDA_FORM_ED_SEMESTER_AGENDA
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemAgendaForm> EdSemAgendaFormCollection
		{
			get { return entityData.EdSemAgendaFormCollection; }
			set { entityData.EdSemAgendaFormCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemAgendaDtl objects
		///	which are related to this object through the relation FK_ED_SEM_AGENDA_DTL_ED_SEMESTER_AGENDA
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemAgendaDtl> EdSemAgendaDtlCollection
		{
			get { return entityData.EdSemAgendaDtlCollection; }
			set { entityData.EdSemAgendaDtlCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AudtNote", "Audt Note", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_SEMESTER_AGENDA"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_SEMESTER_AGENDA_ID", "ED_SEMESTER_OPEN_ID", "ADM_OPEN_ACAD_SEMESTER_ID", "ED_CODE_SEM_ACTVITY_ID", "FROM_DATE", "TO_DATE", "DESCR_EN", "AS_CODE_DEGREE_CLASS_ID", "EMAIL_FLG", "EMP_FLG", "STF_FLG", "STUD_FLG", "ONLINE_FLG", "TO_DATE_ACT", "SHOW_FLG", "NEW_COMR_FLG", "LAST_DATE", "SE_USER_ID", "AUDT_NOTE", "NOTES", "FEE_REFUND_PRCNT", "AS_CODE_DEGREE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdSemesterAgendaEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdSemesterAgenda) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdSemesterAgenda>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdSemesterAgenda);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdSemesterAgenda Entity 
		///</summary>
		protected virtual EdSemesterAgenda Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdSemesterAgenda copy = new EdSemesterAgenda();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdSemesterAgendaId = this.EdSemesterAgendaId;
					copy.OriginalEdSemesterAgendaId = this.OriginalEdSemesterAgendaId;
				copy.EdSemesterOpenId = this.EdSemesterOpenId;
				copy.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
				copy.EdCodeSemActvityId = this.EdCodeSemActvityId;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.DescrEn = this.DescrEn;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.EmailFlg = this.EmailFlg;
				copy.EmpFlg = this.EmpFlg;
				copy.StfFlg = this.StfFlg;
				copy.StudFlg = this.StudFlg;
				copy.OnlineFlg = this.OnlineFlg;
				copy.ToDateAct = this.ToDateAct;
				copy.ShowFlg = this.ShowFlg;
				copy.NewComrFlg = this.NewComrFlg;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
				copy.AudtNote = this.AudtNote;
				copy.Notes = this.Notes;
				copy.FeeRefundPrcnt = this.FeeRefundPrcnt;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
			
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				copy.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				copy.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				copy.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				copy.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EdSemesterOpenIdSource != null && existingCopies.Contains(this.EdSemesterOpenIdSource))
				copy.EdSemesterOpenIdSource = existingCopies[this.EdSemesterOpenIdSource] as EdSemesterOpen;
			else
				copy.EdSemesterOpenIdSource = MakeCopyOf(this.EdSemesterOpenIdSource, existingCopies) as EdSemesterOpen;
		
			//deep copy nested objects
			copy.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection, existingCopies); 
			copy.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdSemesterAgenda Entity 
		///</summary>
		public virtual EdSemesterAgenda Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdSemesterAgenda Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdSemesterAgenda DeepCopy()
		{
			return EntityHelper.Clone<EdSemesterAgenda>(this as EdSemesterAgenda);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdSemesterAgendaEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdSemesterAgendaEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdSemesterAgendaEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdSemesterAgendaColumn column)
		{
			switch(column)
			{
					case EdSemesterAgendaColumn.EdSemesterAgendaId:
					return entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
					case EdSemesterAgendaColumn.EdSemesterOpenId:
					return entityData.EdSemesterOpenId != _originalData.EdSemesterOpenId;
					case EdSemesterAgendaColumn.AdmOpenAcadSemesterId:
					return entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
					case EdSemesterAgendaColumn.EdCodeSemActvityId:
					return entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
					case EdSemesterAgendaColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case EdSemesterAgendaColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case EdSemesterAgendaColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdSemesterAgendaColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case EdSemesterAgendaColumn.EmailFlg:
					return entityData.EmailFlg != _originalData.EmailFlg;
					case EdSemesterAgendaColumn.EmpFlg:
					return entityData.EmpFlg != _originalData.EmpFlg;
					case EdSemesterAgendaColumn.StfFlg:
					return entityData.StfFlg != _originalData.StfFlg;
					case EdSemesterAgendaColumn.StudFlg:
					return entityData.StudFlg != _originalData.StudFlg;
					case EdSemesterAgendaColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case EdSemesterAgendaColumn.ToDateAct:
					return entityData.ToDateAct != _originalData.ToDateAct;
					case EdSemesterAgendaColumn.ShowFlg:
					return entityData.ShowFlg != _originalData.ShowFlg;
					case EdSemesterAgendaColumn.NewComrFlg:
					return entityData.NewComrFlg != _originalData.NewComrFlg;
					case EdSemesterAgendaColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdSemesterAgendaColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdSemesterAgendaColumn.AudtNote:
					return entityData.AudtNote != _originalData.AudtNote;
					case EdSemesterAgendaColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdSemesterAgendaColumn.FeeRefundPrcnt:
					return entityData.FeeRefundPrcnt != _originalData.FeeRefundPrcnt;
					case EdSemesterAgendaColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdSemesterAgendaColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
			result = result || entityData.EdSemesterOpenId != _originalData.EdSemesterOpenId;
			result = result || entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
			result = result || entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.EmailFlg != _originalData.EmailFlg;
			result = result || entityData.EmpFlg != _originalData.EmpFlg;
			result = result || entityData.StfFlg != _originalData.StfFlg;
			result = result || entityData.StudFlg != _originalData.StudFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.ToDateAct != _originalData.ToDateAct;
			result = result || entityData.ShowFlg != _originalData.ShowFlg;
			result = result || entityData.NewComrFlg != _originalData.NewComrFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.AudtNote != _originalData.AudtNote;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.FeeRefundPrcnt != _originalData.FeeRefundPrcnt;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdSemesterAgenda Entity with the original data.
		///</summary>
		public EdSemesterAgenda GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdSemesterAgenda(
				_originalData.EdSemesterAgendaId,
				_originalData.EdSemesterOpenId,
				_originalData.AdmOpenAcadSemesterId,
				_originalData.EdCodeSemActvityId,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.DescrEn,
				_originalData.AsCodeDegreeClassId,
				_originalData.EmailFlg,
				_originalData.EmpFlg,
				_originalData.StfFlg,
				_originalData.StudFlg,
				_originalData.OnlineFlg,
				_originalData.ToDateAct,
				_originalData.ShowFlg,
				_originalData.NewComrFlg,
				_originalData.LastDate,
				_originalData.SeUserId,
				_originalData.AudtNote,
				_originalData.Notes,
				_originalData.FeeRefundPrcnt,
				_originalData.AsCodeDegreeId
				);
				
			return (EdSemesterAgenda)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdSemesterAgendaBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdSemesterAgendaBase)
				return ValueEquals(this, (EdSemesterAgendaBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdSemesterAgendaBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdSemesterAgendaId.GetHashCode() ^ 
					((this.EdSemesterOpenId == null) ? string.Empty : this.EdSemesterOpenId.ToString()).GetHashCode() ^ 
					((this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString()).GetHashCode() ^ 
					this.EdCodeSemActvityId.GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.EmailFlg == null) ? string.Empty : this.EmailFlg.ToString()).GetHashCode() ^ 
					((this.EmpFlg == null) ? string.Empty : this.EmpFlg.ToString()).GetHashCode() ^ 
					((this.StfFlg == null) ? string.Empty : this.StfFlg.ToString()).GetHashCode() ^ 
					((this.StudFlg == null) ? string.Empty : this.StudFlg.ToString()).GetHashCode() ^ 
					this.OnlineFlg.GetHashCode() ^ 
					((this.ToDateAct == null) ? string.Empty : this.ToDateAct.ToString()).GetHashCode() ^ 
					((this.ShowFlg == null) ? string.Empty : this.ShowFlg.ToString()).GetHashCode() ^ 
					((this.NewComrFlg == null) ? string.Empty : this.NewComrFlg.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.AudtNote == null) ? string.Empty : this.AudtNote.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.FeeRefundPrcnt == null) ? string.Empty : this.FeeRefundPrcnt.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdSemesterAgendaBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdSemesterAgendaBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdSemesterAgendaBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdSemesterAgendaBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdSemesterAgendaBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdSemesterAgendaBase Object1, EdSemesterAgendaBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdSemesterAgendaId != Object2.EdSemesterAgendaId)
				equal = false;
			if ( Object1.EdSemesterOpenId != null && Object2.EdSemesterOpenId != null )
			{
				if (Object1.EdSemesterOpenId != Object2.EdSemesterOpenId)
					equal = false;
			}
			else if (Object1.EdSemesterOpenId == null ^ Object2.EdSemesterOpenId == null )
			{
				equal = false;
			}
			if ( Object1.AdmOpenAcadSemesterId != null && Object2.AdmOpenAcadSemesterId != null )
			{
				if (Object1.AdmOpenAcadSemesterId != Object2.AdmOpenAcadSemesterId)
					equal = false;
			}
			else if (Object1.AdmOpenAcadSemesterId == null ^ Object2.AdmOpenAcadSemesterId == null )
			{
				equal = false;
			}
			if (Object1.EdCodeSemActvityId != Object2.EdCodeSemActvityId)
				equal = false;
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.EmailFlg != null && Object2.EmailFlg != null )
			{
				if (Object1.EmailFlg != Object2.EmailFlg)
					equal = false;
			}
			else if (Object1.EmailFlg == null ^ Object2.EmailFlg == null )
			{
				equal = false;
			}
			if ( Object1.EmpFlg != null && Object2.EmpFlg != null )
			{
				if (Object1.EmpFlg != Object2.EmpFlg)
					equal = false;
			}
			else if (Object1.EmpFlg == null ^ Object2.EmpFlg == null )
			{
				equal = false;
			}
			if ( Object1.StfFlg != null && Object2.StfFlg != null )
			{
				if (Object1.StfFlg != Object2.StfFlg)
					equal = false;
			}
			else if (Object1.StfFlg == null ^ Object2.StfFlg == null )
			{
				equal = false;
			}
			if ( Object1.StudFlg != null && Object2.StudFlg != null )
			{
				if (Object1.StudFlg != Object2.StudFlg)
					equal = false;
			}
			else if (Object1.StudFlg == null ^ Object2.StudFlg == null )
			{
				equal = false;
			}
			if (Object1.OnlineFlg != Object2.OnlineFlg)
				equal = false;
			if ( Object1.ToDateAct != null && Object2.ToDateAct != null )
			{
				if (Object1.ToDateAct != Object2.ToDateAct)
					equal = false;
			}
			else if (Object1.ToDateAct == null ^ Object2.ToDateAct == null )
			{
				equal = false;
			}
			if ( Object1.ShowFlg != null && Object2.ShowFlg != null )
			{
				if (Object1.ShowFlg != Object2.ShowFlg)
					equal = false;
			}
			else if (Object1.ShowFlg == null ^ Object2.ShowFlg == null )
			{
				equal = false;
			}
			if ( Object1.NewComrFlg != null && Object2.NewComrFlg != null )
			{
				if (Object1.NewComrFlg != Object2.NewComrFlg)
					equal = false;
			}
			else if (Object1.NewComrFlg == null ^ Object2.NewComrFlg == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.AudtNote != null && Object2.AudtNote != null )
			{
				if (Object1.AudtNote != Object2.AudtNote)
					equal = false;
			}
			else if (Object1.AudtNote == null ^ Object2.AudtNote == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.FeeRefundPrcnt != null && Object2.FeeRefundPrcnt != null )
			{
				if (Object1.FeeRefundPrcnt != Object2.FeeRefundPrcnt)
					equal = false;
			}
			else if (Object1.FeeRefundPrcnt == null ^ Object2.FeeRefundPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdSemesterAgendaBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdSemesterAgendaComparer GetComparer()
        {
            return new EdSemesterAgendaComparer();
        }
        */

        // Comparer delegates back to EdSemesterAgenda
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdSemesterAgenda rhs, EdSemesterAgendaColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdSemesterAgendaColumn.EdSemesterAgendaId:
            		return this.EdSemesterAgendaId.CompareTo(rhs.EdSemesterAgendaId);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.EdSemesterOpenId:
            		return this.EdSemesterOpenId.Value.CompareTo(rhs.EdSemesterOpenId.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.AdmOpenAcadSemesterId:
            		return this.AdmOpenAcadSemesterId.Value.CompareTo(rhs.AdmOpenAcadSemesterId.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.EdCodeSemActvityId:
            		return this.EdCodeSemActvityId.CompareTo(rhs.EdCodeSemActvityId);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.EmailFlg:
            		return this.EmailFlg.Value.CompareTo(rhs.EmailFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.EmpFlg:
            		return this.EmpFlg.Value.CompareTo(rhs.EmpFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.StfFlg:
            		return this.StfFlg.Value.CompareTo(rhs.StfFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.StudFlg:
            		return this.StudFlg.Value.CompareTo(rhs.StudFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.OnlineFlg:
            		return this.OnlineFlg.CompareTo(rhs.OnlineFlg);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.ToDateAct:
            		return this.ToDateAct.Value.CompareTo(rhs.ToDateAct.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.ShowFlg:
            		return this.ShowFlg.Value.CompareTo(rhs.ShowFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.NewComrFlg:
            		return this.NewComrFlg.Value.CompareTo(rhs.NewComrFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.AudtNote:
            		return this.AudtNote.CompareTo(rhs.AudtNote);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.FeeRefundPrcnt:
            		return this.FeeRefundPrcnt.Value.CompareTo(rhs.FeeRefundPrcnt.Value);
            		
            		                 
            	
            	
            	case EdSemesterAgendaColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdSemesterAgendaKey> Members
		
		// member variable for the EntityId property
		private EdSemesterAgendaKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdSemesterAgendaKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdSemesterAgendaKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdSemesterAgenda")
					.Append("|").Append( this.EdSemesterAgendaId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- EdSemesterAgendaId: {0}{22}- EdSemesterOpenId: {1}{22}- AdmOpenAcadSemesterId: {2}{22}- EdCodeSemActvityId: {3}{22}- FromDate: {4}{22}- ToDate: {5}{22}- DescrEn: {6}{22}- AsCodeDegreeClassId: {7}{22}- EmailFlg: {8}{22}- EmpFlg: {9}{22}- StfFlg: {10}{22}- StudFlg: {11}{22}- OnlineFlg: {12}{22}- ToDateAct: {13}{22}- ShowFlg: {14}{22}- NewComrFlg: {15}{22}- LastDate: {16}{22}- SeUserId: {17}{22}- AudtNote: {18}{22}- Notes: {19}{22}- FeeRefundPrcnt: {20}{22}- AsCodeDegreeId: {21}{22}{24}", 
				this.EdSemesterAgendaId,
				(this.EdSemesterOpenId == null) ? string.Empty : this.EdSemesterOpenId.ToString(),
				(this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString(),
				this.EdCodeSemActvityId,
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.EmailFlg == null) ? string.Empty : this.EmailFlg.ToString(),
				(this.EmpFlg == null) ? string.Empty : this.EmpFlg.ToString(),
				(this.StfFlg == null) ? string.Empty : this.StfFlg.ToString(),
				(this.StudFlg == null) ? string.Empty : this.StudFlg.ToString(),
				this.OnlineFlg,
				(this.ToDateAct == null) ? string.Empty : this.ToDateAct.ToString(),
				(this.ShowFlg == null) ? string.Empty : this.ShowFlg.ToString(),
				(this.NewComrFlg == null) ? string.Empty : this.NewComrFlg.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.AudtNote == null) ? string.Empty : this.AudtNote.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.FeeRefundPrcnt == null) ? string.Empty : this.FeeRefundPrcnt.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_SEMESTER_AGENDA' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdSemesterAgendaEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_SEMESTER_AGENDA_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_SEMESTER_AGENDA"</remarks>
		public System.Decimal EdSemesterAgendaId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdSemesterAgendaId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_SEMESTER_OPEN_ID : 
		/// </summary>
		public System.Decimal?		  EdSemesterOpenId = null;
		
		/// <summary>
		/// ADM_OPEN_ACAD_SEMESTER_ID : Ejust
		/// </summary>
		public System.Decimal?		  AdmOpenAcadSemesterId = null;
		
		/// <summary>
		/// ED_CODE_SEM_ACTVITY_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemActvityId = 0.0m;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : UG/PG
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// EMAIL_FLG : 
		/// </summary>
		public System.Decimal?		  EmailFlg = null;
		
		/// <summary>
		/// EMP_FLG : 
		/// </summary>
		public System.Decimal?		  EmpFlg = null;
		
		/// <summary>
		/// STF_FLG : 
		/// </summary>
		public System.Decimal?		  StfFlg = null;
		
		/// <summary>
		/// STUD_FLG : يعرض النشاط فى فيو طالب
		/// </summary>
		public System.Decimal?		  StudFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : يسمح للطلاب التسجيل اونلاين
		/// </summary>
		public System.Decimal		  OnlineFlg = 0.0m;
		
		/// <summary>
		/// TO_DATE_ACT : 
		/// </summary>
		public System.DateTime?		  ToDateAct = null;
		
		/// <summary>
		/// SHOW_FLG : 
		/// </summary>
		public System.Decimal?		  ShowFlg = null;
		
		/// <summary>
		/// NEW_COMR_FLG : 
		/// </summary>
		public System.Boolean?		  NewComrFlg = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// AUDT_NOTE : 
		/// </summary>
		public System.String		  AudtNote = null;
		
		/// <summary>
		/// NOTES : Responsible
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// FEE_REFUND_PRCNT : نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر
		/// </summary>
		public System.Decimal?		  FeeRefundPrcnt = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : مسلسل الدرجة العلمية
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmOpenAcadSemester _admOpenAcadSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return this._admOpenAcadSemesterIdSource; }
            set { this._admOpenAcadSemesterIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EdCodeSemActvity _edCodeSemActvityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return this._edCodeSemActvityIdSource; }
            set { this._edCodeSemActvityIdSource = value; }
      	}
		private EdSemesterOpen _edSemesterOpenIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterOpen"/>.
		/// </summary>
		/// <value>The source EdSemesterOpen for EdSemesterOpenId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdSemesterOpen EdSemesterOpenIdSource
      	{
            get { return this._edSemesterOpenIdSource; }
            set { this._edSemesterOpenIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdSemAgendaFormCollection
		
		private TList<EdSemAgendaForm> _edSemAgendaFormEdSemesterAgendaId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemAgendaFormEdSemesterAgendaId
		/// </summary>
		
		public TList<EdSemAgendaForm> EdSemAgendaFormCollection
		{
			get
			{
				if (_edSemAgendaFormEdSemesterAgendaId == null)
				{
				_edSemAgendaFormEdSemesterAgendaId = new TList<EdSemAgendaForm>();
				}
	
				return _edSemAgendaFormEdSemesterAgendaId;
			}
			set { _edSemAgendaFormEdSemesterAgendaId = value; }
		}
		
		#endregion

		#region EdSemAgendaDtlCollection
		
		private TList<EdSemAgendaDtl> _edSemAgendaDtlEdSemesterAgendaId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemAgendaDtlEdSemesterAgendaId
		/// </summary>
		
		public TList<EdSemAgendaDtl> EdSemAgendaDtlCollection
		{
			get
			{
				if (_edSemAgendaDtlEdSemesterAgendaId == null)
				{
				_edSemAgendaDtlEdSemesterAgendaId = new TList<EdSemAgendaDtl>();
				}
	
				return _edSemAgendaDtlEdSemesterAgendaId;
			}
			set { _edSemAgendaDtlEdSemesterAgendaId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdSemesterAgendaEntityData _tmp = new EdSemesterAgendaEntityData();
						
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.OriginalEdSemesterAgendaId = this.OriginalEdSemesterAgendaId;
			
			_tmp.EdSemesterOpenId = this.EdSemesterOpenId;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EmailFlg = this.EmailFlg;
			_tmp.EmpFlg = this.EmpFlg;
			_tmp.StfFlg = this.StfFlg;
			_tmp.StudFlg = this.StudFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ToDateAct = this.ToDateAct;
			_tmp.ShowFlg = this.ShowFlg;
			_tmp.NewComrFlg = this.NewComrFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AudtNote = this.AudtNote;
			_tmp.Notes = this.Notes;
			_tmp.FeeRefundPrcnt = this.FeeRefundPrcnt;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			
			#region Source Parent Composite Entities
			if (this.AdmOpenAcadSemesterIdSource != null)
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EdCodeSemActvityIdSource != null)
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource) as EdCodeSemActvity;
			if (this.EdSemesterOpenIdSource != null)
				_tmp.EdSemesterOpenIdSource = MakeCopyOf(this.EdSemesterOpenIdSource) as EdSemesterOpen;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edSemAgendaFormEdSemesterAgendaId != null)
				_tmp.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection); 
			if (this._edSemAgendaDtlEdSemesterAgendaId != null)
				_tmp.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdSemesterAgendaEntityData _tmp = new EdSemesterAgendaEntityData();
						
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.OriginalEdSemesterAgendaId = this.OriginalEdSemesterAgendaId;
			
			_tmp.EdSemesterOpenId = this.EdSemesterOpenId;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EmailFlg = this.EmailFlg;
			_tmp.EmpFlg = this.EmpFlg;
			_tmp.StfFlg = this.StfFlg;
			_tmp.StudFlg = this.StudFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ToDateAct = this.ToDateAct;
			_tmp.ShowFlg = this.ShowFlg;
			_tmp.NewComrFlg = this.NewComrFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AudtNote = this.AudtNote;
			_tmp.Notes = this.Notes;
			_tmp.FeeRefundPrcnt = this.FeeRefundPrcnt;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			
			#region Source Parent Composite Entities
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				_tmp.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				_tmp.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EdSemesterOpenIdSource != null && existingCopies.Contains(this.EdSemesterOpenIdSource))
				_tmp.EdSemesterOpenIdSource = existingCopies[this.EdSemesterOpenIdSource] as EdSemesterOpen;
			else
				_tmp.EdSemesterOpenIdSource = MakeCopyOf(this.EdSemesterOpenIdSource, existingCopies) as EdSemesterOpen;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection, existingCopies); 
			_tmp.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterAgendaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdSemesterAgendaColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterAgendaColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdSemesterAgendaColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterAgendaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdSemesterAgendaColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdSemesterAgendaEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdSemesterAgendaEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterAgendaColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdSemesterAgendaColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdSemesterAgendaEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdSemesterAgendaEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdSemesterAgendaEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdSemesterAgenda"/> object.
	/// </remarks>
	public class EdSemesterAgendaEventArgs : System.EventArgs
	{
		private EdSemesterAgendaColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdSemesterAgendaEventArgs class.
		///</summary>
		public EdSemesterAgendaEventArgs(EdSemesterAgendaColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdSemesterAgendaEventArgs class.
		///</summary>
		public EdSemesterAgendaEventArgs(EdSemesterAgendaColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdSemesterAgendaColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdSemesterAgendaColumn" />
		public EdSemesterAgendaColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdSemesterAgenda related events.
	///</summary>
	public delegate void EdSemesterAgendaEventHandler(object sender, EdSemesterAgendaEventArgs e);
	
	#region EdSemesterAgendaComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdSemesterAgendaComparer : System.Collections.Generic.IComparer<EdSemesterAgenda>
	{
		EdSemesterAgendaColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemesterAgendaComparer"/> class.
        /// </summary>
		public EdSemesterAgendaComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemesterAgendaComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdSemesterAgendaComparer(EdSemesterAgendaColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdSemesterAgenda"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdSemesterAgenda"/> to compare.</param>
        /// <param name="b">The second <c>EdSemesterAgenda</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdSemesterAgenda a, EdSemesterAgenda b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdSemesterAgenda entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdSemesterAgenda a, EdSemesterAgenda b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdSemesterAgendaColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdSemesterAgendaKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdSemesterAgenda"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdSemesterAgendaKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaKey class.
		/// </summary>
		public EdSemesterAgendaKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaKey class.
		/// </summary>
		public EdSemesterAgendaKey(EdSemesterAgendaBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdSemesterAgendaId = entity.EdSemesterAgendaId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterAgendaKey class.
		/// </summary>
		public EdSemesterAgendaKey(System.Decimal _edSemesterAgendaId)
		{
			#region Init Properties

			this.EdSemesterAgendaId = _edSemesterAgendaId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdSemesterAgendaBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdSemesterAgendaBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdSemesterAgendaId property
		private System.Decimal _edSemesterAgendaId;
		
		/// <summary>
		/// Gets or sets the EdSemesterAgendaId property.
		/// </summary>
		public System.Decimal EdSemesterAgendaId
		{
			get { return _edSemesterAgendaId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdSemesterAgendaId = value;
				
				_edSemesterAgendaId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdSemesterAgendaId = ( values["EdSemesterAgendaId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdSemesterAgendaId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdSemesterAgendaId", EdSemesterAgendaId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdSemesterAgendaId: {0}{1}",
								EdSemesterAgendaId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdSemesterAgendaColumn Enum
	
	/// <summary>
	/// Enumerate the EdSemesterAgenda columns.
	/// </summary>
	[Serializable]
	public enum EdSemesterAgendaColumn : int
	{
		/// <summary>
		/// EdSemesterAgendaId : 
		/// </summary>
		[EnumTextValue("ED_SEMESTER_AGENDA_ID")]
		[ColumnEnum("ED_SEMESTER_AGENDA_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdSemesterAgendaId = 1,
		/// <summary>
		/// EdSemesterOpenId : 
		/// </summary>
		[EnumTextValue("ED_SEMESTER_OPEN_ID")]
		[ColumnEnum("ED_SEMESTER_OPEN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdSemesterOpenId = 2,
		/// <summary>
		/// AdmOpenAcadSemesterId : Ejust
		/// </summary>
		[EnumTextValue("ADM_OPEN_ACAD_SEMESTER_ID")]
		[ColumnEnum("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmOpenAcadSemesterId = 3,
		/// <summary>
		/// EdCodeSemActvityId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEM_ACTVITY_ID")]
		[ColumnEnum("ED_CODE_SEM_ACTVITY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemActvityId = 4,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 5,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 6,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DescrEn = 7,
		/// <summary>
		/// AsCodeDegreeClassId : UG/PG
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 8,
		/// <summary>
		/// EmailFlg : 
		/// </summary>
		[EnumTextValue("EMAIL_FLG")]
		[ColumnEnum("EMAIL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EmailFlg = 9,
		/// <summary>
		/// EmpFlg : 
		/// </summary>
		[EnumTextValue("EMP_FLG")]
		[ColumnEnum("EMP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EmpFlg = 10,
		/// <summary>
		/// StfFlg : 
		/// </summary>
		[EnumTextValue("STF_FLG")]
		[ColumnEnum("STF_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StfFlg = 11,
		/// <summary>
		/// StudFlg : يعرض النشاط فى فيو طالب
		/// </summary>
		[EnumTextValue("STUD_FLG")]
		[ColumnEnum("STUD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudFlg = 12,
		/// <summary>
		/// OnlineFlg : يسمح للطلاب التسجيل اونلاين
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OnlineFlg = 13,
		/// <summary>
		/// ToDateAct : 
		/// </summary>
		[EnumTextValue("TO_DATE_ACT")]
		[ColumnEnum("TO_DATE_ACT", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDateAct = 14,
		/// <summary>
		/// ShowFlg : 
		/// </summary>
		[EnumTextValue("SHOW_FLG")]
		[ColumnEnum("SHOW_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ShowFlg = 15,
		/// <summary>
		/// NewComrFlg : 
		/// </summary>
		[EnumTextValue("NEW_COMR_FLG")]
		[ColumnEnum("NEW_COMR_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		NewComrFlg = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 18,
		/// <summary>
		/// AudtNote : 
		/// </summary>
		[EnumTextValue("AUDT_NOTE")]
		[ColumnEnum("AUDT_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		AudtNote = 19,
		/// <summary>
		/// Notes : Responsible
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 20,
		/// <summary>
		/// FeeRefundPrcnt : نسبة الاسترداد عند عمل انسحاب او انسحاب متأخر
		/// </summary>
		[EnumTextValue("FEE_REFUND_PRCNT")]
		[ColumnEnum("FEE_REFUND_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeRefundPrcnt = 21,
		/// <summary>
		/// AsCodeDegreeId : مسلسل الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 22
	}//End enum

	#endregion EdSemesterAgendaColumn Enum

} // end namespace
