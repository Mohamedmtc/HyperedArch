
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgThesisSupervisorRpt.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_THESIS_SUPERVISOR_RPT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgThesisSupervisorRptBase : EntityBase, IPgThesisSupervisorRpt, IEntityId<PgThesisSupervisorRptKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgThesisSupervisorRptEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgThesisSupervisorRptEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgThesisSupervisorRptEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgThesisSupervisorRpt> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisSupervisorRptEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisSupervisorRptEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgThesisSupervisorRptBase"/> instance.
		///</summary>
		public PgThesisSupervisorRptBase()
		{
			this.entityData = new PgThesisSupervisorRptEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgThesisSupervisorRptBase"/> instance.
		///</summary>
		///<param name="_pgThesisSupervisorRptId">تقارير  لجنة الاشراف الدورية</param>
		///<param name="_pgThesisStudId">تسجيل بيانات الرسالة-بيانات البحث العلمي</param>
		///<param name="_pgThesisSupervisorCommId">لجنة الاشراف والمتابعة</param>
		///<param name="_reportSerial">رقم التقرير</param>
		///<param name="_reportDate">تاريخ التقرير</param>
		///<param name="_completionPercent">نسبة الإنجاز للرسالة</param>
		///<param name="_progressPercent">معدل التقدم</param>
		///<param name="_expectedFinishPeriod">الفترة المتوقعة للانتهاء من الرسالة</param>
		///<param name="_finalFlg">تقرير نهاءى=1    ---- تقرير مرحلى =0</param>
		///<param name="_pgCdeRptRecommendId">مسلسل توصيات التقرير</param>
		///<param name="_notes">ملاحظات / التعديلات المطلوبة</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public PgThesisSupervisorRptBase(System.Decimal _pgThesisSupervisorRptId, System.Decimal _pgThesisStudId, 
			System.Decimal _pgThesisSupervisorCommId, System.Int32 _reportSerial, System.DateTime _reportDate, 
			System.Decimal? _completionPercent, System.Decimal? _progressPercent, System.String _expectedFinishPeriod, 
			System.Boolean? _finalFlg, System.Decimal? _pgCdeRptRecommendId, System.String _notes, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			this.entityData = new PgThesisSupervisorRptEntityData();
			this.backupData = null;

			this.PgThesisSupervisorRptId = _pgThesisSupervisorRptId;
			this.PgThesisStudId = _pgThesisStudId;
			this.PgThesisSupervisorCommId = _pgThesisSupervisorCommId;
			this.ReportSerial = _reportSerial;
			this.ReportDate = _reportDate;
			this.CompletionPercent = _completionPercent;
			this.ProgressPercent = _progressPercent;
			this.ExpectedFinishPeriod = _expectedFinishPeriod;
			this.FinalFlg = _finalFlg;
			this.PgCdeRptRecommendId = _pgCdeRptRecommendId;
			this.Notes = _notes;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgThesisSupervisorRpt"/> instance.
		///</summary>
		///<param name="_pgThesisSupervisorRptId">تقارير  لجنة الاشراف الدورية</param>
		///<param name="_pgThesisStudId">تسجيل بيانات الرسالة-بيانات البحث العلمي</param>
		///<param name="_pgThesisSupervisorCommId">لجنة الاشراف والمتابعة</param>
		///<param name="_reportSerial">رقم التقرير</param>
		///<param name="_reportDate">تاريخ التقرير</param>
		///<param name="_completionPercent">نسبة الإنجاز للرسالة</param>
		///<param name="_progressPercent">معدل التقدم</param>
		///<param name="_expectedFinishPeriod">الفترة المتوقعة للانتهاء من الرسالة</param>
		///<param name="_finalFlg">تقرير نهاءى=1    ---- تقرير مرحلى =0</param>
		///<param name="_pgCdeRptRecommendId">مسلسل توصيات التقرير</param>
		///<param name="_notes">ملاحظات / التعديلات المطلوبة</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static PgThesisSupervisorRpt CreatePgThesisSupervisorRpt(System.Decimal _pgThesisSupervisorRptId, System.Decimal _pgThesisStudId, 
			System.Decimal _pgThesisSupervisorCommId, System.Int32 _reportSerial, System.DateTime _reportDate, 
			System.Decimal? _completionPercent, System.Decimal? _progressPercent, System.String _expectedFinishPeriod, 
			System.Boolean? _finalFlg, System.Decimal? _pgCdeRptRecommendId, System.String _notes, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			PgThesisSupervisorRpt newPgThesisSupervisorRpt = new PgThesisSupervisorRpt();
			newPgThesisSupervisorRpt.PgThesisSupervisorRptId = _pgThesisSupervisorRptId;
			newPgThesisSupervisorRpt.PgThesisStudId = _pgThesisStudId;
			newPgThesisSupervisorRpt.PgThesisSupervisorCommId = _pgThesisSupervisorCommId;
			newPgThesisSupervisorRpt.ReportSerial = _reportSerial;
			newPgThesisSupervisorRpt.ReportDate = _reportDate;
			newPgThesisSupervisorRpt.CompletionPercent = _completionPercent;
			newPgThesisSupervisorRpt.ProgressPercent = _progressPercent;
			newPgThesisSupervisorRpt.ExpectedFinishPeriod = _expectedFinishPeriod;
			newPgThesisSupervisorRpt.FinalFlg = _finalFlg;
			newPgThesisSupervisorRpt.PgCdeRptRecommendId = _pgCdeRptRecommendId;
			newPgThesisSupervisorRpt.Notes = _notes;
			newPgThesisSupervisorRpt.LastDate = _lastDate;
			newPgThesisSupervisorRpt.SeUserId = _seUserId;
			return newPgThesisSupervisorRpt;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgThesisSupervisorRptId property. 
		///		تقارير  لجنة الاشراف الدورية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تقارير  لجنة الاشراف الدورية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgThesisSupervisorRptId
		{
			get
			{
				return this.entityData.PgThesisSupervisorRptId; 
			}
			
			set
			{
				if (this.entityData.PgThesisSupervisorRptId == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.PgThesisSupervisorRptId, this.entityData.PgThesisSupervisorRptId);
				this.entityData.PgThesisSupervisorRptId = value;
				this.EntityId.PgThesisSupervisorRptId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.PgThesisSupervisorRptId, this.entityData.PgThesisSupervisorRptId);
				OnPropertyChanged("PgThesisSupervisorRptId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_THESIS_SUPERVISOR_RPT_ID property.
		///		تقارير  لجنة الاشراف الدورية
		/// </summary>
		/// <remarks>This is the original value of the PG_THESIS_SUPERVISOR_RPT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgThesisSupervisorRptId
		{
			get { return this.entityData.OriginalPgThesisSupervisorRptId; }
			set { this.entityData.OriginalPgThesisSupervisorRptId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisStudId property. 
		///		تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل بيانات الرسالة-بيانات البحث العلمي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PgThesisStudId
		{
			get
			{
				return this.entityData.PgThesisStudId; 
			}
			
			set
			{
				if (this.entityData.PgThesisStudId == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				this.entityData.PgThesisStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				OnPropertyChanged("PgThesisStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisSupervisorCommId property. 
		///		لجنة الاشراف والمتابعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"لجنة الاشراف والمتابعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PgThesisSupervisorCommId
		{
			get
			{
				return this.entityData.PgThesisSupervisorCommId; 
			}
			
			set
			{
				if (this.entityData.PgThesisSupervisorCommId == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.PgThesisSupervisorCommId, this.entityData.PgThesisSupervisorCommId);
				this.entityData.PgThesisSupervisorCommId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.PgThesisSupervisorCommId, this.entityData.PgThesisSupervisorCommId);
				OnPropertyChanged("PgThesisSupervisorCommId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReportSerial property. 
		///		رقم التقرير
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم التقرير"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ReportSerial
		{
			get
			{
				return this.entityData.ReportSerial; 
			}
			
			set
			{
				if (this.entityData.ReportSerial == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.ReportSerial, this.entityData.ReportSerial);
				this.entityData.ReportSerial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.ReportSerial, this.entityData.ReportSerial);
				OnPropertyChanged("ReportSerial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReportDate property. 
		///		تاريخ التقرير
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ التقرير"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReportDate
		{
			get
			{
				return this.entityData.ReportDate; 
			}
			
			set
			{
				if (this.entityData.ReportDate == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.ReportDate, this.entityData.ReportDate);
				this.entityData.ReportDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.ReportDate, this.entityData.ReportDate);
				OnPropertyChanged("ReportDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompletionPercent property. 
		///		نسبة الإنجاز للرسالة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCompletionPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة الإنجاز للرسالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CompletionPercent
		{
			get
			{
				return this.entityData.CompletionPercent; 
			}
			
			set
			{
				if (this.entityData.CompletionPercent == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.CompletionPercent, this.entityData.CompletionPercent);
				this.entityData.CompletionPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.CompletionPercent, this.entityData.CompletionPercent);
				OnPropertyChanged("CompletionPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProgressPercent property. 
		///		معدل التقدم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsProgressPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"معدل التقدم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ProgressPercent
		{
			get
			{
				return this.entityData.ProgressPercent; 
			}
			
			set
			{
				if (this.entityData.ProgressPercent == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.ProgressPercent, this.entityData.ProgressPercent);
				this.entityData.ProgressPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.ProgressPercent, this.entityData.ProgressPercent);
				OnPropertyChanged("ProgressPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpectedFinishPeriod property. 
		///		الفترة المتوقعة للانتهاء من الرسالة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الفترة المتوقعة للانتهاء من الرسالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ExpectedFinishPeriod
		{
			get
			{
				return this.entityData.ExpectedFinishPeriod; 
			}
			
			set
			{
				if (this.entityData.ExpectedFinishPeriod == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.ExpectedFinishPeriod, this.entityData.ExpectedFinishPeriod);
				this.entityData.ExpectedFinishPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.ExpectedFinishPeriod, this.entityData.ExpectedFinishPeriod);
				OnPropertyChanged("ExpectedFinishPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinalFlg property. 
		///		تقرير نهاءى=1    ---- تقرير مرحلى =0
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFinalFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تقرير نهاءى=1    ---- تقرير مرحلى =0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FinalFlg
		{
			get
			{
				return this.entityData.FinalFlg; 
			}
			
			set
			{
				if (this.entityData.FinalFlg == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.FinalFlg, this.entityData.FinalFlg);
				this.entityData.FinalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.FinalFlg, this.entityData.FinalFlg);
				OnPropertyChanged("FinalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgCdeRptRecommendId property. 
		///		مسلسل توصيات التقرير
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPgCdeRptRecommendIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل توصيات التقرير"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PgCdeRptRecommendId
		{
			get
			{
				return this.entityData.PgCdeRptRecommendId; 
			}
			
			set
			{
				if (this.entityData.PgCdeRptRecommendId == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.PgCdeRptRecommendId, this.entityData.PgCdeRptRecommendId);
				this.entityData.PgCdeRptRecommendId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.PgCdeRptRecommendId, this.entityData.PgCdeRptRecommendId);
				OnPropertyChanged("PgCdeRptRecommendId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات / التعديلات المطلوبة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات / التعديلات المطلوبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgThesisSupervisorRptColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSupervisorRptColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="PgCdeRptRecommend"/>.
		/// </summary>
		/// <value>The source PgCdeRptRecommend for PgCdeRptRecommendId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgCdeRptRecommend PgCdeRptRecommendIdSource
      	{
            get { return entityData.PgCdeRptRecommendIdSource; }
            set { entityData.PgCdeRptRecommendIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return entityData.PgThesisStudIdSource; }
            set { entityData.PgThesisStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisSupervisorComm"/>.
		/// </summary>
		/// <value>The source PgThesisSupervisorComm for PgThesisSupervisorCommId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisSupervisorComm PgThesisSupervisorCommIdSource
      	{
            get { return entityData.PgThesisSupervisorCommIdSource; }
            set { entityData.PgThesisSupervisorCommIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgAttchdDoc objects
		///	which are related to this object through the relation FK_PG_ATTCHD_DOC_PG_THESIS_SUPERVISOR_RPT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get { return entityData.PgAttchdDocCollection; }
			set { entityData.PgAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExpectedFinishPeriod", "Expected Finish Period", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 350));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_THESIS_SUPERVISOR_RPT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_THESIS_SUPERVISOR_RPT_ID", "PG_THESIS_STUD_ID", "PG_THESIS_SUPERVISOR_COMM_ID", "REPORT_SERIAL", "REPORT_DATE", "COMPLETION_PERCENT", "PROGRESS_PERCENT", "EXPECTED_FINISH_PERIOD", "FINAL_FLG", "PG_CDE_RPT_RECOMMEND_ID", "NOTES", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgThesisSupervisorRptEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgThesisSupervisorRpt) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgThesisSupervisorRpt>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgThesisSupervisorRpt);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgThesisSupervisorRpt Entity 
		///</summary>
		protected virtual PgThesisSupervisorRpt Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgThesisSupervisorRpt copy = new PgThesisSupervisorRpt();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgThesisSupervisorRptId = this.PgThesisSupervisorRptId;
					copy.OriginalPgThesisSupervisorRptId = this.OriginalPgThesisSupervisorRptId;
				copy.PgThesisStudId = this.PgThesisStudId;
				copy.PgThesisSupervisorCommId = this.PgThesisSupervisorCommId;
				copy.ReportSerial = this.ReportSerial;
				copy.ReportDate = this.ReportDate;
				copy.CompletionPercent = this.CompletionPercent;
				copy.ProgressPercent = this.ProgressPercent;
				copy.ExpectedFinishPeriod = this.ExpectedFinishPeriod;
				copy.FinalFlg = this.FinalFlg;
				copy.PgCdeRptRecommendId = this.PgCdeRptRecommendId;
				copy.Notes = this.Notes;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.PgCdeRptRecommendIdSource != null && existingCopies.Contains(this.PgCdeRptRecommendIdSource))
				copy.PgCdeRptRecommendIdSource = existingCopies[this.PgCdeRptRecommendIdSource] as PgCdeRptRecommend;
			else
				copy.PgCdeRptRecommendIdSource = MakeCopyOf(this.PgCdeRptRecommendIdSource, existingCopies) as PgCdeRptRecommend;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				copy.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				copy.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
			if (this.PgThesisSupervisorCommIdSource != null && existingCopies.Contains(this.PgThesisSupervisorCommIdSource))
				copy.PgThesisSupervisorCommIdSource = existingCopies[this.PgThesisSupervisorCommIdSource] as PgThesisSupervisorComm;
			else
				copy.PgThesisSupervisorCommIdSource = MakeCopyOf(this.PgThesisSupervisorCommIdSource, existingCopies) as PgThesisSupervisorComm;
		
			//deep copy nested objects
			copy.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgThesisSupervisorRpt Entity 
		///</summary>
		public virtual PgThesisSupervisorRpt Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgThesisSupervisorRpt Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgThesisSupervisorRpt DeepCopy()
		{
			return EntityHelper.Clone<PgThesisSupervisorRpt>(this as PgThesisSupervisorRpt);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgThesisSupervisorRptEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgThesisSupervisorRptEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgThesisSupervisorRptEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgThesisSupervisorRptColumn column)
		{
			switch(column)
			{
					case PgThesisSupervisorRptColumn.PgThesisSupervisorRptId:
					return entityData.PgThesisSupervisorRptId != _originalData.PgThesisSupervisorRptId;
					case PgThesisSupervisorRptColumn.PgThesisStudId:
					return entityData.PgThesisStudId != _originalData.PgThesisStudId;
					case PgThesisSupervisorRptColumn.PgThesisSupervisorCommId:
					return entityData.PgThesisSupervisorCommId != _originalData.PgThesisSupervisorCommId;
					case PgThesisSupervisorRptColumn.ReportSerial:
					return entityData.ReportSerial != _originalData.ReportSerial;
					case PgThesisSupervisorRptColumn.ReportDate:
					return entityData.ReportDate != _originalData.ReportDate;
					case PgThesisSupervisorRptColumn.CompletionPercent:
					return entityData.CompletionPercent != _originalData.CompletionPercent;
					case PgThesisSupervisorRptColumn.ProgressPercent:
					return entityData.ProgressPercent != _originalData.ProgressPercent;
					case PgThesisSupervisorRptColumn.ExpectedFinishPeriod:
					return entityData.ExpectedFinishPeriod != _originalData.ExpectedFinishPeriod;
					case PgThesisSupervisorRptColumn.FinalFlg:
					return entityData.FinalFlg != _originalData.FinalFlg;
					case PgThesisSupervisorRptColumn.PgCdeRptRecommendId:
					return entityData.PgCdeRptRecommendId != _originalData.PgCdeRptRecommendId;
					case PgThesisSupervisorRptColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case PgThesisSupervisorRptColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case PgThesisSupervisorRptColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgThesisSupervisorRptColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgThesisSupervisorRptId != _originalData.PgThesisSupervisorRptId;
			result = result || entityData.PgThesisStudId != _originalData.PgThesisStudId;
			result = result || entityData.PgThesisSupervisorCommId != _originalData.PgThesisSupervisorCommId;
			result = result || entityData.ReportSerial != _originalData.ReportSerial;
			result = result || entityData.ReportDate != _originalData.ReportDate;
			result = result || entityData.CompletionPercent != _originalData.CompletionPercent;
			result = result || entityData.ProgressPercent != _originalData.ProgressPercent;
			result = result || entityData.ExpectedFinishPeriod != _originalData.ExpectedFinishPeriod;
			result = result || entityData.FinalFlg != _originalData.FinalFlg;
			result = result || entityData.PgCdeRptRecommendId != _originalData.PgCdeRptRecommendId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a PgThesisSupervisorRpt Entity with the original data.
		///</summary>
		public PgThesisSupervisorRpt GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgThesisSupervisorRpt(
				_originalData.PgThesisSupervisorRptId,
				_originalData.PgThesisStudId,
				_originalData.PgThesisSupervisorCommId,
				_originalData.ReportSerial,
				_originalData.ReportDate,
				_originalData.CompletionPercent,
				_originalData.ProgressPercent,
				_originalData.ExpectedFinishPeriod,
				_originalData.FinalFlg,
				_originalData.PgCdeRptRecommendId,
				_originalData.Notes,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (PgThesisSupervisorRpt)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgThesisSupervisorRptBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgThesisSupervisorRptBase)
				return ValueEquals(this, (PgThesisSupervisorRptBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgThesisSupervisorRptBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgThesisSupervisorRptId.GetHashCode() ^ 
					this.PgThesisStudId.GetHashCode() ^ 
					this.PgThesisSupervisorCommId.GetHashCode() ^ 
					this.ReportSerial.GetHashCode() ^ 
					this.ReportDate.GetHashCode() ^ 
					((this.CompletionPercent == null) ? string.Empty : this.CompletionPercent.ToString()).GetHashCode() ^ 
					((this.ProgressPercent == null) ? string.Empty : this.ProgressPercent.ToString()).GetHashCode() ^ 
					((this.ExpectedFinishPeriod == null) ? string.Empty : this.ExpectedFinishPeriod.ToString()).GetHashCode() ^ 
					((this.FinalFlg == null) ? string.Empty : this.FinalFlg.ToString()).GetHashCode() ^ 
					((this.PgCdeRptRecommendId == null) ? string.Empty : this.PgCdeRptRecommendId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgThesisSupervisorRptBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgThesisSupervisorRptBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgThesisSupervisorRptBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgThesisSupervisorRptBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgThesisSupervisorRptBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgThesisSupervisorRptBase Object1, PgThesisSupervisorRptBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgThesisSupervisorRptId != Object2.PgThesisSupervisorRptId)
				equal = false;
			if (Object1.PgThesisStudId != Object2.PgThesisStudId)
				equal = false;
			if (Object1.PgThesisSupervisorCommId != Object2.PgThesisSupervisorCommId)
				equal = false;
			if (Object1.ReportSerial != Object2.ReportSerial)
				equal = false;
			if (Object1.ReportDate != Object2.ReportDate)
				equal = false;
			if ( Object1.CompletionPercent != null && Object2.CompletionPercent != null )
			{
				if (Object1.CompletionPercent != Object2.CompletionPercent)
					equal = false;
			}
			else if (Object1.CompletionPercent == null ^ Object2.CompletionPercent == null )
			{
				equal = false;
			}
			if ( Object1.ProgressPercent != null && Object2.ProgressPercent != null )
			{
				if (Object1.ProgressPercent != Object2.ProgressPercent)
					equal = false;
			}
			else if (Object1.ProgressPercent == null ^ Object2.ProgressPercent == null )
			{
				equal = false;
			}
			if ( Object1.ExpectedFinishPeriod != null && Object2.ExpectedFinishPeriod != null )
			{
				if (Object1.ExpectedFinishPeriod != Object2.ExpectedFinishPeriod)
					equal = false;
			}
			else if (Object1.ExpectedFinishPeriod == null ^ Object2.ExpectedFinishPeriod == null )
			{
				equal = false;
			}
			if ( Object1.FinalFlg != null && Object2.FinalFlg != null )
			{
				if (Object1.FinalFlg != Object2.FinalFlg)
					equal = false;
			}
			else if (Object1.FinalFlg == null ^ Object2.FinalFlg == null )
			{
				equal = false;
			}
			if ( Object1.PgCdeRptRecommendId != null && Object2.PgCdeRptRecommendId != null )
			{
				if (Object1.PgCdeRptRecommendId != Object2.PgCdeRptRecommendId)
					equal = false;
			}
			else if (Object1.PgCdeRptRecommendId == null ^ Object2.PgCdeRptRecommendId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgThesisSupervisorRptBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgThesisSupervisorRptComparer GetComparer()
        {
            return new PgThesisSupervisorRptComparer();
        }
        */

        // Comparer delegates back to PgThesisSupervisorRpt
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgThesisSupervisorRpt rhs, PgThesisSupervisorRptColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgThesisSupervisorRptColumn.PgThesisSupervisorRptId:
            		return this.PgThesisSupervisorRptId.CompareTo(rhs.PgThesisSupervisorRptId);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.PgThesisStudId:
            		return this.PgThesisStudId.CompareTo(rhs.PgThesisStudId);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.PgThesisSupervisorCommId:
            		return this.PgThesisSupervisorCommId.CompareTo(rhs.PgThesisSupervisorCommId);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.ReportSerial:
            		return this.ReportSerial.CompareTo(rhs.ReportSerial);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.ReportDate:
            		return this.ReportDate.CompareTo(rhs.ReportDate);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.CompletionPercent:
            		return this.CompletionPercent.Value.CompareTo(rhs.CompletionPercent.Value);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.ProgressPercent:
            		return this.ProgressPercent.Value.CompareTo(rhs.ProgressPercent.Value);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.ExpectedFinishPeriod:
            		return this.ExpectedFinishPeriod.CompareTo(rhs.ExpectedFinishPeriod);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.FinalFlg:
            		return this.FinalFlg.Value.CompareTo(rhs.FinalFlg.Value);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.PgCdeRptRecommendId:
            		return this.PgCdeRptRecommendId.Value.CompareTo(rhs.PgCdeRptRecommendId.Value);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case PgThesisSupervisorRptColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgThesisSupervisorRptKey> Members
		
		// member variable for the EntityId property
		private PgThesisSupervisorRptKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgThesisSupervisorRptKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgThesisSupervisorRptKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgThesisSupervisorRpt")
					.Append("|").Append( this.PgThesisSupervisorRptId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- PgThesisSupervisorRptId: {0}{13}- PgThesisStudId: {1}{13}- PgThesisSupervisorCommId: {2}{13}- ReportSerial: {3}{13}- ReportDate: {4}{13}- CompletionPercent: {5}{13}- ProgressPercent: {6}{13}- ExpectedFinishPeriod: {7}{13}- FinalFlg: {8}{13}- PgCdeRptRecommendId: {9}{13}- Notes: {10}{13}- LastDate: {11}{13}- SeUserId: {12}{13}{15}", 
				this.PgThesisSupervisorRptId,
				this.PgThesisStudId,
				this.PgThesisSupervisorCommId,
				this.ReportSerial,
				this.ReportDate,
				(this.CompletionPercent == null) ? string.Empty : this.CompletionPercent.ToString(),
				(this.ProgressPercent == null) ? string.Empty : this.ProgressPercent.ToString(),
				(this.ExpectedFinishPeriod == null) ? string.Empty : this.ExpectedFinishPeriod.ToString(),
				(this.FinalFlg == null) ? string.Empty : this.FinalFlg.ToString(),
				(this.PgCdeRptRecommendId == null) ? string.Empty : this.PgCdeRptRecommendId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_THESIS_SUPERVISOR_RPT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgThesisSupervisorRptEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_THESIS_SUPERVISOR_RPT_ID : تقارير  لجنة الاشراف الدورية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_THESIS_SUPERVISOR_RPT"</remarks>
		public System.Decimal PgThesisSupervisorRptId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgThesisSupervisorRptId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PG_THESIS_STUD_ID : تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		public System.Decimal		  PgThesisStudId = 0.0m;
		
		/// <summary>
		/// PG_THESIS_SUPERVISOR_COMM_ID : لجنة الاشراف والمتابعة
		/// </summary>
		public System.Decimal		  PgThesisSupervisorCommId = 0.0m;
		
		/// <summary>
		/// REPORT_SERIAL : رقم التقرير
		/// </summary>
		public System.Int32		  ReportSerial = (int)0;
		
		/// <summary>
		/// REPORT_DATE : تاريخ التقرير
		/// </summary>
		public System.DateTime		  ReportDate = DateTime.MinValue;
		
		/// <summary>
		/// COMPLETION_PERCENT : نسبة الإنجاز للرسالة
		/// </summary>
		public System.Decimal?		  CompletionPercent = null;
		
		/// <summary>
		/// PROGRESS_PERCENT : معدل التقدم
		/// </summary>
		public System.Decimal?		  ProgressPercent = null;
		
		/// <summary>
		/// EXPECTED_FINISH_PERIOD : الفترة المتوقعة للانتهاء من الرسالة
		/// </summary>
		public System.String		  ExpectedFinishPeriod = null;
		
		/// <summary>
		/// FINAL_FLG : تقرير نهاءى=1    ---- تقرير مرحلى =0
		/// </summary>
		public System.Boolean?		  FinalFlg = null;
		
		/// <summary>
		/// PG_CDE_RPT_RECOMMEND_ID : مسلسل توصيات التقرير
		/// </summary>
		public System.Decimal?		  PgCdeRptRecommendId = null;
		
		/// <summary>
		/// NOTES : ملاحظات / التعديلات المطلوبة
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private PgCdeRptRecommend _pgCdeRptRecommendIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgCdeRptRecommend"/>.
		/// </summary>
		/// <value>The source PgCdeRptRecommend for PgCdeRptRecommendId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgCdeRptRecommend PgCdeRptRecommendIdSource
      	{
            get { return this._pgCdeRptRecommendIdSource; }
            set { this._pgCdeRptRecommendIdSource = value; }
      	}
		private PgThesisStud _pgThesisStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return this._pgThesisStudIdSource; }
            set { this._pgThesisStudIdSource = value; }
      	}
		private PgThesisSupervisorComm _pgThesisSupervisorCommIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisSupervisorComm"/>.
		/// </summary>
		/// <value>The source PgThesisSupervisorComm for PgThesisSupervisorCommId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisSupervisorComm PgThesisSupervisorCommIdSource
      	{
            get { return this._pgThesisSupervisorCommIdSource; }
            set { this._pgThesisSupervisorCommIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgAttchdDocCollection
		
		private TList<PgAttchdDoc> _pgAttchdDocPgThesisSupervisorRptId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgAttchdDocPgThesisSupervisorRptId
		/// </summary>
		
		public TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get
			{
				if (_pgAttchdDocPgThesisSupervisorRptId == null)
				{
				_pgAttchdDocPgThesisSupervisorRptId = new TList<PgAttchdDoc>();
				}
	
				return _pgAttchdDocPgThesisSupervisorRptId;
			}
			set { _pgAttchdDocPgThesisSupervisorRptId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgThesisSupervisorRptEntityData _tmp = new PgThesisSupervisorRptEntityData();
						
			_tmp.PgThesisSupervisorRptId = this.PgThesisSupervisorRptId;
			_tmp.OriginalPgThesisSupervisorRptId = this.OriginalPgThesisSupervisorRptId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.PgThesisSupervisorCommId = this.PgThesisSupervisorCommId;
			_tmp.ReportSerial = this.ReportSerial;
			_tmp.ReportDate = this.ReportDate;
			_tmp.CompletionPercent = this.CompletionPercent;
			_tmp.ProgressPercent = this.ProgressPercent;
			_tmp.ExpectedFinishPeriod = this.ExpectedFinishPeriod;
			_tmp.FinalFlg = this.FinalFlg;
			_tmp.PgCdeRptRecommendId = this.PgCdeRptRecommendId;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.PgCdeRptRecommendIdSource != null)
				_tmp.PgCdeRptRecommendIdSource = MakeCopyOf(this.PgCdeRptRecommendIdSource) as PgCdeRptRecommend;
			if (this.PgThesisStudIdSource != null)
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource) as PgThesisStud;
			if (this.PgThesisSupervisorCommIdSource != null)
				_tmp.PgThesisSupervisorCommIdSource = MakeCopyOf(this.PgThesisSupervisorCommIdSource) as PgThesisSupervisorComm;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgAttchdDocPgThesisSupervisorRptId != null)
				_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgThesisSupervisorRptEntityData _tmp = new PgThesisSupervisorRptEntityData();
						
			_tmp.PgThesisSupervisorRptId = this.PgThesisSupervisorRptId;
			_tmp.OriginalPgThesisSupervisorRptId = this.OriginalPgThesisSupervisorRptId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.PgThesisSupervisorCommId = this.PgThesisSupervisorCommId;
			_tmp.ReportSerial = this.ReportSerial;
			_tmp.ReportDate = this.ReportDate;
			_tmp.CompletionPercent = this.CompletionPercent;
			_tmp.ProgressPercent = this.ProgressPercent;
			_tmp.ExpectedFinishPeriod = this.ExpectedFinishPeriod;
			_tmp.FinalFlg = this.FinalFlg;
			_tmp.PgCdeRptRecommendId = this.PgCdeRptRecommendId;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.PgCdeRptRecommendIdSource != null && existingCopies.Contains(this.PgCdeRptRecommendIdSource))
				_tmp.PgCdeRptRecommendIdSource = existingCopies[this.PgCdeRptRecommendIdSource] as PgCdeRptRecommend;
			else
				_tmp.PgCdeRptRecommendIdSource = MakeCopyOf(this.PgCdeRptRecommendIdSource, existingCopies) as PgCdeRptRecommend;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				_tmp.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
			if (this.PgThesisSupervisorCommIdSource != null && existingCopies.Contains(this.PgThesisSupervisorCommIdSource))
				_tmp.PgThesisSupervisorCommIdSource = existingCopies[this.PgThesisSupervisorCommIdSource] as PgThesisSupervisorComm;
			else
				_tmp.PgThesisSupervisorCommIdSource = MakeCopyOf(this.PgThesisSupervisorCommIdSource, existingCopies) as PgThesisSupervisorComm;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSupervisorRptColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgThesisSupervisorRptColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSupervisorRptColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgThesisSupervisorRptColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSupervisorRptColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgThesisSupervisorRptColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgThesisSupervisorRptEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgThesisSupervisorRptEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSupervisorRptColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgThesisSupervisorRptColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgThesisSupervisorRptEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgThesisSupervisorRptEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgThesisSupervisorRptEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgThesisSupervisorRpt"/> object.
	/// </remarks>
	public class PgThesisSupervisorRptEventArgs : System.EventArgs
	{
		private PgThesisSupervisorRptColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisSupervisorRptEventArgs class.
		///</summary>
		public PgThesisSupervisorRptEventArgs(PgThesisSupervisorRptColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisSupervisorRptEventArgs class.
		///</summary>
		public PgThesisSupervisorRptEventArgs(PgThesisSupervisorRptColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgThesisSupervisorRptColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgThesisSupervisorRptColumn" />
		public PgThesisSupervisorRptColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgThesisSupervisorRpt related events.
	///</summary>
	public delegate void PgThesisSupervisorRptEventHandler(object sender, PgThesisSupervisorRptEventArgs e);
	
	#region PgThesisSupervisorRptComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgThesisSupervisorRptComparer : System.Collections.Generic.IComparer<PgThesisSupervisorRpt>
	{
		PgThesisSupervisorRptColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisSupervisorRptComparer"/> class.
        /// </summary>
		public PgThesisSupervisorRptComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisSupervisorRptComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgThesisSupervisorRptComparer(PgThesisSupervisorRptColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgThesisSupervisorRpt"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgThesisSupervisorRpt"/> to compare.</param>
        /// <param name="b">The second <c>PgThesisSupervisorRpt</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgThesisSupervisorRpt a, PgThesisSupervisorRpt b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgThesisSupervisorRpt entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgThesisSupervisorRpt a, PgThesisSupervisorRpt b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgThesisSupervisorRptColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgThesisSupervisorRptKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgThesisSupervisorRpt"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgThesisSupervisorRptKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptKey class.
		/// </summary>
		public PgThesisSupervisorRptKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptKey class.
		/// </summary>
		public PgThesisSupervisorRptKey(PgThesisSupervisorRptBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgThesisSupervisorRptId = entity.PgThesisSupervisorRptId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSupervisorRptKey class.
		/// </summary>
		public PgThesisSupervisorRptKey(System.Decimal _pgThesisSupervisorRptId)
		{
			#region Init Properties

			this.PgThesisSupervisorRptId = _pgThesisSupervisorRptId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgThesisSupervisorRptBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgThesisSupervisorRptBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgThesisSupervisorRptId property
		private System.Decimal _pgThesisSupervisorRptId;
		
		/// <summary>
		/// Gets or sets the PgThesisSupervisorRptId property.
		/// </summary>
		public System.Decimal PgThesisSupervisorRptId
		{
			get { return _pgThesisSupervisorRptId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgThesisSupervisorRptId = value;
				
				_pgThesisSupervisorRptId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgThesisSupervisorRptId = ( values["PgThesisSupervisorRptId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgThesisSupervisorRptId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgThesisSupervisorRptId", PgThesisSupervisorRptId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgThesisSupervisorRptId: {0}{1}",
								PgThesisSupervisorRptId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgThesisSupervisorRptColumn Enum
	
	/// <summary>
	/// Enumerate the PgThesisSupervisorRpt columns.
	/// </summary>
	[Serializable]
	public enum PgThesisSupervisorRptColumn : int
	{
		/// <summary>
		/// PgThesisSupervisorRptId : تقارير  لجنة الاشراف الدورية
		/// </summary>
		[EnumTextValue("PG_THESIS_SUPERVISOR_RPT_ID")]
		[ColumnEnum("PG_THESIS_SUPERVISOR_RPT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgThesisSupervisorRptId = 1,
		/// <summary>
		/// PgThesisStudId : تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		[EnumTextValue("PG_THESIS_STUD_ID")]
		[ColumnEnum("PG_THESIS_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PgThesisStudId = 2,
		/// <summary>
		/// PgThesisSupervisorCommId : لجنة الاشراف والمتابعة
		/// </summary>
		[EnumTextValue("PG_THESIS_SUPERVISOR_COMM_ID")]
		[ColumnEnum("PG_THESIS_SUPERVISOR_COMM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PgThesisSupervisorCommId = 3,
		/// <summary>
		/// ReportSerial : رقم التقرير
		/// </summary>
		[EnumTextValue("REPORT_SERIAL")]
		[ColumnEnum("REPORT_SERIAL", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ReportSerial = 4,
		/// <summary>
		/// ReportDate : تاريخ التقرير
		/// </summary>
		[EnumTextValue("REPORT_DATE")]
		[ColumnEnum("REPORT_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ReportDate = 5,
		/// <summary>
		/// CompletionPercent : نسبة الإنجاز للرسالة
		/// </summary>
		[EnumTextValue("COMPLETION_PERCENT")]
		[ColumnEnum("COMPLETION_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CompletionPercent = 6,
		/// <summary>
		/// ProgressPercent : معدل التقدم
		/// </summary>
		[EnumTextValue("PROGRESS_PERCENT")]
		[ColumnEnum("PROGRESS_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ProgressPercent = 7,
		/// <summary>
		/// ExpectedFinishPeriod : الفترة المتوقعة للانتهاء من الرسالة
		/// </summary>
		[EnumTextValue("EXPECTED_FINISH_PERIOD")]
		[ColumnEnum("EXPECTED_FINISH_PERIOD", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ExpectedFinishPeriod = 8,
		/// <summary>
		/// FinalFlg : تقرير نهاءى=1    ---- تقرير مرحلى =0
		/// </summary>
		[EnumTextValue("FINAL_FLG")]
		[ColumnEnum("FINAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FinalFlg = 9,
		/// <summary>
		/// PgCdeRptRecommendId : مسلسل توصيات التقرير
		/// </summary>
		[EnumTextValue("PG_CDE_RPT_RECOMMEND_ID")]
		[ColumnEnum("PG_CDE_RPT_RECOMMEND_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PgCdeRptRecommendId = 10,
		/// <summary>
		/// Notes : ملاحظات / التعديلات المطلوبة
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		Notes = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13
	}//End enum

	#endregion PgThesisSupervisorRptColumn Enum

} // end namespace
