
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAppPlacementExam.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_APP_PLACEMENT_EXAM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAppPlacementExamBase : EntityBase, IAdmAppPlacementExam, IEntityId<AdmAppPlacementExamKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAppPlacementExamEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAppPlacementExamEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAppPlacementExamEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAppPlacementExam> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppPlacementExamEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppPlacementExamEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAppPlacementExamBase"/> instance.
		///</summary>
		public AdmAppPlacementExamBase()
		{
			this.entityData = new AdmAppPlacementExamEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAppPlacementExamBase"/> instance.
		///</summary>
		///<param name="_admAppPlacementExamId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_mark">NU:auto if doublegrade(min(writing/or score)</param>
		///<param name="_passFlg"></param>
		///<param name="_absentFlg"></param>
		///<param name="_admPlaceExamDatetimeId"></param>
		///<param name="_admCdePlacementExamId">if out_flg=1</param>
		///<param name="_attchCertPath">If Exam External</param>
		///<param name="_admCdeExamGrdngId"></param>
		///<param name="_exemptFlg">مقرر معفىXX</param>
		///<param name="_approveFlg"></param>
		///<param name="_admPlaceExamLocId">EJUSTموعد امتحان القبول فى اكتر من قاعة</param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_reExamFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmAppPlacementExamBase(System.Decimal _admAppPlacementExamId, System.Decimal _admApplicantId, 
			System.Decimal? _mark, System.Decimal? _passFlg, System.Decimal? _absentFlg, 
			System.Decimal? _admPlaceExamDatetimeId, System.Decimal? _admCdePlacementExamId, 
			System.String _attchCertPath, System.Decimal? _admCdeExamGrdngId, System.Boolean? _exemptFlg, 
			System.Boolean? _approveFlg, System.Decimal? _admPlaceExamLocId, System.Decimal? _admAppRegHistoryId, 
			System.Boolean? _reExamFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new AdmAppPlacementExamEntityData();
			this.backupData = null;

			this.AdmAppPlacementExamId = _admAppPlacementExamId;
			this.AdmApplicantId = _admApplicantId;
			this.Mark = _mark;
			this.PassFlg = _passFlg;
			this.AbsentFlg = _absentFlg;
			this.AdmPlaceExamDatetimeId = _admPlaceExamDatetimeId;
			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.AttchCertPath = _attchCertPath;
			this.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			this.ExemptFlg = _exemptFlg;
			this.ApproveFlg = _approveFlg;
			this.AdmPlaceExamLocId = _admPlaceExamLocId;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
			this.ReExamFlg = _reExamFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAppPlacementExam"/> instance.
		///</summary>
		///<param name="_admAppPlacementExamId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_mark">NU:auto if doublegrade(min(writing/or score)</param>
		///<param name="_passFlg"></param>
		///<param name="_absentFlg"></param>
		///<param name="_admPlaceExamDatetimeId"></param>
		///<param name="_admCdePlacementExamId">if out_flg=1</param>
		///<param name="_attchCertPath">If Exam External</param>
		///<param name="_admCdeExamGrdngId"></param>
		///<param name="_exemptFlg">مقرر معفىXX</param>
		///<param name="_approveFlg"></param>
		///<param name="_admPlaceExamLocId">EJUSTموعد امتحان القبول فى اكتر من قاعة</param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_reExamFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmAppPlacementExam CreateAdmAppPlacementExam(System.Decimal _admAppPlacementExamId, System.Decimal _admApplicantId, 
			System.Decimal? _mark, System.Decimal? _passFlg, System.Decimal? _absentFlg, 
			System.Decimal? _admPlaceExamDatetimeId, System.Decimal? _admCdePlacementExamId, 
			System.String _attchCertPath, System.Decimal? _admCdeExamGrdngId, System.Boolean? _exemptFlg, 
			System.Boolean? _approveFlg, System.Decimal? _admPlaceExamLocId, System.Decimal? _admAppRegHistoryId, 
			System.Boolean? _reExamFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			AdmAppPlacementExam newAdmAppPlacementExam = new AdmAppPlacementExam();
			newAdmAppPlacementExam.AdmAppPlacementExamId = _admAppPlacementExamId;
			newAdmAppPlacementExam.AdmApplicantId = _admApplicantId;
			newAdmAppPlacementExam.Mark = _mark;
			newAdmAppPlacementExam.PassFlg = _passFlg;
			newAdmAppPlacementExam.AbsentFlg = _absentFlg;
			newAdmAppPlacementExam.AdmPlaceExamDatetimeId = _admPlaceExamDatetimeId;
			newAdmAppPlacementExam.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmAppPlacementExam.AttchCertPath = _attchCertPath;
			newAdmAppPlacementExam.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			newAdmAppPlacementExam.ExemptFlg = _exemptFlg;
			newAdmAppPlacementExam.ApproveFlg = _approveFlg;
			newAdmAppPlacementExam.AdmPlaceExamLocId = _admPlaceExamLocId;
			newAdmAppPlacementExam.AdmAppRegHistoryId = _admAppRegHistoryId;
			newAdmAppPlacementExam.ReExamFlg = _reExamFlg;
			newAdmAppPlacementExam.SeUserId = _seUserId;
			newAdmAppPlacementExam.LastDate = _lastDate;
			return newAdmAppPlacementExam;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAppPlacementExamId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAppPlacementExamId
		{
			get
			{
				return this.entityData.AdmAppPlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmAppPlacementExamId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmAppPlacementExamId, this.entityData.AdmAppPlacementExamId);
				this.entityData.AdmAppPlacementExamId = value;
				this.EntityId.AdmAppPlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmAppPlacementExamId, this.entityData.AdmAppPlacementExamId);
				OnPropertyChanged("AdmAppPlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_APP_PLACEMENT_EXAM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_APP_PLACEMENT_EXAM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAppPlacementExamId
		{
			get { return this.entityData.OriginalAdmAppPlacementExamId; }
			set { this.entityData.OriginalAdmAppPlacementExamId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmApplicantId
		{
			get
			{
				return this.entityData.AdmApplicantId; 
			}
			
			set
			{
				if (this.entityData.AdmApplicantId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				this.entityData.AdmApplicantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				OnPropertyChanged("AdmApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mark property. 
		///		NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:auto if doublegrade(min(writing/or score)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Mark
		{
			get
			{
				return this.entityData.Mark; 
			}
			
			set
			{
				if (this.entityData.Mark == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.Mark, this.entityData.Mark);
				this.entityData.Mark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.Mark, this.entityData.Mark);
				OnPropertyChanged("Mark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPassFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PassFlg
		{
			get
			{
				return this.entityData.PassFlg; 
			}
			
			set
			{
				if (this.entityData.PassFlg == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.PassFlg, this.entityData.PassFlg);
				this.entityData.PassFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.PassFlg, this.entityData.PassFlg);
				OnPropertyChanged("PassFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsentFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAbsentFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AbsentFlg
		{
			get
			{
				return this.entityData.AbsentFlg; 
			}
			
			set
			{
				if (this.entityData.AbsentFlg == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AbsentFlg, this.entityData.AbsentFlg);
				this.entityData.AbsentFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AbsentFlg, this.entityData.AbsentFlg);
				OnPropertyChanged("AbsentFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmPlaceExamDatetimeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmPlaceExamDatetimeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmPlaceExamDatetimeId
		{
			get
			{
				return this.entityData.AdmPlaceExamDatetimeId; 
			}
			
			set
			{
				if (this.entityData.AdmPlaceExamDatetimeId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmPlaceExamDatetimeId, this.entityData.AdmPlaceExamDatetimeId);
				this.entityData.AdmPlaceExamDatetimeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmPlaceExamDatetimeId, this.entityData.AdmPlaceExamDatetimeId);
				OnPropertyChanged("AdmPlaceExamDatetimeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		if out_flg=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdePlacementExamIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"if out_flg=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchCertPath property. 
		///		If Exam External
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"If Exam External"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchCertPath
		{
			get
			{
				return this.entityData.AttchCertPath; 
			}
			
			set
			{
				if (this.entityData.AttchCertPath == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AttchCertPath, this.entityData.AttchCertPath);
				this.entityData.AttchCertPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AttchCertPath, this.entityData.AttchCertPath);
				OnPropertyChanged("AttchCertPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeExamGrdngId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeExamGrdngIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeExamGrdngId
		{
			get
			{
				return this.entityData.AdmCdeExamGrdngId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeExamGrdngId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				this.entityData.AdmCdeExamGrdngId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				OnPropertyChanged("AdmCdeExamGrdngId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExemptFlg property. 
		///		مقرر معفىXX
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExemptFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مقرر معفىXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExemptFlg
		{
			get
			{
				return this.entityData.ExemptFlg; 
			}
			
			set
			{
				if (this.entityData.ExemptFlg == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.ExemptFlg, this.entityData.ExemptFlg);
				this.entityData.ExemptFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.ExemptFlg, this.entityData.ExemptFlg);
				OnPropertyChanged("ExemptFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmPlaceExamLocId property. 
		///		EJUSTموعد امتحان القبول فى اكتر من قاعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmPlaceExamLocIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"EJUSTموعد امتحان القبول فى اكتر من قاعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmPlaceExamLocId
		{
			get
			{
				return this.entityData.AdmPlaceExamLocId; 
			}
			
			set
			{
				if (this.entityData.AdmPlaceExamLocId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmPlaceExamLocId, this.entityData.AdmPlaceExamLocId);
				this.entityData.AdmPlaceExamLocId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmPlaceExamLocId, this.entityData.AdmPlaceExamLocId);
				OnPropertyChanged("AdmPlaceExamLocId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAppRegHistoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReExamFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsReExamFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ReExamFlg
		{
			get
			{
				return this.entityData.ReExamFlg; 
			}
			
			set
			{
				if (this.entityData.ReExamFlg == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.ReExamFlg, this.entityData.ReExamFlg);
				this.entityData.ReExamFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.ReExamFlg, this.entityData.ReExamFlg);
				OnPropertyChanged("ReExamFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmAppPlacementExamColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppPlacementExamColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return entityData.AdmApplicantIdSource; }
            set { entityData.AdmApplicantIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamGrdngId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeExamGrdng AdmCdeExamGrdngIdSource
      	{
            get { return entityData.AdmCdeExamGrdngIdSource; }
            set { entityData.AdmCdeExamGrdngIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return entityData.AdmCdePlacementExamIdSource; }
            set { entityData.AdmCdePlacementExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmPlaceExamDatetime"/>.
		/// </summary>
		/// <value>The source AdmPlaceExamDatetime for AdmPlaceExamDatetimeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmPlaceExamDatetime AdmPlaceExamDatetimeIdSource
      	{
            get { return entityData.AdmPlaceExamDatetimeIdSource; }
            set { entityData.AdmPlaceExamDatetimeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmPlaceExamLoc"/>.
		/// </summary>
		/// <value>The source AdmPlaceExamLoc for AdmPlaceExamLocId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmPlaceExamLoc AdmPlaceExamLocIdSource
      	{
            get { return entityData.AdmPlaceExamLocIdSource; }
            set { entityData.AdmPlaceExamLocIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ADM_APP_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_APP_PLACEMENT_EXAM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_APP_PLACEMENT_EXAM_ID", "ADM_APPLICANT_ID", "MARK", "PASS_FLG", "ABSENT_FLG", "ADM_PLACE_EXAM_DATETIME_ID", "ADM_CDE_PLACEMENT_EXAM_ID", "ATTCH_CERT_PATH", "ADM_CDE_EXAM_GRDNG_ID", "EXEMPT_FLG", "APPROVE_FLG", "ADM_PLACE_EXAM_LOC_ID", "ADM_APP_REG_HISTORY_ID", "RE_EXAM_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAppPlacementExamEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAppPlacementExam) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAppPlacementExam>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAppPlacementExam);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAppPlacementExam Entity 
		///</summary>
		protected virtual AdmAppPlacementExam Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAppPlacementExam copy = new AdmAppPlacementExam();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAppPlacementExamId = this.AdmAppPlacementExamId;
					copy.OriginalAdmAppPlacementExamId = this.OriginalAdmAppPlacementExamId;
				copy.AdmApplicantId = this.AdmApplicantId;
				copy.Mark = this.Mark;
				copy.PassFlg = this.PassFlg;
				copy.AbsentFlg = this.AbsentFlg;
				copy.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
				copy.AttchCertPath = this.AttchCertPath;
				copy.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
				copy.ExemptFlg = this.ExemptFlg;
				copy.ApproveFlg = this.ApproveFlg;
				copy.AdmPlaceExamLocId = this.AdmPlaceExamLocId;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
				copy.ReExamFlg = this.ReExamFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				copy.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				copy.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.AdmCdeExamGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamGrdngIdSource))
				copy.AdmCdeExamGrdngIdSource = existingCopies[this.AdmCdeExamGrdngIdSource] as AdmCdeExamGrdng;
			else
				copy.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				copy.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmPlaceExamDatetimeIdSource != null && existingCopies.Contains(this.AdmPlaceExamDatetimeIdSource))
				copy.AdmPlaceExamDatetimeIdSource = existingCopies[this.AdmPlaceExamDatetimeIdSource] as AdmPlaceExamDatetime;
			else
				copy.AdmPlaceExamDatetimeIdSource = MakeCopyOf(this.AdmPlaceExamDatetimeIdSource, existingCopies) as AdmPlaceExamDatetime;
			if (this.AdmPlaceExamLocIdSource != null && existingCopies.Contains(this.AdmPlaceExamLocIdSource))
				copy.AdmPlaceExamLocIdSource = existingCopies[this.AdmPlaceExamLocIdSource] as AdmPlaceExamLoc;
			else
				copy.AdmPlaceExamLocIdSource = MakeCopyOf(this.AdmPlaceExamLocIdSource, existingCopies) as AdmPlaceExamLoc;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAppPlacementExam Entity 
		///</summary>
		public virtual AdmAppPlacementExam Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAppPlacementExam Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAppPlacementExam DeepCopy()
		{
			return EntityHelper.Clone<AdmAppPlacementExam>(this as AdmAppPlacementExam);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAppPlacementExamEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAppPlacementExamEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAppPlacementExamEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAppPlacementExamColumn column)
		{
			switch(column)
			{
					case AdmAppPlacementExamColumn.AdmAppPlacementExamId:
					return entityData.AdmAppPlacementExamId != _originalData.AdmAppPlacementExamId;
					case AdmAppPlacementExamColumn.AdmApplicantId:
					return entityData.AdmApplicantId != _originalData.AdmApplicantId;
					case AdmAppPlacementExamColumn.Mark:
					return entityData.Mark != _originalData.Mark;
					case AdmAppPlacementExamColumn.PassFlg:
					return entityData.PassFlg != _originalData.PassFlg;
					case AdmAppPlacementExamColumn.AbsentFlg:
					return entityData.AbsentFlg != _originalData.AbsentFlg;
					case AdmAppPlacementExamColumn.AdmPlaceExamDatetimeId:
					return entityData.AdmPlaceExamDatetimeId != _originalData.AdmPlaceExamDatetimeId;
					case AdmAppPlacementExamColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmAppPlacementExamColumn.AttchCertPath:
					return entityData.AttchCertPath != _originalData.AttchCertPath;
					case AdmAppPlacementExamColumn.AdmCdeExamGrdngId:
					return entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
					case AdmAppPlacementExamColumn.ExemptFlg:
					return entityData.ExemptFlg != _originalData.ExemptFlg;
					case AdmAppPlacementExamColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case AdmAppPlacementExamColumn.AdmPlaceExamLocId:
					return entityData.AdmPlaceExamLocId != _originalData.AdmPlaceExamLocId;
					case AdmAppPlacementExamColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
					case AdmAppPlacementExamColumn.ReExamFlg:
					return entityData.ReExamFlg != _originalData.ReExamFlg;
					case AdmAppPlacementExamColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmAppPlacementExamColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAppPlacementExamColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAppPlacementExamId != _originalData.AdmAppPlacementExamId;
			result = result || entityData.AdmApplicantId != _originalData.AdmApplicantId;
			result = result || entityData.Mark != _originalData.Mark;
			result = result || entityData.PassFlg != _originalData.PassFlg;
			result = result || entityData.AbsentFlg != _originalData.AbsentFlg;
			result = result || entityData.AdmPlaceExamDatetimeId != _originalData.AdmPlaceExamDatetimeId;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.AttchCertPath != _originalData.AttchCertPath;
			result = result || entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
			result = result || entityData.ExemptFlg != _originalData.ExemptFlg;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.AdmPlaceExamLocId != _originalData.AdmPlaceExamLocId;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			result = result || entityData.ReExamFlg != _originalData.ReExamFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAppPlacementExam Entity with the original data.
		///</summary>
		public AdmAppPlacementExam GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAppPlacementExam(
				_originalData.AdmAppPlacementExamId,
				_originalData.AdmApplicantId,
				_originalData.Mark,
				_originalData.PassFlg,
				_originalData.AbsentFlg,
				_originalData.AdmPlaceExamDatetimeId,
				_originalData.AdmCdePlacementExamId,
				_originalData.AttchCertPath,
				_originalData.AdmCdeExamGrdngId,
				_originalData.ExemptFlg,
				_originalData.ApproveFlg,
				_originalData.AdmPlaceExamLocId,
				_originalData.AdmAppRegHistoryId,
				_originalData.ReExamFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmAppPlacementExam)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAppPlacementExamBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAppPlacementExamBase)
				return ValueEquals(this, (AdmAppPlacementExamBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAppPlacementExamBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAppPlacementExamId.GetHashCode() ^ 
					this.AdmApplicantId.GetHashCode() ^ 
					((this.Mark == null) ? string.Empty : this.Mark.ToString()).GetHashCode() ^ 
					((this.PassFlg == null) ? string.Empty : this.PassFlg.ToString()).GetHashCode() ^ 
					((this.AbsentFlg == null) ? string.Empty : this.AbsentFlg.ToString()).GetHashCode() ^ 
					((this.AdmPlaceExamDatetimeId == null) ? string.Empty : this.AdmPlaceExamDatetimeId.ToString()).GetHashCode() ^ 
					((this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString()).GetHashCode() ^ 
					((this.AttchCertPath == null) ? string.Empty : this.AttchCertPath.ToString()).GetHashCode() ^ 
					((this.AdmCdeExamGrdngId == null) ? string.Empty : this.AdmCdeExamGrdngId.ToString()).GetHashCode() ^ 
					((this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.AdmPlaceExamLocId == null) ? string.Empty : this.AdmPlaceExamLocId.ToString()).GetHashCode() ^ 
					((this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString()).GetHashCode() ^ 
					((this.ReExamFlg == null) ? string.Empty : this.ReExamFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAppPlacementExamBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAppPlacementExamBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAppPlacementExamBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAppPlacementExamBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAppPlacementExamBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAppPlacementExamBase Object1, AdmAppPlacementExamBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAppPlacementExamId != Object2.AdmAppPlacementExamId)
				equal = false;
			if (Object1.AdmApplicantId != Object2.AdmApplicantId)
				equal = false;
			if ( Object1.Mark != null && Object2.Mark != null )
			{
				if (Object1.Mark != Object2.Mark)
					equal = false;
			}
			else if (Object1.Mark == null ^ Object2.Mark == null )
			{
				equal = false;
			}
			if ( Object1.PassFlg != null && Object2.PassFlg != null )
			{
				if (Object1.PassFlg != Object2.PassFlg)
					equal = false;
			}
			else if (Object1.PassFlg == null ^ Object2.PassFlg == null )
			{
				equal = false;
			}
			if ( Object1.AbsentFlg != null && Object2.AbsentFlg != null )
			{
				if (Object1.AbsentFlg != Object2.AbsentFlg)
					equal = false;
			}
			else if (Object1.AbsentFlg == null ^ Object2.AbsentFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmPlaceExamDatetimeId != null && Object2.AdmPlaceExamDatetimeId != null )
			{
				if (Object1.AdmPlaceExamDatetimeId != Object2.AdmPlaceExamDatetimeId)
					equal = false;
			}
			else if (Object1.AdmPlaceExamDatetimeId == null ^ Object2.AdmPlaceExamDatetimeId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdePlacementExamId != null && Object2.AdmCdePlacementExamId != null )
			{
				if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
					equal = false;
			}
			else if (Object1.AdmCdePlacementExamId == null ^ Object2.AdmCdePlacementExamId == null )
			{
				equal = false;
			}
			if ( Object1.AttchCertPath != null && Object2.AttchCertPath != null )
			{
				if (Object1.AttchCertPath != Object2.AttchCertPath)
					equal = false;
			}
			else if (Object1.AttchCertPath == null ^ Object2.AttchCertPath == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeExamGrdngId != null && Object2.AdmCdeExamGrdngId != null )
			{
				if (Object1.AdmCdeExamGrdngId != Object2.AdmCdeExamGrdngId)
					equal = false;
			}
			else if (Object1.AdmCdeExamGrdngId == null ^ Object2.AdmCdeExamGrdngId == null )
			{
				equal = false;
			}
			if ( Object1.ExemptFlg != null && Object2.ExemptFlg != null )
			{
				if (Object1.ExemptFlg != Object2.ExemptFlg)
					equal = false;
			}
			else if (Object1.ExemptFlg == null ^ Object2.ExemptFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmPlaceExamLocId != null && Object2.AdmPlaceExamLocId != null )
			{
				if (Object1.AdmPlaceExamLocId != Object2.AdmPlaceExamLocId)
					equal = false;
			}
			else if (Object1.AdmPlaceExamLocId == null ^ Object2.AdmPlaceExamLocId == null )
			{
				equal = false;
			}
			if ( Object1.AdmAppRegHistoryId != null && Object2.AdmAppRegHistoryId != null )
			{
				if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
					equal = false;
			}
			else if (Object1.AdmAppRegHistoryId == null ^ Object2.AdmAppRegHistoryId == null )
			{
				equal = false;
			}
			if ( Object1.ReExamFlg != null && Object2.ReExamFlg != null )
			{
				if (Object1.ReExamFlg != Object2.ReExamFlg)
					equal = false;
			}
			else if (Object1.ReExamFlg == null ^ Object2.ReExamFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAppPlacementExamBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAppPlacementExamComparer GetComparer()
        {
            return new AdmAppPlacementExamComparer();
        }
        */

        // Comparer delegates back to AdmAppPlacementExam
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAppPlacementExam rhs, AdmAppPlacementExamColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAppPlacementExamColumn.AdmAppPlacementExamId:
            		return this.AdmAppPlacementExamId.CompareTo(rhs.AdmAppPlacementExamId);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmApplicantId:
            		return this.AdmApplicantId.CompareTo(rhs.AdmApplicantId);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.Mark:
            		return this.Mark.Value.CompareTo(rhs.Mark.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.PassFlg:
            		return this.PassFlg.Value.CompareTo(rhs.PassFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AbsentFlg:
            		return this.AbsentFlg.Value.CompareTo(rhs.AbsentFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmPlaceExamDatetimeId:
            		return this.AdmPlaceExamDatetimeId.Value.CompareTo(rhs.AdmPlaceExamDatetimeId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.Value.CompareTo(rhs.AdmCdePlacementExamId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AttchCertPath:
            		return this.AttchCertPath.CompareTo(rhs.AttchCertPath);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmCdeExamGrdngId:
            		return this.AdmCdeExamGrdngId.Value.CompareTo(rhs.AdmCdeExamGrdngId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.ExemptFlg:
            		return this.ExemptFlg.Value.CompareTo(rhs.ExemptFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmPlaceExamLocId:
            		return this.AdmPlaceExamLocId.Value.CompareTo(rhs.AdmPlaceExamLocId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.Value.CompareTo(rhs.AdmAppRegHistoryId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.ReExamFlg:
            		return this.ReExamFlg.Value.CompareTo(rhs.ReExamFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmAppPlacementExamColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAppPlacementExamKey> Members
		
		// member variable for the EntityId property
		private AdmAppPlacementExamKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAppPlacementExamKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAppPlacementExamKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAppPlacementExam")
					.Append("|").Append( this.AdmAppPlacementExamId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- AdmAppPlacementExamId: {0}{16}- AdmApplicantId: {1}{16}- Mark: {2}{16}- PassFlg: {3}{16}- AbsentFlg: {4}{16}- AdmPlaceExamDatetimeId: {5}{16}- AdmCdePlacementExamId: {6}{16}- AttchCertPath: {7}{16}- AdmCdeExamGrdngId: {8}{16}- ExemptFlg: {9}{16}- ApproveFlg: {10}{16}- AdmPlaceExamLocId: {11}{16}- AdmAppRegHistoryId: {12}{16}- ReExamFlg: {13}{16}- SeUserId: {14}{16}- LastDate: {15}{16}{18}", 
				this.AdmAppPlacementExamId,
				this.AdmApplicantId,
				(this.Mark == null) ? string.Empty : this.Mark.ToString(),
				(this.PassFlg == null) ? string.Empty : this.PassFlg.ToString(),
				(this.AbsentFlg == null) ? string.Empty : this.AbsentFlg.ToString(),
				(this.AdmPlaceExamDatetimeId == null) ? string.Empty : this.AdmPlaceExamDatetimeId.ToString(),
				(this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString(),
				(this.AttchCertPath == null) ? string.Empty : this.AttchCertPath.ToString(),
				(this.AdmCdeExamGrdngId == null) ? string.Empty : this.AdmCdeExamGrdngId.ToString(),
				(this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.AdmPlaceExamLocId == null) ? string.Empty : this.AdmPlaceExamLocId.ToString(),
				(this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString(),
				(this.ReExamFlg == null) ? string.Empty : this.ReExamFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_APP_PLACEMENT_EXAM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAppPlacementExamEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_APP_PLACEMENT_EXAM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_APP_PLACEMENT_EXAM"</remarks>
		public System.Decimal AdmAppPlacementExamId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAppPlacementExamId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APPLICANT_ID : 
		/// </summary>
		public System.Decimal		  AdmApplicantId = 0.0m;
		
		/// <summary>
		/// MARK : NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		public System.Decimal?		  Mark = null;
		
		/// <summary>
		/// PASS_FLG : 
		/// </summary>
		public System.Decimal?		  PassFlg = null;
		
		/// <summary>
		/// ABSENT_FLG : 
		/// </summary>
		public System.Decimal?		  AbsentFlg = null;
		
		/// <summary>
		/// ADM_PLACE_EXAM_DATETIME_ID : 
		/// </summary>
		public System.Decimal?		  AdmPlaceExamDatetimeId = null;
		
		/// <summary>
		/// ADM_CDE_PLACEMENT_EXAM_ID : if out_flg=1
		/// </summary>
		public System.Decimal?		  AdmCdePlacementExamId = null;
		
		/// <summary>
		/// ATTCH_CERT_PATH : If Exam External
		/// </summary>
		public System.String		  AttchCertPath = null;
		
		/// <summary>
		/// ADM_CDE_EXAM_GRDNG_ID : 
		/// </summary>
		public System.Decimal?		  AdmCdeExamGrdngId = null;
		
		/// <summary>
		/// EXEMPT_FLG : مقرر معفىXX
		/// </summary>
		public System.Boolean?		  ExemptFlg = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// ADM_PLACE_EXAM_LOC_ID : EJUSTموعد امتحان القبول فى اكتر من قاعة
		/// </summary>
		public System.Decimal?		  AdmPlaceExamLocId = null;
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : 
		/// </summary>
		public System.Decimal?		  AdmAppRegHistoryId = null;
		
		/// <summary>
		/// RE_EXAM_FLG : 
		/// </summary>
		public System.Boolean?		  ReExamFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private AdmApplicant _admApplicantIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return this._admApplicantIdSource; }
            set { this._admApplicantIdSource = value; }
      	}
		private AdmCdeExamGrdng _admCdeExamGrdngIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamGrdngId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeExamGrdng AdmCdeExamGrdngIdSource
      	{
            get { return this._admCdeExamGrdngIdSource; }
            set { this._admCdeExamGrdngIdSource = value; }
      	}
		private AdmCdePlacementExam _admCdePlacementExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return this._admCdePlacementExamIdSource; }
            set { this._admCdePlacementExamIdSource = value; }
      	}
		private AdmPlaceExamDatetime _admPlaceExamDatetimeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmPlaceExamDatetime"/>.
		/// </summary>
		/// <value>The source AdmPlaceExamDatetime for AdmPlaceExamDatetimeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmPlaceExamDatetime AdmPlaceExamDatetimeIdSource
      	{
            get { return this._admPlaceExamDatetimeIdSource; }
            set { this._admPlaceExamDatetimeIdSource = value; }
      	}
		private AdmPlaceExamLoc _admPlaceExamLocIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmPlaceExamLoc"/>.
		/// </summary>
		/// <value>The source AdmPlaceExamLoc for AdmPlaceExamLocId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmPlaceExamLoc AdmPlaceExamLocIdSource
      	{
            get { return this._admPlaceExamLocIdSource; }
            set { this._admPlaceExamLocIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocAdmAppPlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocAdmAppPlacementExamId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocAdmAppPlacementExamId == null)
				{
				_gsAttchdDocAdmAppPlacementExamId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocAdmAppPlacementExamId;
			}
			set { _gsAttchdDocAdmAppPlacementExamId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAppPlacementExamEntityData _tmp = new AdmAppPlacementExamEntityData();
						
			_tmp.AdmAppPlacementExamId = this.AdmAppPlacementExamId;
			_tmp.OriginalAdmAppPlacementExamId = this.OriginalAdmAppPlacementExamId;
			
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.Mark = this.Mark;
			_tmp.PassFlg = this.PassFlg;
			_tmp.AbsentFlg = this.AbsentFlg;
			_tmp.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.AttchCertPath = this.AttchCertPath;
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.AdmPlaceExamLocId = this.AdmPlaceExamLocId;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.ReExamFlg = this.ReExamFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.AdmApplicantIdSource != null)
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource) as AdmApplicant;
			if (this.AdmCdeExamGrdngIdSource != null)
				_tmp.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource) as AdmCdeExamGrdng;
			if (this.AdmCdePlacementExamIdSource != null)
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource) as AdmCdePlacementExam;
			if (this.AdmPlaceExamDatetimeIdSource != null)
				_tmp.AdmPlaceExamDatetimeIdSource = MakeCopyOf(this.AdmPlaceExamDatetimeIdSource) as AdmPlaceExamDatetime;
			if (this.AdmPlaceExamLocIdSource != null)
				_tmp.AdmPlaceExamLocIdSource = MakeCopyOf(this.AdmPlaceExamLocIdSource) as AdmPlaceExamLoc;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocAdmAppPlacementExamId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAppPlacementExamEntityData _tmp = new AdmAppPlacementExamEntityData();
						
			_tmp.AdmAppPlacementExamId = this.AdmAppPlacementExamId;
			_tmp.OriginalAdmAppPlacementExamId = this.OriginalAdmAppPlacementExamId;
			
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.Mark = this.Mark;
			_tmp.PassFlg = this.PassFlg;
			_tmp.AbsentFlg = this.AbsentFlg;
			_tmp.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.AttchCertPath = this.AttchCertPath;
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.AdmPlaceExamLocId = this.AdmPlaceExamLocId;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.ReExamFlg = this.ReExamFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				_tmp.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.AdmCdeExamGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamGrdngIdSource))
				_tmp.AdmCdeExamGrdngIdSource = existingCopies[this.AdmCdeExamGrdngIdSource] as AdmCdeExamGrdng;
			else
				_tmp.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				_tmp.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmPlaceExamDatetimeIdSource != null && existingCopies.Contains(this.AdmPlaceExamDatetimeIdSource))
				_tmp.AdmPlaceExamDatetimeIdSource = existingCopies[this.AdmPlaceExamDatetimeIdSource] as AdmPlaceExamDatetime;
			else
				_tmp.AdmPlaceExamDatetimeIdSource = MakeCopyOf(this.AdmPlaceExamDatetimeIdSource, existingCopies) as AdmPlaceExamDatetime;
			if (this.AdmPlaceExamLocIdSource != null && existingCopies.Contains(this.AdmPlaceExamLocIdSource))
				_tmp.AdmPlaceExamLocIdSource = existingCopies[this.AdmPlaceExamLocIdSource] as AdmPlaceExamLoc;
			else
				_tmp.AdmPlaceExamLocIdSource = MakeCopyOf(this.AdmPlaceExamLocIdSource, existingCopies) as AdmPlaceExamLoc;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppPlacementExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAppPlacementExamColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppPlacementExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAppPlacementExamColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppPlacementExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAppPlacementExamColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAppPlacementExamEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAppPlacementExamEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppPlacementExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAppPlacementExamColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAppPlacementExamEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAppPlacementExamEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAppPlacementExamEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAppPlacementExam"/> object.
	/// </remarks>
	public class AdmAppPlacementExamEventArgs : System.EventArgs
	{
		private AdmAppPlacementExamColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppPlacementExamEventArgs class.
		///</summary>
		public AdmAppPlacementExamEventArgs(AdmAppPlacementExamColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppPlacementExamEventArgs class.
		///</summary>
		public AdmAppPlacementExamEventArgs(AdmAppPlacementExamColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAppPlacementExamColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAppPlacementExamColumn" />
		public AdmAppPlacementExamColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAppPlacementExam related events.
	///</summary>
	public delegate void AdmAppPlacementExamEventHandler(object sender, AdmAppPlacementExamEventArgs e);
	
	#region AdmAppPlacementExamComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAppPlacementExamComparer : System.Collections.Generic.IComparer<AdmAppPlacementExam>
	{
		AdmAppPlacementExamColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppPlacementExamComparer"/> class.
        /// </summary>
		public AdmAppPlacementExamComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppPlacementExamComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAppPlacementExamComparer(AdmAppPlacementExamColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAppPlacementExam"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAppPlacementExam"/> to compare.</param>
        /// <param name="b">The second <c>AdmAppPlacementExam</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAppPlacementExam a, AdmAppPlacementExam b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAppPlacementExam entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAppPlacementExam a, AdmAppPlacementExam b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAppPlacementExamColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAppPlacementExamKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAppPlacementExam"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAppPlacementExamKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamKey class.
		/// </summary>
		public AdmAppPlacementExamKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamKey class.
		/// </summary>
		public AdmAppPlacementExamKey(AdmAppPlacementExamBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAppPlacementExamId = entity.AdmAppPlacementExamId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppPlacementExamKey class.
		/// </summary>
		public AdmAppPlacementExamKey(System.Decimal _admAppPlacementExamId)
		{
			#region Init Properties

			this.AdmAppPlacementExamId = _admAppPlacementExamId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAppPlacementExamBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAppPlacementExamBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAppPlacementExamId property
		private System.Decimal _admAppPlacementExamId;
		
		/// <summary>
		/// Gets or sets the AdmAppPlacementExamId property.
		/// </summary>
		public System.Decimal AdmAppPlacementExamId
		{
			get { return _admAppPlacementExamId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAppPlacementExamId = value;
				
				_admAppPlacementExamId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAppPlacementExamId = ( values["AdmAppPlacementExamId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAppPlacementExamId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAppPlacementExamId", AdmAppPlacementExamId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAppPlacementExamId: {0}{1}",
								AdmAppPlacementExamId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAppPlacementExamColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAppPlacementExam columns.
	/// </summary>
	[Serializable]
	public enum AdmAppPlacementExamColumn : int
	{
		/// <summary>
		/// AdmAppPlacementExamId : 
		/// </summary>
		[EnumTextValue("ADM_APP_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_APP_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAppPlacementExamId = 1,
		/// <summary>
		/// AdmApplicantId : 
		/// </summary>
		[EnumTextValue("ADM_APPLICANT_ID")]
		[ColumnEnum("ADM_APPLICANT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmApplicantId = 2,
		/// <summary>
		/// Mark : NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		[EnumTextValue("MARK")]
		[ColumnEnum("MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Mark = 3,
		/// <summary>
		/// PassFlg : 
		/// </summary>
		[EnumTextValue("PASS_FLG")]
		[ColumnEnum("PASS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PassFlg = 4,
		/// <summary>
		/// AbsentFlg : 
		/// </summary>
		[EnumTextValue("ABSENT_FLG")]
		[ColumnEnum("ABSENT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AbsentFlg = 5,
		/// <summary>
		/// AdmPlaceExamDatetimeId : 
		/// </summary>
		[EnumTextValue("ADM_PLACE_EXAM_DATETIME_ID")]
		[ColumnEnum("ADM_PLACE_EXAM_DATETIME_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmPlaceExamDatetimeId = 6,
		/// <summary>
		/// AdmCdePlacementExamId : if out_flg=1
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdePlacementExamId = 7,
		/// <summary>
		/// AttchCertPath : If Exam External
		/// </summary>
		[EnumTextValue("ATTCH_CERT_PATH")]
		[ColumnEnum("ATTCH_CERT_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchCertPath = 8,
		/// <summary>
		/// AdmCdeExamGrdngId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_EXAM_GRDNG_ID")]
		[ColumnEnum("ADM_CDE_EXAM_GRDNG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeExamGrdngId = 9,
		/// <summary>
		/// ExemptFlg : مقرر معفىXX
		/// </summary>
		[EnumTextValue("EXEMPT_FLG")]
		[ColumnEnum("EXEMPT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExemptFlg = 10,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 11,
		/// <summary>
		/// AdmPlaceExamLocId : EJUSTموعد امتحان القبول فى اكتر من قاعة
		/// </summary>
		[EnumTextValue("ADM_PLACE_EXAM_LOC_ID")]
		[ColumnEnum("ADM_PLACE_EXAM_LOC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmPlaceExamLocId = 12,
		/// <summary>
		/// AdmAppRegHistoryId : 
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAppRegHistoryId = 13,
		/// <summary>
		/// ReExamFlg : 
		/// </summary>
		[EnumTextValue("RE_EXAM_FLG")]
		[ColumnEnum("RE_EXAM_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ReExamFlg = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16
	}//End enum

	#endregion AdmAppPlacementExamColumn Enum

} // end namespace
