
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudActivity.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_ACTIVITY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudActivityBase : EntityBase, IEdStudActivity, IEntityId<EdStudActivityKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudActivityEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudActivityEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudActivityEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudActivity> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudActivityEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudActivityEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudActivityBase"/> instance.
		///</summary>
		public EdStudActivityBase()
		{
			this.entityData = new EdStudActivityEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudActivityBase"/> instance.
		///</summary>
		///<param name="_edStudActvityId">انشطة الطالب</param>
		///<param name="_edStudId"></param>
		///<param name="_actType"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gsCdeActvtyTypeId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdStudActivityBase(System.Decimal _edStudActvityId, System.Decimal? _edStudId, 
			System.Decimal? _actType, System.String _descrAr, System.String _descrEn, 
			System.Int32? _gsCdeActvtyTypeId, System.Decimal? _admApplicantId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new EdStudActivityEntityData();
			this.backupData = null;

			this.EdStudActvityId = _edStudActvityId;
			this.EdStudId = _edStudId;
			this.ActType = _actType;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.GsCdeActvtyTypeId = _gsCdeActvtyTypeId;
			this.AdmApplicantId = _admApplicantId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudActivity"/> instance.
		///</summary>
		///<param name="_edStudActvityId">انشطة الطالب</param>
		///<param name="_edStudId"></param>
		///<param name="_actType"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gsCdeActvtyTypeId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdStudActivity CreateEdStudActivity(System.Decimal _edStudActvityId, System.Decimal? _edStudId, 
			System.Decimal? _actType, System.String _descrAr, System.String _descrEn, 
			System.Int32? _gsCdeActvtyTypeId, System.Decimal? _admApplicantId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			EdStudActivity newEdStudActivity = new EdStudActivity();
			newEdStudActivity.EdStudActvityId = _edStudActvityId;
			newEdStudActivity.EdStudId = _edStudId;
			newEdStudActivity.ActType = _actType;
			newEdStudActivity.DescrAr = _descrAr;
			newEdStudActivity.DescrEn = _descrEn;
			newEdStudActivity.GsCdeActvtyTypeId = _gsCdeActvtyTypeId;
			newEdStudActivity.AdmApplicantId = _admApplicantId;
			newEdStudActivity.SeUserId = _seUserId;
			newEdStudActivity.LastDate = _lastDate;
			return newEdStudActivity;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudActvityId property. 
		///		انشطة الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"انشطة الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudActvityId
		{
			get
			{
				return this.entityData.EdStudActvityId; 
			}
			
			set
			{
				if (this.entityData.EdStudActvityId == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.EdStudActvityId, this.entityData.EdStudActvityId);
				this.entityData.EdStudActvityId = value;
				this.EntityId.EdStudActvityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.EdStudActvityId, this.entityData.EdStudActvityId);
				OnPropertyChanged("EdStudActvityId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_ACTVITY_ID property.
		///		انشطة الطالب
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_ACTVITY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudActvityId
		{
			get { return this.entityData.OriginalEdStudActvityId; }
			set { this.entityData.OriginalEdStudActvityId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActType property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsActTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ActType
		{
			get
			{
				return this.entityData.ActType; 
			}
			
			set
			{
				if (this.entityData.ActType == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.ActType, this.entityData.ActType);
				this.entityData.ActType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.ActType, this.entityData.ActType);
				OnPropertyChanged("ActType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeActvtyTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGsCdeActvtyTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GsCdeActvtyTypeId
		{
			get
			{
				return this.entityData.GsCdeActvtyTypeId; 
			}
			
			set
			{
				if (this.entityData.GsCdeActvtyTypeId == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.GsCdeActvtyTypeId, this.entityData.GsCdeActvtyTypeId);
				this.entityData.GsCdeActvtyTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.GsCdeActvtyTypeId, this.entityData.GsCdeActvtyTypeId);
				OnPropertyChanged("GsCdeActvtyTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmApplicantIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmApplicantId
		{
			get
			{
				return this.entityData.AdmApplicantId; 
			}
			
			set
			{
				if (this.entityData.AdmApplicantId == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				this.entityData.AdmApplicantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				OnPropertyChanged("AdmApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudActivityColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudActivityColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return entityData.AdmApplicantIdSource; }
            set { entityData.AdmApplicantIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeActvtyType"/>.
		/// </summary>
		/// <value>The source GsCdeActvtyType for GsCdeActvtyTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeActvtyType GsCdeActvtyTypeIdSource
      	{
            get { return entityData.GsCdeActvtyTypeIdSource; }
            set { entityData.GsCdeActvtyTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_ACTIVITY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_ACTVITY_ID", "ED_STUD_ID", "ACT_TYPE", "DESCR_AR", "DESCR_EN", "GS_CDE_ACTVTY_TYPE_ID", "ADM_APPLICANT_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudActivityEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudActivity) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudActivity>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudActivity);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudActivity Entity 
		///</summary>
		protected virtual EdStudActivity Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudActivity copy = new EdStudActivity();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudActvityId = this.EdStudActvityId;
					copy.OriginalEdStudActvityId = this.OriginalEdStudActvityId;
				copy.EdStudId = this.EdStudId;
				copy.ActType = this.ActType;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.GsCdeActvtyTypeId = this.GsCdeActvtyTypeId;
				copy.AdmApplicantId = this.AdmApplicantId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				copy.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				copy.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.GsCdeActvtyTypeIdSource != null && existingCopies.Contains(this.GsCdeActvtyTypeIdSource))
				copy.GsCdeActvtyTypeIdSource = existingCopies[this.GsCdeActvtyTypeIdSource] as GsCdeActvtyType;
			else
				copy.GsCdeActvtyTypeIdSource = MakeCopyOf(this.GsCdeActvtyTypeIdSource, existingCopies) as GsCdeActvtyType;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudActivity Entity 
		///</summary>
		public virtual EdStudActivity Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudActivity Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudActivity DeepCopy()
		{
			return EntityHelper.Clone<EdStudActivity>(this as EdStudActivity);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudActivityEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudActivityEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudActivityEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudActivityColumn column)
		{
			switch(column)
			{
					case EdStudActivityColumn.EdStudActvityId:
					return entityData.EdStudActvityId != _originalData.EdStudActvityId;
					case EdStudActivityColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudActivityColumn.ActType:
					return entityData.ActType != _originalData.ActType;
					case EdStudActivityColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EdStudActivityColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdStudActivityColumn.GsCdeActvtyTypeId:
					return entityData.GsCdeActvtyTypeId != _originalData.GsCdeActvtyTypeId;
					case EdStudActivityColumn.AdmApplicantId:
					return entityData.AdmApplicantId != _originalData.AdmApplicantId;
					case EdStudActivityColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudActivityColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudActivityColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudActvityId != _originalData.EdStudActvityId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ActType != _originalData.ActType;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.GsCdeActvtyTypeId != _originalData.GsCdeActvtyTypeId;
			result = result || entityData.AdmApplicantId != _originalData.AdmApplicantId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudActivity Entity with the original data.
		///</summary>
		public EdStudActivity GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudActivity(
				_originalData.EdStudActvityId,
				_originalData.EdStudId,
				_originalData.ActType,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.GsCdeActvtyTypeId,
				_originalData.AdmApplicantId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdStudActivity)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudActivityBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudActivityBase)
				return ValueEquals(this, (EdStudActivityBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudActivityBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudActvityId.GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					((this.ActType == null) ? string.Empty : this.ActType.ToString()).GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.GsCdeActvtyTypeId == null) ? string.Empty : this.GsCdeActvtyTypeId.ToString()).GetHashCode() ^ 
					((this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudActivityBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudActivityBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudActivityBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudActivityBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudActivityBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudActivityBase Object1, EdStudActivityBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudActvityId != Object2.EdStudActvityId)
				equal = false;
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if ( Object1.ActType != null && Object2.ActType != null )
			{
				if (Object1.ActType != Object2.ActType)
					equal = false;
			}
			else if (Object1.ActType == null ^ Object2.ActType == null )
			{
				equal = false;
			}
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.GsCdeActvtyTypeId != null && Object2.GsCdeActvtyTypeId != null )
			{
				if (Object1.GsCdeActvtyTypeId != Object2.GsCdeActvtyTypeId)
					equal = false;
			}
			else if (Object1.GsCdeActvtyTypeId == null ^ Object2.GsCdeActvtyTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AdmApplicantId != null && Object2.AdmApplicantId != null )
			{
				if (Object1.AdmApplicantId != Object2.AdmApplicantId)
					equal = false;
			}
			else if (Object1.AdmApplicantId == null ^ Object2.AdmApplicantId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudActivityBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudActivityComparer GetComparer()
        {
            return new EdStudActivityComparer();
        }
        */

        // Comparer delegates back to EdStudActivity
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudActivity rhs, EdStudActivityColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudActivityColumn.EdStudActvityId:
            		return this.EdStudActvityId.CompareTo(rhs.EdStudActvityId);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.ActType:
            		return this.ActType.Value.CompareTo(rhs.ActType.Value);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.GsCdeActvtyTypeId:
            		return this.GsCdeActvtyTypeId.Value.CompareTo(rhs.GsCdeActvtyTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.AdmApplicantId:
            		return this.AdmApplicantId.Value.CompareTo(rhs.AdmApplicantId.Value);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudActivityColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudActivityKey> Members
		
		// member variable for the EntityId property
		private EdStudActivityKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudActivityKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudActivityKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudActivity")
					.Append("|").Append( this.EdStudActvityId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EdStudActvityId: {0}{9}- EdStudId: {1}{9}- ActType: {2}{9}- DescrAr: {3}{9}- DescrEn: {4}{9}- GsCdeActvtyTypeId: {5}{9}- AdmApplicantId: {6}{9}- SeUserId: {7}{9}- LastDate: {8}{9}{11}", 
				this.EdStudActvityId,
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				(this.ActType == null) ? string.Empty : this.ActType.ToString(),
				this.DescrAr,
				this.DescrEn,
				(this.GsCdeActvtyTypeId == null) ? string.Empty : this.GsCdeActvtyTypeId.ToString(),
				(this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_ACTIVITY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudActivityEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_ACTVITY_ID : انشطة الطالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_ACTIVITY"</remarks>
		public System.Decimal EdStudActvityId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudActvityId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// ACT_TYPE : 
		/// </summary>
		public System.Decimal?		  ActType = null;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// GS_CDE_ACTVTY_TYPE_ID : 
		/// </summary>
		public System.Int32?		  GsCdeActvtyTypeId = null;
		
		/// <summary>
		/// ADM_APPLICANT_ID : 
		/// </summary>
		public System.Decimal?		  AdmApplicantId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmApplicant _admApplicantIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return this._admApplicantIdSource; }
            set { this._admApplicantIdSource = value; }
      	}
		private GsCdeActvtyType _gsCdeActvtyTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeActvtyType"/>.
		/// </summary>
		/// <value>The source GsCdeActvtyType for GsCdeActvtyTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeActvtyType GsCdeActvtyTypeIdSource
      	{
            get { return this._gsCdeActvtyTypeIdSource; }
            set { this._gsCdeActvtyTypeIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudActivityEntityData _tmp = new EdStudActivityEntityData();
						
			_tmp.EdStudActvityId = this.EdStudActvityId;
			_tmp.OriginalEdStudActvityId = this.OriginalEdStudActvityId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.ActType = this.ActType;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GsCdeActvtyTypeId = this.GsCdeActvtyTypeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null)
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource) as AdmApplicant;
			if (this.GsCdeActvtyTypeIdSource != null)
				_tmp.GsCdeActvtyTypeIdSource = MakeCopyOf(this.GsCdeActvtyTypeIdSource) as GsCdeActvtyType;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudActivityEntityData _tmp = new EdStudActivityEntityData();
						
			_tmp.EdStudActvityId = this.EdStudActvityId;
			_tmp.OriginalEdStudActvityId = this.OriginalEdStudActvityId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.ActType = this.ActType;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GsCdeActvtyTypeId = this.GsCdeActvtyTypeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				_tmp.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.GsCdeActvtyTypeIdSource != null && existingCopies.Contains(this.GsCdeActvtyTypeIdSource))
				_tmp.GsCdeActvtyTypeIdSource = existingCopies[this.GsCdeActvtyTypeIdSource] as GsCdeActvtyType;
			else
				_tmp.GsCdeActvtyTypeIdSource = MakeCopyOf(this.GsCdeActvtyTypeIdSource, existingCopies) as GsCdeActvtyType;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudActivityColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudActivityColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudActivityColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudActivityColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudActivityColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudActivityColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudActivityEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudActivityEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudActivityColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudActivityColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudActivityEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudActivityEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudActivityEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudActivity"/> object.
	/// </remarks>
	public class EdStudActivityEventArgs : System.EventArgs
	{
		private EdStudActivityColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudActivityEventArgs class.
		///</summary>
		public EdStudActivityEventArgs(EdStudActivityColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudActivityEventArgs class.
		///</summary>
		public EdStudActivityEventArgs(EdStudActivityColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudActivityColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudActivityColumn" />
		public EdStudActivityColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudActivity related events.
	///</summary>
	public delegate void EdStudActivityEventHandler(object sender, EdStudActivityEventArgs e);
	
	#region EdStudActivityComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudActivityComparer : System.Collections.Generic.IComparer<EdStudActivity>
	{
		EdStudActivityColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudActivityComparer"/> class.
        /// </summary>
		public EdStudActivityComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudActivityComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudActivityComparer(EdStudActivityColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudActivity"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudActivity"/> to compare.</param>
        /// <param name="b">The second <c>EdStudActivity</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudActivity a, EdStudActivity b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudActivity entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudActivity a, EdStudActivity b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudActivityColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudActivityKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudActivity"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudActivityKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudActivityKey class.
		/// </summary>
		public EdStudActivityKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudActivityKey class.
		/// </summary>
		public EdStudActivityKey(EdStudActivityBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudActvityId = entity.EdStudActvityId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudActivityKey class.
		/// </summary>
		public EdStudActivityKey(System.Decimal _edStudActvityId)
		{
			#region Init Properties

			this.EdStudActvityId = _edStudActvityId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudActivityBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudActivityBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudActvityId property
		private System.Decimal _edStudActvityId;
		
		/// <summary>
		/// Gets or sets the EdStudActvityId property.
		/// </summary>
		public System.Decimal EdStudActvityId
		{
			get { return _edStudActvityId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudActvityId = value;
				
				_edStudActvityId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudActvityId = ( values["EdStudActvityId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudActvityId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudActvityId", EdStudActvityId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudActvityId: {0}{1}",
								EdStudActvityId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudActivityColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudActivity columns.
	/// </summary>
	[Serializable]
	public enum EdStudActivityColumn : int
	{
		/// <summary>
		/// EdStudActvityId : انشطة الطالب
		/// </summary>
		[EnumTextValue("ED_STUD_ACTVITY_ID")]
		[ColumnEnum("ED_STUD_ACTVITY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudActvityId = 1,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 2,
		/// <summary>
		/// ActType : 
		/// </summary>
		[EnumTextValue("ACT_TYPE")]
		[ColumnEnum("ACT_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ActType = 3,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		DescrAr = 4,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		DescrEn = 5,
		/// <summary>
		/// GsCdeActvtyTypeId : 
		/// </summary>
		[EnumTextValue("GS_CDE_ACTVTY_TYPE_ID")]
		[ColumnEnum("GS_CDE_ACTVTY_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GsCdeActvtyTypeId = 6,
		/// <summary>
		/// AdmApplicantId : 
		/// </summary>
		[EnumTextValue("ADM_APPLICANT_ID")]
		[ColumnEnum("ADM_APPLICANT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmApplicantId = 7,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 8,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 9
	}//End enum

	#endregion EdStudActivityColumn Enum

} // end namespace
