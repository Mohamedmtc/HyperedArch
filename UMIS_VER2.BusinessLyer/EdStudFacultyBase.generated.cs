
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudFaculty.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_FACULTY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudFacultyBase : EntityBase, IEdStudFaculty, IEntityId<EdStudFacultyKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudFacultyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudFacultyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudFacultyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudFaculty> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudFacultyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudFacultyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudFacultyBase"/> instance.
		///</summary>
		public EdStudFacultyBase()
		{
			this.entityData = new EdStudFacultyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudFacultyBase"/> instance.
		///</summary>
		///<param name="_edStudFacultyId"></param>
		///<param name="_edStudId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_studFacultyCode"></param>
		///<param name="_admCdeAppTypeId"></param>
		///<param name="_edAcadYearJoinId"></param>
		///<param name="_edCodeSemesterJoinId"></param>
		///<param name="_enrollDate"></param>
		///<param name="_comptativeRate"></param>
		///<param name="_fullTimeFlg">1: morning
		/// 		/// 2: evening   KU</param>
		///<param name="_edCdeQualPhase"></param>
		///<param name="_edStudQualId"></param>
		///<param name="_graduatesFlag"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_withHonor"></param>
		///<param name="_entPolicyAccumHonorId">XXXXX</param>
		///<param name="_accumCredit"></param>
		///<param name="_accumPoints"></param>
		///<param name="_entMainGrad1"></param>
		///<param name="_entMainGrad2"></param>
		///<param name="_entMainGrad3"></param>
		///<param name="_entMainMatrixId"></param>
		///<param name="_transferFlg"></param>
		///<param name="_admCodeTransferTypeId"></param>
		///<param name="_univApproveDate"></param>
		///<param name="_facApproveDate"></param>
		///<param name="_deptApproveDate"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_isActive"></param>
		///<param name="_notes"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_cgpa"></param>
		///<param name="_edBylawId"></param>
		///<param name="_oldAlumniFlg"></param>
		///<param name="_studCardFlg"></param>
		///<param name="_grantingCode"></param>
		///<param name="_isLast"></param>
		///<param name="_amanestPermanentStopFlag"></param>
		///<param name="_batchNo">رقم الدفعة</param>
		///<param name="_gsCdeHonorId"></param>
		///<param name="_trnsfrFrom">الجهة المحول منها</param>
		///<param name="_trnsfrNotes">ملاحظات التحويل</param>
		///<param name="_trnsfrDate">تاريخ التحويل</param>
		///<param name="_orgFacultyNameAr">التنسيق المدنى الكلية المرشح لها</param>
		///<param name="_studFeeBalance">رصيد الطالب الحالى</param>
		///<param name="_accumPrcent">نسبة  مجموع التخرج</param>
		///<param name="_hecId">HEC-ID</param>
		///<param name="_expctdGradDate">Ejust-sponsored</param>
		///<param name="_accumMarks">اجمالى مجموع درجات مقررات الطالب </param>
		///<param name="_accumCourseMarks">
		/// 		/// اجمالى مجموع درجات خطة الطالب </param>
		///<param name="_motherId">used in EUE to send to another destination  represent another code</param>
		///<param name="_partTimeFlg"></param>
		public EdStudFacultyBase(System.Decimal _edStudFacultyId, System.Decimal _edStudId, 
			System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeId, System.String _studFacultyCode, 
			System.Decimal? _admCdeAppTypeId, System.Decimal? _edAcadYearJoinId, System.Decimal? _edCodeSemesterJoinId, 
			System.DateTime? _enrollDate, System.Decimal? _comptativeRate, System.Decimal? _fullTimeFlg, 
			System.Decimal? _edCdeQualPhase, System.Decimal? _edStudQualId, System.Decimal _graduatesFlag, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal? _withHonor, 
			System.Decimal? _entPolicyAccumHonorId, System.Decimal? _accumCredit, System.Decimal? _accumPoints, 
			System.Decimal? _entMainGrad1, System.Decimal? _entMainGrad2, System.Decimal? _entMainGrad3, 
			System.Decimal? _entMainMatrixId, System.Decimal? _transferFlg, System.Decimal? _admCodeTransferTypeId, 
			System.DateTime? _univApproveDate, System.DateTime? _facApproveDate, System.DateTime? _deptApproveDate, 
			System.Decimal? _edCodeGradingId, System.Decimal _isActive, System.String _notes, 
			System.Decimal? _majorCgpa, System.Decimal? _cgpa, System.Decimal? _edBylawId, 
			System.Decimal? _oldAlumniFlg, System.Decimal? _studCardFlg, System.String _grantingCode, 
			System.Decimal? _isLast, System.Decimal? _amanestPermanentStopFlag, System.String _batchNo, 
			System.Decimal? _gsCdeHonorId, System.String _trnsfrFrom, System.String _trnsfrNotes, 
			System.DateTime? _trnsfrDate, System.String _orgFacultyNameAr, System.Decimal? _studFeeBalance, 
			System.Decimal? _accumPrcent, System.String _hecId, System.DateTime? _expctdGradDate, 
			System.Decimal? _accumMarks, System.Decimal? _accumCourseMarks, System.String _motherId, 
			System.Boolean? _partTimeFlg)
		{
			this.entityData = new EdStudFacultyEntityData();
			this.backupData = null;

			this.EdStudFacultyId = _edStudFacultyId;
			this.EdStudId = _edStudId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.StudFacultyCode = _studFacultyCode;
			this.AdmCdeAppTypeId = _admCdeAppTypeId;
			this.EdAcadYearJoinId = _edAcadYearJoinId;
			this.EdCodeSemesterJoinId = _edCodeSemesterJoinId;
			this.EnrollDate = _enrollDate;
			this.ComptativeRate = _comptativeRate;
			this.FullTimeFlg = _fullTimeFlg;
			this.EdCdeQualPhase = _edCdeQualPhase;
			this.EdStudQualId = _edStudQualId;
			this.GraduatesFlag = _graduatesFlag;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.WithHonor = _withHonor;
			this.EntPolicyAccumHonorId = _entPolicyAccumHonorId;
			this.AccumCredit = _accumCredit;
			this.AccumPoints = _accumPoints;
			this.EntMainGrad1 = _entMainGrad1;
			this.EntMainGrad2 = _entMainGrad2;
			this.EntMainGrad3 = _entMainGrad3;
			this.EntMainMatrixId = _entMainMatrixId;
			this.TransferFlg = _transferFlg;
			this.AdmCodeTransferTypeId = _admCodeTransferTypeId;
			this.UnivApproveDate = _univApproveDate;
			this.FacApproveDate = _facApproveDate;
			this.DeptApproveDate = _deptApproveDate;
			this.EdCodeGradingId = _edCodeGradingId;
			this.IsActive = _isActive;
			this.Notes = _notes;
			this.MajorCgpa = _majorCgpa;
			this.Cgpa = _cgpa;
			this.EdBylawId = _edBylawId;
			this.OldAlumniFlg = _oldAlumniFlg;
			this.StudCardFlg = _studCardFlg;
			this.GrantingCode = _grantingCode;
			this.IsLast = _isLast;
			this.AmanestPermanentStopFlag = _amanestPermanentStopFlag;
			this.BatchNo = _batchNo;
			this.GsCdeHonorId = _gsCdeHonorId;
			this.TrnsfrFrom = _trnsfrFrom;
			this.TrnsfrNotes = _trnsfrNotes;
			this.TrnsfrDate = _trnsfrDate;
			this.OrgFacultyNameAr = _orgFacultyNameAr;
			this.StudFeeBalance = _studFeeBalance;
			this.AccumPrcent = _accumPrcent;
			this.HecId = _hecId;
			this.ExpctdGradDate = _expctdGradDate;
			this.AccumMarks = _accumMarks;
			this.AccumCourseMarks = _accumCourseMarks;
			this.MotherId = _motherId;
			this.PartTimeFlg = _partTimeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudFaculty"/> instance.
		///</summary>
		///<param name="_edStudFacultyId"></param>
		///<param name="_edStudId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_studFacultyCode"></param>
		///<param name="_admCdeAppTypeId"></param>
		///<param name="_edAcadYearJoinId"></param>
		///<param name="_edCodeSemesterJoinId"></param>
		///<param name="_enrollDate"></param>
		///<param name="_comptativeRate"></param>
		///<param name="_fullTimeFlg">1: morning
		/// 		/// 2: evening   KU</param>
		///<param name="_edCdeQualPhase"></param>
		///<param name="_edStudQualId"></param>
		///<param name="_graduatesFlag"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_withHonor"></param>
		///<param name="_entPolicyAccumHonorId">XXXXX</param>
		///<param name="_accumCredit"></param>
		///<param name="_accumPoints"></param>
		///<param name="_entMainGrad1"></param>
		///<param name="_entMainGrad2"></param>
		///<param name="_entMainGrad3"></param>
		///<param name="_entMainMatrixId"></param>
		///<param name="_transferFlg"></param>
		///<param name="_admCodeTransferTypeId"></param>
		///<param name="_univApproveDate"></param>
		///<param name="_facApproveDate"></param>
		///<param name="_deptApproveDate"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_isActive"></param>
		///<param name="_notes"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_cgpa"></param>
		///<param name="_edBylawId"></param>
		///<param name="_oldAlumniFlg"></param>
		///<param name="_studCardFlg"></param>
		///<param name="_grantingCode"></param>
		///<param name="_isLast"></param>
		///<param name="_amanestPermanentStopFlag"></param>
		///<param name="_batchNo">رقم الدفعة</param>
		///<param name="_gsCdeHonorId"></param>
		///<param name="_trnsfrFrom">الجهة المحول منها</param>
		///<param name="_trnsfrNotes">ملاحظات التحويل</param>
		///<param name="_trnsfrDate">تاريخ التحويل</param>
		///<param name="_orgFacultyNameAr">التنسيق المدنى الكلية المرشح لها</param>
		///<param name="_studFeeBalance">رصيد الطالب الحالى</param>
		///<param name="_accumPrcent">نسبة  مجموع التخرج</param>
		///<param name="_hecId">HEC-ID</param>
		///<param name="_expctdGradDate">Ejust-sponsored</param>
		///<param name="_accumMarks">اجمالى مجموع درجات مقررات الطالب </param>
		///<param name="_accumCourseMarks">
		/// 		/// اجمالى مجموع درجات خطة الطالب </param>
		///<param name="_motherId">used in EUE to send to another destination  represent another code</param>
		///<param name="_partTimeFlg"></param>
		public static EdStudFaculty CreateEdStudFaculty(System.Decimal _edStudFacultyId, System.Decimal _edStudId, 
			System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeId, System.String _studFacultyCode, 
			System.Decimal? _admCdeAppTypeId, System.Decimal? _edAcadYearJoinId, System.Decimal? _edCodeSemesterJoinId, 
			System.DateTime? _enrollDate, System.Decimal? _comptativeRate, System.Decimal? _fullTimeFlg, 
			System.Decimal? _edCdeQualPhase, System.Decimal? _edStudQualId, System.Decimal _graduatesFlag, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal? _withHonor, 
			System.Decimal? _entPolicyAccumHonorId, System.Decimal? _accumCredit, System.Decimal? _accumPoints, 
			System.Decimal? _entMainGrad1, System.Decimal? _entMainGrad2, System.Decimal? _entMainGrad3, 
			System.Decimal? _entMainMatrixId, System.Decimal? _transferFlg, System.Decimal? _admCodeTransferTypeId, 
			System.DateTime? _univApproveDate, System.DateTime? _facApproveDate, System.DateTime? _deptApproveDate, 
			System.Decimal? _edCodeGradingId, System.Decimal _isActive, System.String _notes, 
			System.Decimal? _majorCgpa, System.Decimal? _cgpa, System.Decimal? _edBylawId, 
			System.Decimal? _oldAlumniFlg, System.Decimal? _studCardFlg, System.String _grantingCode, 
			System.Decimal? _isLast, System.Decimal? _amanestPermanentStopFlag, System.String _batchNo, 
			System.Decimal? _gsCdeHonorId, System.String _trnsfrFrom, System.String _trnsfrNotes, 
			System.DateTime? _trnsfrDate, System.String _orgFacultyNameAr, System.Decimal? _studFeeBalance, 
			System.Decimal? _accumPrcent, System.String _hecId, System.DateTime? _expctdGradDate, 
			System.Decimal? _accumMarks, System.Decimal? _accumCourseMarks, System.String _motherId, 
			System.Boolean? _partTimeFlg)
		{
			EdStudFaculty newEdStudFaculty = new EdStudFaculty();
			newEdStudFaculty.EdStudFacultyId = _edStudFacultyId;
			newEdStudFaculty.EdStudId = _edStudId;
			newEdStudFaculty.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudFaculty.AsCodeDegreeId = _asCodeDegreeId;
			newEdStudFaculty.StudFacultyCode = _studFacultyCode;
			newEdStudFaculty.AdmCdeAppTypeId = _admCdeAppTypeId;
			newEdStudFaculty.EdAcadYearJoinId = _edAcadYearJoinId;
			newEdStudFaculty.EdCodeSemesterJoinId = _edCodeSemesterJoinId;
			newEdStudFaculty.EnrollDate = _enrollDate;
			newEdStudFaculty.ComptativeRate = _comptativeRate;
			newEdStudFaculty.FullTimeFlg = _fullTimeFlg;
			newEdStudFaculty.EdCdeQualPhase = _edCdeQualPhase;
			newEdStudFaculty.EdStudQualId = _edStudQualId;
			newEdStudFaculty.GraduatesFlag = _graduatesFlag;
			newEdStudFaculty.EdAcadYearId = _edAcadYearId;
			newEdStudFaculty.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudFaculty.WithHonor = _withHonor;
			newEdStudFaculty.EntPolicyAccumHonorId = _entPolicyAccumHonorId;
			newEdStudFaculty.AccumCredit = _accumCredit;
			newEdStudFaculty.AccumPoints = _accumPoints;
			newEdStudFaculty.EntMainGrad1 = _entMainGrad1;
			newEdStudFaculty.EntMainGrad2 = _entMainGrad2;
			newEdStudFaculty.EntMainGrad3 = _entMainGrad3;
			newEdStudFaculty.EntMainMatrixId = _entMainMatrixId;
			newEdStudFaculty.TransferFlg = _transferFlg;
			newEdStudFaculty.AdmCodeTransferTypeId = _admCodeTransferTypeId;
			newEdStudFaculty.UnivApproveDate = _univApproveDate;
			newEdStudFaculty.FacApproveDate = _facApproveDate;
			newEdStudFaculty.DeptApproveDate = _deptApproveDate;
			newEdStudFaculty.EdCodeGradingId = _edCodeGradingId;
			newEdStudFaculty.IsActive = _isActive;
			newEdStudFaculty.Notes = _notes;
			newEdStudFaculty.MajorCgpa = _majorCgpa;
			newEdStudFaculty.Cgpa = _cgpa;
			newEdStudFaculty.EdBylawId = _edBylawId;
			newEdStudFaculty.OldAlumniFlg = _oldAlumniFlg;
			newEdStudFaculty.StudCardFlg = _studCardFlg;
			newEdStudFaculty.GrantingCode = _grantingCode;
			newEdStudFaculty.IsLast = _isLast;
			newEdStudFaculty.AmanestPermanentStopFlag = _amanestPermanentStopFlag;
			newEdStudFaculty.BatchNo = _batchNo;
			newEdStudFaculty.GsCdeHonorId = _gsCdeHonorId;
			newEdStudFaculty.TrnsfrFrom = _trnsfrFrom;
			newEdStudFaculty.TrnsfrNotes = _trnsfrNotes;
			newEdStudFaculty.TrnsfrDate = _trnsfrDate;
			newEdStudFaculty.OrgFacultyNameAr = _orgFacultyNameAr;
			newEdStudFaculty.StudFeeBalance = _studFeeBalance;
			newEdStudFaculty.AccumPrcent = _accumPrcent;
			newEdStudFaculty.HecId = _hecId;
			newEdStudFaculty.ExpctdGradDate = _expctdGradDate;
			newEdStudFaculty.AccumMarks = _accumMarks;
			newEdStudFaculty.AccumCourseMarks = _accumCourseMarks;
			newEdStudFaculty.MotherId = _motherId;
			newEdStudFaculty.PartTimeFlg = _partTimeFlg;
			return newEdStudFaculty;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudFacultyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudFacultyId
		{
			get
			{
				return this.entityData.EdStudFacultyId; 
			}
			
			set
			{
				if (this.entityData.EdStudFacultyId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdStudFacultyId, this.entityData.EdStudFacultyId);
				this.entityData.EdStudFacultyId = value;
				this.EntityId.EdStudFacultyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdStudFacultyId, this.entityData.EdStudFacultyId);
				OnPropertyChanged("EdStudFacultyId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_FACULTY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_FACULTY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudFacultyId
		{
			get { return this.entityData.OriginalEdStudFacultyId; }
			set { this.entityData.OriginalEdStudFacultyId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFacultyCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String StudFacultyCode
		{
			get
			{
				return this.entityData.StudFacultyCode; 
			}
			
			set
			{
				if (this.entityData.StudFacultyCode == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.StudFacultyCode, this.entityData.StudFacultyCode);
				this.entityData.StudFacultyCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.StudFacultyCode, this.entityData.StudFacultyCode);
				OnPropertyChanged("StudFacultyCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeAppTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeAppTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeAppTypeId
		{
			get
			{
				return this.entityData.AdmCdeAppTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeAppTypeId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				this.entityData.AdmCdeAppTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				OnPropertyChanged("AdmCdeAppTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearJoinId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearJoinIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearJoinId
		{
			get
			{
				return this.entityData.EdAcadYearJoinId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearJoinId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdAcadYearJoinId, this.entityData.EdAcadYearJoinId);
				this.entityData.EdAcadYearJoinId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdAcadYearJoinId, this.entityData.EdAcadYearJoinId);
				OnPropertyChanged("EdAcadYearJoinId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterJoinId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterJoinIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterJoinId
		{
			get
			{
				return this.entityData.EdCodeSemesterJoinId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterJoinId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdCodeSemesterJoinId, this.entityData.EdCodeSemesterJoinId);
				this.entityData.EdCodeSemesterJoinId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdCodeSemesterJoinId, this.entityData.EdCodeSemesterJoinId);
				OnPropertyChanged("EdCodeSemesterJoinId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnrollDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEnrollDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EnrollDate
		{
			get
			{
				return this.entityData.EnrollDate; 
			}
			
			set
			{
				if (this.entityData.EnrollDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EnrollDate, this.entityData.EnrollDate);
				this.entityData.EnrollDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EnrollDate, this.entityData.EnrollDate);
				OnPropertyChanged("EnrollDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ComptativeRate property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsComptativeRateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ComptativeRate
		{
			get
			{
				return this.entityData.ComptativeRate; 
			}
			
			set
			{
				if (this.entityData.ComptativeRate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.ComptativeRate, this.entityData.ComptativeRate);
				this.entityData.ComptativeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.ComptativeRate, this.entityData.ComptativeRate);
				OnPropertyChanged("ComptativeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullTimeFlg property. 
		///		1: morning
		/// 		/// 2: evening   KU
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFullTimeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1: morning 2: evening   KU"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FullTimeFlg
		{
			get
			{
				return this.entityData.FullTimeFlg; 
			}
			
			set
			{
				if (this.entityData.FullTimeFlg == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.FullTimeFlg, this.entityData.FullTimeFlg);
				this.entityData.FullTimeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.FullTimeFlg, this.entityData.FullTimeFlg);
				OnPropertyChanged("FullTimeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeQualPhase property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeQualPhaseNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeQualPhase
		{
			get
			{
				return this.entityData.EdCdeQualPhase; 
			}
			
			set
			{
				if (this.entityData.EdCdeQualPhase == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdCdeQualPhase, this.entityData.EdCdeQualPhase);
				this.entityData.EdCdeQualPhase = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdCdeQualPhase, this.entityData.EdCdeQualPhase);
				OnPropertyChanged("EdCdeQualPhase");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudQualId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudQualIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudQualId
		{
			get
			{
				return this.entityData.EdStudQualId; 
			}
			
			set
			{
				if (this.entityData.EdStudQualId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdStudQualId, this.entityData.EdStudQualId);
				this.entityData.EdStudQualId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdStudQualId, this.entityData.EdStudQualId);
				OnPropertyChanged("EdStudQualId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GraduatesFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GraduatesFlag
		{
			get
			{
				return this.entityData.GraduatesFlag; 
			}
			
			set
			{
				if (this.entityData.GraduatesFlag == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.GraduatesFlag, this.entityData.GraduatesFlag);
				this.entityData.GraduatesFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.GraduatesFlag, this.entityData.GraduatesFlag);
				OnPropertyChanged("GraduatesFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WithHonor property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWithHonorNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WithHonor
		{
			get
			{
				return this.entityData.WithHonor; 
			}
			
			set
			{
				if (this.entityData.WithHonor == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.WithHonor, this.entityData.WithHonor);
				this.entityData.WithHonor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.WithHonor, this.entityData.WithHonor);
				OnPropertyChanged("WithHonor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAccumHonorId property. 
		///		XXXXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAccumHonorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAccumHonorId
		{
			get
			{
				return this.entityData.EntPolicyAccumHonorId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAccumHonorId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EntPolicyAccumHonorId, this.entityData.EntPolicyAccumHonorId);
				this.entityData.EntPolicyAccumHonorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EntPolicyAccumHonorId, this.entityData.EntPolicyAccumHonorId);
				OnPropertyChanged("EntPolicyAccumHonorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumCredit property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumCreditNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumCredit
		{
			get
			{
				return this.entityData.AccumCredit; 
			}
			
			set
			{
				if (this.entityData.AccumCredit == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AccumCredit, this.entityData.AccumCredit);
				this.entityData.AccumCredit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AccumCredit, this.entityData.AccumCredit);
				OnPropertyChanged("AccumCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPoints property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPointsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPoints
		{
			get
			{
				return this.entityData.AccumPoints; 
			}
			
			set
			{
				if (this.entityData.AccumPoints == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AccumPoints, this.entityData.AccumPoints);
				this.entityData.AccumPoints = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AccumPoints, this.entityData.AccumPoints);
				OnPropertyChanged("AccumPoints");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainGrad1 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainGrad1Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainGrad1
		{
			get
			{
				return this.entityData.EntMainGrad1; 
			}
			
			set
			{
				if (this.entityData.EntMainGrad1 == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EntMainGrad1, this.entityData.EntMainGrad1);
				this.entityData.EntMainGrad1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EntMainGrad1, this.entityData.EntMainGrad1);
				OnPropertyChanged("EntMainGrad1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainGrad2 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainGrad2Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainGrad2
		{
			get
			{
				return this.entityData.EntMainGrad2; 
			}
			
			set
			{
				if (this.entityData.EntMainGrad2 == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EntMainGrad2, this.entityData.EntMainGrad2);
				this.entityData.EntMainGrad2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EntMainGrad2, this.entityData.EntMainGrad2);
				OnPropertyChanged("EntMainGrad2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainGrad3 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainGrad3Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainGrad3
		{
			get
			{
				return this.entityData.EntMainGrad3; 
			}
			
			set
			{
				if (this.entityData.EntMainGrad3 == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EntMainGrad3, this.entityData.EntMainGrad3);
				this.entityData.EntMainGrad3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EntMainGrad3, this.entityData.EntMainGrad3);
				OnPropertyChanged("EntMainGrad3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainMatrixId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainMatrixIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainMatrixId
		{
			get
			{
				return this.entityData.EntMainMatrixId; 
			}
			
			set
			{
				if (this.entityData.EntMainMatrixId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EntMainMatrixId, this.entityData.EntMainMatrixId);
				this.entityData.EntMainMatrixId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EntMainMatrixId, this.entityData.EntMainMatrixId);
				OnPropertyChanged("EntMainMatrixId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransferFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransferFlg
		{
			get
			{
				return this.entityData.TransferFlg; 
			}
			
			set
			{
				if (this.entityData.TransferFlg == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.TransferFlg, this.entityData.TransferFlg);
				this.entityData.TransferFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.TransferFlg, this.entityData.TransferFlg);
				OnPropertyChanged("TransferFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCodeTransferTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCodeTransferTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCodeTransferTypeId
		{
			get
			{
				return this.entityData.AdmCodeTransferTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCodeTransferTypeId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				this.entityData.AdmCodeTransferTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				OnPropertyChanged("AdmCodeTransferTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnivApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUnivApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UnivApproveDate
		{
			get
			{
				return this.entityData.UnivApproveDate; 
			}
			
			set
			{
				if (this.entityData.UnivApproveDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.UnivApproveDate, this.entityData.UnivApproveDate);
				this.entityData.UnivApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.UnivApproveDate, this.entityData.UnivApproveDate);
				OnPropertyChanged("UnivApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFacApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FacApproveDate
		{
			get
			{
				return this.entityData.FacApproveDate; 
			}
			
			set
			{
				if (this.entityData.FacApproveDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.FacApproveDate, this.entityData.FacApproveDate);
				this.entityData.FacApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.FacApproveDate, this.entityData.FacApproveDate);
				OnPropertyChanged("FacApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeptApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDeptApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeptApproveDate
		{
			get
			{
				return this.entityData.DeptApproveDate; 
			}
			
			set
			{
				if (this.entityData.DeptApproveDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.DeptApproveDate, this.entityData.DeptApproveDate);
				this.entityData.DeptApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.DeptApproveDate, this.entityData.DeptApproveDate);
				OnPropertyChanged("DeptApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorCgpa
		{
			get
			{
				return this.entityData.MajorCgpa; 
			}
			
			set
			{
				if (this.entityData.MajorCgpa == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.MajorCgpa, this.entityData.MajorCgpa);
				this.entityData.MajorCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.MajorCgpa, this.entityData.MajorCgpa);
				OnPropertyChanged("MajorCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Cgpa
		{
			get
			{
				return this.entityData.Cgpa; 
			}
			
			set
			{
				if (this.entityData.Cgpa == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.Cgpa, this.entityData.Cgpa);
				this.entityData.Cgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.Cgpa, this.entityData.Cgpa);
				OnPropertyChanged("Cgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdBylawIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OldAlumniFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOldAlumniFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OldAlumniFlg
		{
			get
			{
				return this.entityData.OldAlumniFlg; 
			}
			
			set
			{
				if (this.entityData.OldAlumniFlg == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.OldAlumniFlg, this.entityData.OldAlumniFlg);
				this.entityData.OldAlumniFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.OldAlumniFlg, this.entityData.OldAlumniFlg);
				OnPropertyChanged("OldAlumniFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudCardFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudCardFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudCardFlg
		{
			get
			{
				return this.entityData.StudCardFlg; 
			}
			
			set
			{
				if (this.entityData.StudCardFlg == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.StudCardFlg, this.entityData.StudCardFlg);
				this.entityData.StudCardFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.StudCardFlg, this.entityData.StudCardFlg);
				OnPropertyChanged("StudCardFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrantingCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String GrantingCode
		{
			get
			{
				return this.entityData.GrantingCode; 
			}
			
			set
			{
				if (this.entityData.GrantingCode == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.GrantingCode, this.entityData.GrantingCode);
				this.entityData.GrantingCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.GrantingCode, this.entityData.GrantingCode);
				OnPropertyChanged("GrantingCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsLastNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmanestPermanentStopFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAmanestPermanentStopFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AmanestPermanentStopFlag
		{
			get
			{
				return this.entityData.AmanestPermanentStopFlag; 
			}
			
			set
			{
				if (this.entityData.AmanestPermanentStopFlag == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AmanestPermanentStopFlag, this.entityData.AmanestPermanentStopFlag);
				this.entityData.AmanestPermanentStopFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AmanestPermanentStopFlag, this.entityData.AmanestPermanentStopFlag);
				OnPropertyChanged("AmanestPermanentStopFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BatchNo property. 
		///		رقم الدفعة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الدفعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String BatchNo
		{
			get
			{
				return this.entityData.BatchNo; 
			}
			
			set
			{
				if (this.entityData.BatchNo == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.BatchNo, this.entityData.BatchNo);
				this.entityData.BatchNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.BatchNo, this.entityData.BatchNo);
				OnPropertyChanged("BatchNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeHonorId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdeHonorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdeHonorId
		{
			get
			{
				return this.entityData.GsCdeHonorId; 
			}
			
			set
			{
				if (this.entityData.GsCdeHonorId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				this.entityData.GsCdeHonorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				OnPropertyChanged("GsCdeHonorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsfrFrom property. 
		///		الجهة المحول منها
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الجهة المحول منها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String TrnsfrFrom
		{
			get
			{
				return this.entityData.TrnsfrFrom; 
			}
			
			set
			{
				if (this.entityData.TrnsfrFrom == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.TrnsfrFrom, this.entityData.TrnsfrFrom);
				this.entityData.TrnsfrFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.TrnsfrFrom, this.entityData.TrnsfrFrom);
				OnPropertyChanged("TrnsfrFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsfrNotes property. 
		///		ملاحظات التحويل
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات التحويل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String TrnsfrNotes
		{
			get
			{
				return this.entityData.TrnsfrNotes; 
			}
			
			set
			{
				if (this.entityData.TrnsfrNotes == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.TrnsfrNotes, this.entityData.TrnsfrNotes);
				this.entityData.TrnsfrNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.TrnsfrNotes, this.entityData.TrnsfrNotes);
				OnPropertyChanged("TrnsfrNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsfrDate property. 
		///		تاريخ التحويل
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTrnsfrDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ التحويل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TrnsfrDate
		{
			get
			{
				return this.entityData.TrnsfrDate; 
			}
			
			set
			{
				if (this.entityData.TrnsfrDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.TrnsfrDate, this.entityData.TrnsfrDate);
				this.entityData.TrnsfrDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.TrnsfrDate, this.entityData.TrnsfrDate);
				OnPropertyChanged("TrnsfrDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrgFacultyNameAr property. 
		///		التنسيق المدنى الكلية المرشح لها
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"التنسيق المدنى الكلية المرشح لها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String OrgFacultyNameAr
		{
			get
			{
				return this.entityData.OrgFacultyNameAr; 
			}
			
			set
			{
				if (this.entityData.OrgFacultyNameAr == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.OrgFacultyNameAr, this.entityData.OrgFacultyNameAr);
				this.entityData.OrgFacultyNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.OrgFacultyNameAr, this.entityData.OrgFacultyNameAr);
				OnPropertyChanged("OrgFacultyNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFeeBalance property. 
		///		رصيد الطالب الحالى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudFeeBalanceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رصيد الطالب الحالى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudFeeBalance
		{
			get
			{
				return this.entityData.StudFeeBalance; 
			}
			
			set
			{
				if (this.entityData.StudFeeBalance == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.StudFeeBalance, this.entityData.StudFeeBalance);
				this.entityData.StudFeeBalance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.StudFeeBalance, this.entityData.StudFeeBalance);
				OnPropertyChanged("StudFeeBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPrcent property. 
		///		نسبة  مجموع التخرج
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPrcentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة  مجموع التخرج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPrcent
		{
			get
			{
				return this.entityData.AccumPrcent; 
			}
			
			set
			{
				if (this.entityData.AccumPrcent == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AccumPrcent, this.entityData.AccumPrcent);
				this.entityData.AccumPrcent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AccumPrcent, this.entityData.AccumPrcent);
				OnPropertyChanged("AccumPrcent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HecId property. 
		///		HEC-ID
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"HEC-ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String HecId
		{
			get
			{
				return this.entityData.HecId; 
			}
			
			set
			{
				if (this.entityData.HecId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.HecId, this.entityData.HecId);
				this.entityData.HecId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.HecId, this.entityData.HecId);
				OnPropertyChanged("HecId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpctdGradDate property. 
		///		Ejust-sponsored
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpctdGradDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Ejust-sponsored"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpctdGradDate
		{
			get
			{
				return this.entityData.ExpctdGradDate; 
			}
			
			set
			{
				if (this.entityData.ExpctdGradDate == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.ExpctdGradDate, this.entityData.ExpctdGradDate);
				this.entityData.ExpctdGradDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.ExpctdGradDate, this.entityData.ExpctdGradDate);
				OnPropertyChanged("ExpctdGradDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumMarks property. 
		///		اجمالى مجموع درجات مقررات الطالب 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumMarksNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اجمالى مجموع درجات مقررات الطالب "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumMarks
		{
			get
			{
				return this.entityData.AccumMarks; 
			}
			
			set
			{
				if (this.entityData.AccumMarks == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AccumMarks, this.entityData.AccumMarks);
				this.entityData.AccumMarks = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AccumMarks, this.entityData.AccumMarks);
				OnPropertyChanged("AccumMarks");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumCourseMarks property. 
		///		
		/// 		/// اجمالى مجموع درجات خطة الطالب 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumCourseMarksNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@" اجمالى مجموع درجات خطة الطالب "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumCourseMarks
		{
			get
			{
				return this.entityData.AccumCourseMarks; 
			}
			
			set
			{
				if (this.entityData.AccumCourseMarks == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.AccumCourseMarks, this.entityData.AccumCourseMarks);
				this.entityData.AccumCourseMarks = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.AccumCourseMarks, this.entityData.AccumCourseMarks);
				OnPropertyChanged("AccumCourseMarks");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MotherId property. 
		///		used in EUE to send to another destination  represent another code
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"used in EUE to send to another destination  represent another code"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MotherId
		{
			get
			{
				return this.entityData.MotherId; 
			}
			
			set
			{
				if (this.entityData.MotherId == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.MotherId, this.entityData.MotherId);
				this.entityData.MotherId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.MotherId, this.entityData.MotherId);
				OnPropertyChanged("MotherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartTimeFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPartTimeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PartTimeFlg
		{
			get
			{
				return this.entityData.PartTimeFlg; 
			}
			
			set
			{
				if (this.entityData.PartTimeFlg == value)
					return;
					
				OnColumnChanging(EdStudFacultyColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				this.entityData.PartTimeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudFacultyColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				OnPropertyChanged("PartTimeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return entityData.AdmCdeAppTypeIdSource; }
            set { entityData.AdmCdeAppTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return entityData.AdmCodeTransferTypeIdSource; }
            set { entityData.AdmCodeTransferTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearJoinId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearJoinIdSource
      	{
            get { return entityData.EdAcadYearJoinIdSource; }
            set { entityData.EdAcadYearJoinIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualPhase"/>.
		/// </summary>
		/// <value>The source EdCdeQualPhase for EdCdeQualPhase.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeQualPhase EdCdeQualPhaseSource
      	{
            get { return entityData.EdCdeQualPhaseSource; }
            set { entityData.EdCdeQualPhaseSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterJoinId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterJoinIdSource
      	{
            get { return entityData.EdCodeSemesterJoinIdSource; }
            set { entityData.EdCodeSemesterJoinIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudQual"/>.
		/// </summary>
		/// <value>The source EdStudQual for EdStudQualId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudQual EdStudQualIdSource
      	{
            get { return entityData.EdStudQualIdSource; }
            set { entityData.EdStudQualIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntMainMatrix"/>.
		/// </summary>
		/// <value>The source EntMainMatrix for EntMainMatrixId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntMainMatrix EntMainMatrixIdSource
      	{
            get { return entityData.EntMainMatrixIdSource; }
            set { entityData.EntMainMatrixIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAccumHonor"/>.
		/// </summary>
		/// <value>The source EntPolicyAccumHonor for EntPolicyAccumHonorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAccumHonor EntPolicyAccumHonorIdSource
      	{
            get { return entityData.EntPolicyAccumHonorIdSource; }
            set { entityData.EntPolicyAccumHonorIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad1.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainGrad1Source
      	{
            get { return entityData.EntMainGrad1Source; }
            set { entityData.EntMainGrad1Source = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad2.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainGrad2Source
      	{
            get { return entityData.EntMainGrad2Source; }
            set { entityData.EntMainGrad2Source = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad3.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainGrad3Source
      	{
            get { return entityData.EntMainGrad3Source; }
            set { entityData.EntMainGrad3Source = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeHonor"/>.
		/// </summary>
		/// <value>The source GsCdeHonor for GsCdeHonorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeHonor GsCdeHonorIdSource
      	{
            get { return entityData.GsCdeHonorIdSource; }
            set { entityData.GsCdeHonorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgThesisStud objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_ED_STUD_FACULTY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStud> PgThesisStudCollection
		{
			get { return entityData.PgThesisStudCollection; }
			set { entityData.PgThesisStudCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StudFacultyCode", "Stud Faculty Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrantingCode", "Granting Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BatchNo", "Batch No", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrnsfrFrom", "Trnsfr From", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrnsfrNotes", "Trnsfr Notes", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OrgFacultyNameAr", "Org Faculty Name Ar", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HecId", "Hec Id", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MotherId", "Mother Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_FACULTY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_FACULTY_ID", "ED_STUD_ID", "AS_FACULTY_INFO_ID", "AS_CODE_DEGREE_ID", "STUD_FACULTY_CODE", "ADM_CDE_APP_TYPE_ID", "ED_ACAD_YEAR_JOIN_ID", "ED_CODE_SEMESTER_JOIN_ID", "ENROLL_DATE", "COMPTATIVE_RATE", "FULL_TIME_FLG", "ED_CDE_QUAL_PHASE", "ED_STUD_QUAL_ID", "GRADUATES_FLAG", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "WITH_HONOR", "ENT_POLICY_ACCUM_HONOR_ID", "ACCUM_CREDIT", "ACCUM_POINTS", "ENT_MAIN_GRAD_1", "ENT_MAIN_GRAD_2", "ENT_MAIN_GRAD_3", "ENT_MAIN_MATRIX_ID", "TRANSFER_FLG", "ADM_CODE_TRANSFER_TYPE_ID", "UNIV_APPROVE_DATE", "FAC_APPROVE_DATE", "DEPT_APPROVE_DATE", "ED_CODE_GRADING_ID", "IS_ACTIVE", "NOTES", "MAJOR_CGPA", "CGPA", "ED_BYLAW_ID", "OLD_ALUMNI_FLG", "STUD_CARD_FLG", "GRANTING_CODE", "IS_LAST", "AMANEST_PERMANENT_STOP_FLAG", "BATCH_NO", "GS_CDE_HONOR_ID", "TRNSFR_FROM", "TRNSFR_NOTES", "TRNSFR_DATE", "ORG_FACULTY_NAME_AR", "STUD_FEE_BALANCE", "ACCUM_PRCENT", "HEC_ID", "EXPCTD_GRAD_DATE", "ACCUM_MARKS", "ACCUM_COURSE_MARKS", "Mother_ID", "PART_TIME_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudFacultyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudFaculty) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudFaculty>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudFaculty);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudFaculty Entity 
		///</summary>
		protected virtual EdStudFaculty Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudFaculty copy = new EdStudFaculty();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudFacultyId = this.EdStudFacultyId;
					copy.OriginalEdStudFacultyId = this.OriginalEdStudFacultyId;
				copy.EdStudId = this.EdStudId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.StudFacultyCode = this.StudFacultyCode;
				copy.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
				copy.EdAcadYearJoinId = this.EdAcadYearJoinId;
				copy.EdCodeSemesterJoinId = this.EdCodeSemesterJoinId;
				copy.EnrollDate = this.EnrollDate;
				copy.ComptativeRate = this.ComptativeRate;
				copy.FullTimeFlg = this.FullTimeFlg;
				copy.EdCdeQualPhase = this.EdCdeQualPhase;
				copy.EdStudQualId = this.EdStudQualId;
				copy.GraduatesFlag = this.GraduatesFlag;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.WithHonor = this.WithHonor;
				copy.EntPolicyAccumHonorId = this.EntPolicyAccumHonorId;
				copy.AccumCredit = this.AccumCredit;
				copy.AccumPoints = this.AccumPoints;
				copy.EntMainGrad1 = this.EntMainGrad1;
				copy.EntMainGrad2 = this.EntMainGrad2;
				copy.EntMainGrad3 = this.EntMainGrad3;
				copy.EntMainMatrixId = this.EntMainMatrixId;
				copy.TransferFlg = this.TransferFlg;
				copy.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
				copy.UnivApproveDate = this.UnivApproveDate;
				copy.FacApproveDate = this.FacApproveDate;
				copy.DeptApproveDate = this.DeptApproveDate;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.IsActive = this.IsActive;
				copy.Notes = this.Notes;
				copy.MajorCgpa = this.MajorCgpa;
				copy.Cgpa = this.Cgpa;
				copy.EdBylawId = this.EdBylawId;
				copy.OldAlumniFlg = this.OldAlumniFlg;
				copy.StudCardFlg = this.StudCardFlg;
				copy.GrantingCode = this.GrantingCode;
				copy.IsLast = this.IsLast;
				copy.AmanestPermanentStopFlag = this.AmanestPermanentStopFlag;
				copy.BatchNo = this.BatchNo;
				copy.GsCdeHonorId = this.GsCdeHonorId;
				copy.TrnsfrFrom = this.TrnsfrFrom;
				copy.TrnsfrNotes = this.TrnsfrNotes;
				copy.TrnsfrDate = this.TrnsfrDate;
				copy.OrgFacultyNameAr = this.OrgFacultyNameAr;
				copy.StudFeeBalance = this.StudFeeBalance;
				copy.AccumPrcent = this.AccumPrcent;
				copy.HecId = this.HecId;
				copy.ExpctdGradDate = this.ExpctdGradDate;
				copy.AccumMarks = this.AccumMarks;
				copy.AccumCourseMarks = this.AccumCourseMarks;
				copy.MotherId = this.MotherId;
				copy.PartTimeFlg = this.PartTimeFlg;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				copy.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				copy.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				copy.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				copy.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearJoinIdSource != null && existingCopies.Contains(this.EdAcadYearJoinIdSource))
				copy.EdAcadYearJoinIdSource = existingCopies[this.EdAcadYearJoinIdSource] as EdAcadYear;
			else
				copy.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource, existingCopies) as EdAcadYear;
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCdeQualPhaseSource != null && existingCopies.Contains(this.EdCdeQualPhaseSource))
				copy.EdCdeQualPhaseSource = existingCopies[this.EdCdeQualPhaseSource] as EdCdeQualPhase;
			else
				copy.EdCdeQualPhaseSource = MakeCopyOf(this.EdCdeQualPhaseSource, existingCopies) as EdCdeQualPhase;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeSemesterJoinIdSource != null && existingCopies.Contains(this.EdCodeSemesterJoinIdSource))
				copy.EdCodeSemesterJoinIdSource = existingCopies[this.EdCodeSemesterJoinIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterJoinIdSource = MakeCopyOf(this.EdCodeSemesterJoinIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudQualIdSource != null && existingCopies.Contains(this.EdStudQualIdSource))
				copy.EdStudQualIdSource = existingCopies[this.EdStudQualIdSource] as EdStudQual;
			else
				copy.EdStudQualIdSource = MakeCopyOf(this.EdStudQualIdSource, existingCopies) as EdStudQual;
			if (this.EntMainMatrixIdSource != null && existingCopies.Contains(this.EntMainMatrixIdSource))
				copy.EntMainMatrixIdSource = existingCopies[this.EntMainMatrixIdSource] as EntMainMatrix;
			else
				copy.EntMainMatrixIdSource = MakeCopyOf(this.EntMainMatrixIdSource, existingCopies) as EntMainMatrix;
			if (this.EntPolicyAccumHonorIdSource != null && existingCopies.Contains(this.EntPolicyAccumHonorIdSource))
				copy.EntPolicyAccumHonorIdSource = existingCopies[this.EntPolicyAccumHonorIdSource] as EntPolicyAccumHonor;
			else
				copy.EntPolicyAccumHonorIdSource = MakeCopyOf(this.EntPolicyAccumHonorIdSource, existingCopies) as EntPolicyAccumHonor;
			if (this.EntMainGrad1Source != null && existingCopies.Contains(this.EntMainGrad1Source))
				copy.EntMainGrad1Source = existingCopies[this.EntMainGrad1Source] as EntityMain;
			else
				copy.EntMainGrad1Source = MakeCopyOf(this.EntMainGrad1Source, existingCopies) as EntityMain;
			if (this.EntMainGrad2Source != null && existingCopies.Contains(this.EntMainGrad2Source))
				copy.EntMainGrad2Source = existingCopies[this.EntMainGrad2Source] as EntityMain;
			else
				copy.EntMainGrad2Source = MakeCopyOf(this.EntMainGrad2Source, existingCopies) as EntityMain;
			if (this.EntMainGrad3Source != null && existingCopies.Contains(this.EntMainGrad3Source))
				copy.EntMainGrad3Source = existingCopies[this.EntMainGrad3Source] as EntityMain;
			else
				copy.EntMainGrad3Source = MakeCopyOf(this.EntMainGrad3Source, existingCopies) as EntityMain;
			if (this.GsCdeHonorIdSource != null && existingCopies.Contains(this.GsCdeHonorIdSource))
				copy.GsCdeHonorIdSource = existingCopies[this.GsCdeHonorIdSource] as GsCdeHonor;
			else
				copy.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource, existingCopies) as GsCdeHonor;
		
			//deep copy nested objects
			copy.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudFaculty Entity 
		///</summary>
		public virtual EdStudFaculty Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudFaculty Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudFaculty DeepCopy()
		{
			return EntityHelper.Clone<EdStudFaculty>(this as EdStudFaculty);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudFacultyEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudFacultyEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudFacultyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudFacultyColumn column)
		{
			switch(column)
			{
					case EdStudFacultyColumn.EdStudFacultyId:
					return entityData.EdStudFacultyId != _originalData.EdStudFacultyId;
					case EdStudFacultyColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudFacultyColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudFacultyColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdStudFacultyColumn.StudFacultyCode:
					return entityData.StudFacultyCode != _originalData.StudFacultyCode;
					case EdStudFacultyColumn.AdmCdeAppTypeId:
					return entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
					case EdStudFacultyColumn.EdAcadYearJoinId:
					return entityData.EdAcadYearJoinId != _originalData.EdAcadYearJoinId;
					case EdStudFacultyColumn.EdCodeSemesterJoinId:
					return entityData.EdCodeSemesterJoinId != _originalData.EdCodeSemesterJoinId;
					case EdStudFacultyColumn.EnrollDate:
					return entityData.EnrollDate != _originalData.EnrollDate;
					case EdStudFacultyColumn.ComptativeRate:
					return entityData.ComptativeRate != _originalData.ComptativeRate;
					case EdStudFacultyColumn.FullTimeFlg:
					return entityData.FullTimeFlg != _originalData.FullTimeFlg;
					case EdStudFacultyColumn.EdCdeQualPhase:
					return entityData.EdCdeQualPhase != _originalData.EdCdeQualPhase;
					case EdStudFacultyColumn.EdStudQualId:
					return entityData.EdStudQualId != _originalData.EdStudQualId;
					case EdStudFacultyColumn.GraduatesFlag:
					return entityData.GraduatesFlag != _originalData.GraduatesFlag;
					case EdStudFacultyColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudFacultyColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudFacultyColumn.WithHonor:
					return entityData.WithHonor != _originalData.WithHonor;
					case EdStudFacultyColumn.EntPolicyAccumHonorId:
					return entityData.EntPolicyAccumHonorId != _originalData.EntPolicyAccumHonorId;
					case EdStudFacultyColumn.AccumCredit:
					return entityData.AccumCredit != _originalData.AccumCredit;
					case EdStudFacultyColumn.AccumPoints:
					return entityData.AccumPoints != _originalData.AccumPoints;
					case EdStudFacultyColumn.EntMainGrad1:
					return entityData.EntMainGrad1 != _originalData.EntMainGrad1;
					case EdStudFacultyColumn.EntMainGrad2:
					return entityData.EntMainGrad2 != _originalData.EntMainGrad2;
					case EdStudFacultyColumn.EntMainGrad3:
					return entityData.EntMainGrad3 != _originalData.EntMainGrad3;
					case EdStudFacultyColumn.EntMainMatrixId:
					return entityData.EntMainMatrixId != _originalData.EntMainMatrixId;
					case EdStudFacultyColumn.TransferFlg:
					return entityData.TransferFlg != _originalData.TransferFlg;
					case EdStudFacultyColumn.AdmCodeTransferTypeId:
					return entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
					case EdStudFacultyColumn.UnivApproveDate:
					return entityData.UnivApproveDate != _originalData.UnivApproveDate;
					case EdStudFacultyColumn.FacApproveDate:
					return entityData.FacApproveDate != _originalData.FacApproveDate;
					case EdStudFacultyColumn.DeptApproveDate:
					return entityData.DeptApproveDate != _originalData.DeptApproveDate;
					case EdStudFacultyColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdStudFacultyColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case EdStudFacultyColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudFacultyColumn.MajorCgpa:
					return entityData.MajorCgpa != _originalData.MajorCgpa;
					case EdStudFacultyColumn.Cgpa:
					return entityData.Cgpa != _originalData.Cgpa;
					case EdStudFacultyColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EdStudFacultyColumn.OldAlumniFlg:
					return entityData.OldAlumniFlg != _originalData.OldAlumniFlg;
					case EdStudFacultyColumn.StudCardFlg:
					return entityData.StudCardFlg != _originalData.StudCardFlg;
					case EdStudFacultyColumn.GrantingCode:
					return entityData.GrantingCode != _originalData.GrantingCode;
					case EdStudFacultyColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudFacultyColumn.AmanestPermanentStopFlag:
					return entityData.AmanestPermanentStopFlag != _originalData.AmanestPermanentStopFlag;
					case EdStudFacultyColumn.BatchNo:
					return entityData.BatchNo != _originalData.BatchNo;
					case EdStudFacultyColumn.GsCdeHonorId:
					return entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
					case EdStudFacultyColumn.TrnsfrFrom:
					return entityData.TrnsfrFrom != _originalData.TrnsfrFrom;
					case EdStudFacultyColumn.TrnsfrNotes:
					return entityData.TrnsfrNotes != _originalData.TrnsfrNotes;
					case EdStudFacultyColumn.TrnsfrDate:
					return entityData.TrnsfrDate != _originalData.TrnsfrDate;
					case EdStudFacultyColumn.OrgFacultyNameAr:
					return entityData.OrgFacultyNameAr != _originalData.OrgFacultyNameAr;
					case EdStudFacultyColumn.StudFeeBalance:
					return entityData.StudFeeBalance != _originalData.StudFeeBalance;
					case EdStudFacultyColumn.AccumPrcent:
					return entityData.AccumPrcent != _originalData.AccumPrcent;
					case EdStudFacultyColumn.HecId:
					return entityData.HecId != _originalData.HecId;
					case EdStudFacultyColumn.ExpctdGradDate:
					return entityData.ExpctdGradDate != _originalData.ExpctdGradDate;
					case EdStudFacultyColumn.AccumMarks:
					return entityData.AccumMarks != _originalData.AccumMarks;
					case EdStudFacultyColumn.AccumCourseMarks:
					return entityData.AccumCourseMarks != _originalData.AccumCourseMarks;
					case EdStudFacultyColumn.MotherId:
					return entityData.MotherId != _originalData.MotherId;
					case EdStudFacultyColumn.PartTimeFlg:
					return entityData.PartTimeFlg != _originalData.PartTimeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudFacultyColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudFacultyId != _originalData.EdStudFacultyId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.StudFacultyCode != _originalData.StudFacultyCode;
			result = result || entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
			result = result || entityData.EdAcadYearJoinId != _originalData.EdAcadYearJoinId;
			result = result || entityData.EdCodeSemesterJoinId != _originalData.EdCodeSemesterJoinId;
			result = result || entityData.EnrollDate != _originalData.EnrollDate;
			result = result || entityData.ComptativeRate != _originalData.ComptativeRate;
			result = result || entityData.FullTimeFlg != _originalData.FullTimeFlg;
			result = result || entityData.EdCdeQualPhase != _originalData.EdCdeQualPhase;
			result = result || entityData.EdStudQualId != _originalData.EdStudQualId;
			result = result || entityData.GraduatesFlag != _originalData.GraduatesFlag;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.WithHonor != _originalData.WithHonor;
			result = result || entityData.EntPolicyAccumHonorId != _originalData.EntPolicyAccumHonorId;
			result = result || entityData.AccumCredit != _originalData.AccumCredit;
			result = result || entityData.AccumPoints != _originalData.AccumPoints;
			result = result || entityData.EntMainGrad1 != _originalData.EntMainGrad1;
			result = result || entityData.EntMainGrad2 != _originalData.EntMainGrad2;
			result = result || entityData.EntMainGrad3 != _originalData.EntMainGrad3;
			result = result || entityData.EntMainMatrixId != _originalData.EntMainMatrixId;
			result = result || entityData.TransferFlg != _originalData.TransferFlg;
			result = result || entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
			result = result || entityData.UnivApproveDate != _originalData.UnivApproveDate;
			result = result || entityData.FacApproveDate != _originalData.FacApproveDate;
			result = result || entityData.DeptApproveDate != _originalData.DeptApproveDate;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.MajorCgpa != _originalData.MajorCgpa;
			result = result || entityData.Cgpa != _originalData.Cgpa;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.OldAlumniFlg != _originalData.OldAlumniFlg;
			result = result || entityData.StudCardFlg != _originalData.StudCardFlg;
			result = result || entityData.GrantingCode != _originalData.GrantingCode;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.AmanestPermanentStopFlag != _originalData.AmanestPermanentStopFlag;
			result = result || entityData.BatchNo != _originalData.BatchNo;
			result = result || entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
			result = result || entityData.TrnsfrFrom != _originalData.TrnsfrFrom;
			result = result || entityData.TrnsfrNotes != _originalData.TrnsfrNotes;
			result = result || entityData.TrnsfrDate != _originalData.TrnsfrDate;
			result = result || entityData.OrgFacultyNameAr != _originalData.OrgFacultyNameAr;
			result = result || entityData.StudFeeBalance != _originalData.StudFeeBalance;
			result = result || entityData.AccumPrcent != _originalData.AccumPrcent;
			result = result || entityData.HecId != _originalData.HecId;
			result = result || entityData.ExpctdGradDate != _originalData.ExpctdGradDate;
			result = result || entityData.AccumMarks != _originalData.AccumMarks;
			result = result || entityData.AccumCourseMarks != _originalData.AccumCourseMarks;
			result = result || entityData.MotherId != _originalData.MotherId;
			result = result || entityData.PartTimeFlg != _originalData.PartTimeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudFaculty Entity with the original data.
		///</summary>
		public EdStudFaculty GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudFaculty(
				_originalData.EdStudFacultyId,
				_originalData.EdStudId,
				_originalData.AsFacultyInfoId,
				_originalData.AsCodeDegreeId,
				_originalData.StudFacultyCode,
				_originalData.AdmCdeAppTypeId,
				_originalData.EdAcadYearJoinId,
				_originalData.EdCodeSemesterJoinId,
				_originalData.EnrollDate,
				_originalData.ComptativeRate,
				_originalData.FullTimeFlg,
				_originalData.EdCdeQualPhase,
				_originalData.EdStudQualId,
				_originalData.GraduatesFlag,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.WithHonor,
				_originalData.EntPolicyAccumHonorId,
				_originalData.AccumCredit,
				_originalData.AccumPoints,
				_originalData.EntMainGrad1,
				_originalData.EntMainGrad2,
				_originalData.EntMainGrad3,
				_originalData.EntMainMatrixId,
				_originalData.TransferFlg,
				_originalData.AdmCodeTransferTypeId,
				_originalData.UnivApproveDate,
				_originalData.FacApproveDate,
				_originalData.DeptApproveDate,
				_originalData.EdCodeGradingId,
				_originalData.IsActive,
				_originalData.Notes,
				_originalData.MajorCgpa,
				_originalData.Cgpa,
				_originalData.EdBylawId,
				_originalData.OldAlumniFlg,
				_originalData.StudCardFlg,
				_originalData.GrantingCode,
				_originalData.IsLast,
				_originalData.AmanestPermanentStopFlag,
				_originalData.BatchNo,
				_originalData.GsCdeHonorId,
				_originalData.TrnsfrFrom,
				_originalData.TrnsfrNotes,
				_originalData.TrnsfrDate,
				_originalData.OrgFacultyNameAr,
				_originalData.StudFeeBalance,
				_originalData.AccumPrcent,
				_originalData.HecId,
				_originalData.ExpctdGradDate,
				_originalData.AccumMarks,
				_originalData.AccumCourseMarks,
				_originalData.MotherId,
				_originalData.PartTimeFlg
				);
				
			return (EdStudFaculty)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudFacultyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudFacultyBase)
				return ValueEquals(this, (EdStudFacultyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudFacultyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudFacultyId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeId.GetHashCode() ^ 
					((this.StudFacultyCode == null) ? string.Empty : this.StudFacultyCode.ToString()).GetHashCode() ^ 
					((this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearJoinId == null) ? string.Empty : this.EdAcadYearJoinId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterJoinId == null) ? string.Empty : this.EdCodeSemesterJoinId.ToString()).GetHashCode() ^ 
					((this.EnrollDate == null) ? string.Empty : this.EnrollDate.ToString()).GetHashCode() ^ 
					((this.ComptativeRate == null) ? string.Empty : this.ComptativeRate.ToString()).GetHashCode() ^ 
					((this.FullTimeFlg == null) ? string.Empty : this.FullTimeFlg.ToString()).GetHashCode() ^ 
					((this.EdCdeQualPhase == null) ? string.Empty : this.EdCdeQualPhase.ToString()).GetHashCode() ^ 
					((this.EdStudQualId == null) ? string.Empty : this.EdStudQualId.ToString()).GetHashCode() ^ 
					this.GraduatesFlag.GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.WithHonor == null) ? string.Empty : this.WithHonor.ToString()).GetHashCode() ^ 
					((this.EntPolicyAccumHonorId == null) ? string.Empty : this.EntPolicyAccumHonorId.ToString()).GetHashCode() ^ 
					((this.AccumCredit == null) ? string.Empty : this.AccumCredit.ToString()).GetHashCode() ^ 
					((this.AccumPoints == null) ? string.Empty : this.AccumPoints.ToString()).GetHashCode() ^ 
					((this.EntMainGrad1 == null) ? string.Empty : this.EntMainGrad1.ToString()).GetHashCode() ^ 
					((this.EntMainGrad2 == null) ? string.Empty : this.EntMainGrad2.ToString()).GetHashCode() ^ 
					((this.EntMainGrad3 == null) ? string.Empty : this.EntMainGrad3.ToString()).GetHashCode() ^ 
					((this.EntMainMatrixId == null) ? string.Empty : this.EntMainMatrixId.ToString()).GetHashCode() ^ 
					((this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString()).GetHashCode() ^ 
					((this.AdmCodeTransferTypeId == null) ? string.Empty : this.AdmCodeTransferTypeId.ToString()).GetHashCode() ^ 
					((this.UnivApproveDate == null) ? string.Empty : this.UnivApproveDate.ToString()).GetHashCode() ^ 
					((this.FacApproveDate == null) ? string.Empty : this.FacApproveDate.ToString()).GetHashCode() ^ 
					((this.DeptApproveDate == null) ? string.Empty : this.DeptApproveDate.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString()).GetHashCode() ^ 
					((this.Cgpa == null) ? string.Empty : this.Cgpa.ToString()).GetHashCode() ^ 
					((this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString()).GetHashCode() ^ 
					((this.OldAlumniFlg == null) ? string.Empty : this.OldAlumniFlg.ToString()).GetHashCode() ^ 
					((this.StudCardFlg == null) ? string.Empty : this.StudCardFlg.ToString()).GetHashCode() ^ 
					((this.GrantingCode == null) ? string.Empty : this.GrantingCode.ToString()).GetHashCode() ^ 
					((this.IsLast == null) ? string.Empty : this.IsLast.ToString()).GetHashCode() ^ 
					((this.AmanestPermanentStopFlag == null) ? string.Empty : this.AmanestPermanentStopFlag.ToString()).GetHashCode() ^ 
					((this.BatchNo == null) ? string.Empty : this.BatchNo.ToString()).GetHashCode() ^ 
					((this.GsCdeHonorId == null) ? string.Empty : this.GsCdeHonorId.ToString()).GetHashCode() ^ 
					((this.TrnsfrFrom == null) ? string.Empty : this.TrnsfrFrom.ToString()).GetHashCode() ^ 
					((this.TrnsfrNotes == null) ? string.Empty : this.TrnsfrNotes.ToString()).GetHashCode() ^ 
					((this.TrnsfrDate == null) ? string.Empty : this.TrnsfrDate.ToString()).GetHashCode() ^ 
					((this.OrgFacultyNameAr == null) ? string.Empty : this.OrgFacultyNameAr.ToString()).GetHashCode() ^ 
					((this.StudFeeBalance == null) ? string.Empty : this.StudFeeBalance.ToString()).GetHashCode() ^ 
					((this.AccumPrcent == null) ? string.Empty : this.AccumPrcent.ToString()).GetHashCode() ^ 
					((this.HecId == null) ? string.Empty : this.HecId.ToString()).GetHashCode() ^ 
					((this.ExpctdGradDate == null) ? string.Empty : this.ExpctdGradDate.ToString()).GetHashCode() ^ 
					((this.AccumMarks == null) ? string.Empty : this.AccumMarks.ToString()).GetHashCode() ^ 
					((this.AccumCourseMarks == null) ? string.Empty : this.AccumCourseMarks.ToString()).GetHashCode() ^ 
					((this.MotherId == null) ? string.Empty : this.MotherId.ToString()).GetHashCode() ^ 
					((this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudFacultyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudFacultyBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudFacultyBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudFacultyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudFacultyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudFacultyBase Object1, EdStudFacultyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudFacultyId != Object2.EdStudFacultyId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if ( Object1.StudFacultyCode != null && Object2.StudFacultyCode != null )
			{
				if (Object1.StudFacultyCode != Object2.StudFacultyCode)
					equal = false;
			}
			else if (Object1.StudFacultyCode == null ^ Object2.StudFacultyCode == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeAppTypeId != null && Object2.AdmCdeAppTypeId != null )
			{
				if (Object1.AdmCdeAppTypeId != Object2.AdmCdeAppTypeId)
					equal = false;
			}
			else if (Object1.AdmCdeAppTypeId == null ^ Object2.AdmCdeAppTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearJoinId != null && Object2.EdAcadYearJoinId != null )
			{
				if (Object1.EdAcadYearJoinId != Object2.EdAcadYearJoinId)
					equal = false;
			}
			else if (Object1.EdAcadYearJoinId == null ^ Object2.EdAcadYearJoinId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterJoinId != null && Object2.EdCodeSemesterJoinId != null )
			{
				if (Object1.EdCodeSemesterJoinId != Object2.EdCodeSemesterJoinId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterJoinId == null ^ Object2.EdCodeSemesterJoinId == null )
			{
				equal = false;
			}
			if ( Object1.EnrollDate != null && Object2.EnrollDate != null )
			{
				if (Object1.EnrollDate != Object2.EnrollDate)
					equal = false;
			}
			else if (Object1.EnrollDate == null ^ Object2.EnrollDate == null )
			{
				equal = false;
			}
			if ( Object1.ComptativeRate != null && Object2.ComptativeRate != null )
			{
				if (Object1.ComptativeRate != Object2.ComptativeRate)
					equal = false;
			}
			else if (Object1.ComptativeRate == null ^ Object2.ComptativeRate == null )
			{
				equal = false;
			}
			if ( Object1.FullTimeFlg != null && Object2.FullTimeFlg != null )
			{
				if (Object1.FullTimeFlg != Object2.FullTimeFlg)
					equal = false;
			}
			else if (Object1.FullTimeFlg == null ^ Object2.FullTimeFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeQualPhase != null && Object2.EdCdeQualPhase != null )
			{
				if (Object1.EdCdeQualPhase != Object2.EdCdeQualPhase)
					equal = false;
			}
			else if (Object1.EdCdeQualPhase == null ^ Object2.EdCdeQualPhase == null )
			{
				equal = false;
			}
			if ( Object1.EdStudQualId != null && Object2.EdStudQualId != null )
			{
				if (Object1.EdStudQualId != Object2.EdStudQualId)
					equal = false;
			}
			else if (Object1.EdStudQualId == null ^ Object2.EdStudQualId == null )
			{
				equal = false;
			}
			if (Object1.GraduatesFlag != Object2.GraduatesFlag)
				equal = false;
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.WithHonor != null && Object2.WithHonor != null )
			{
				if (Object1.WithHonor != Object2.WithHonor)
					equal = false;
			}
			else if (Object1.WithHonor == null ^ Object2.WithHonor == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyAccumHonorId != null && Object2.EntPolicyAccumHonorId != null )
			{
				if (Object1.EntPolicyAccumHonorId != Object2.EntPolicyAccumHonorId)
					equal = false;
			}
			else if (Object1.EntPolicyAccumHonorId == null ^ Object2.EntPolicyAccumHonorId == null )
			{
				equal = false;
			}
			if ( Object1.AccumCredit != null && Object2.AccumCredit != null )
			{
				if (Object1.AccumCredit != Object2.AccumCredit)
					equal = false;
			}
			else if (Object1.AccumCredit == null ^ Object2.AccumCredit == null )
			{
				equal = false;
			}
			if ( Object1.AccumPoints != null && Object2.AccumPoints != null )
			{
				if (Object1.AccumPoints != Object2.AccumPoints)
					equal = false;
			}
			else if (Object1.AccumPoints == null ^ Object2.AccumPoints == null )
			{
				equal = false;
			}
			if ( Object1.EntMainGrad1 != null && Object2.EntMainGrad1 != null )
			{
				if (Object1.EntMainGrad1 != Object2.EntMainGrad1)
					equal = false;
			}
			else if (Object1.EntMainGrad1 == null ^ Object2.EntMainGrad1 == null )
			{
				equal = false;
			}
			if ( Object1.EntMainGrad2 != null && Object2.EntMainGrad2 != null )
			{
				if (Object1.EntMainGrad2 != Object2.EntMainGrad2)
					equal = false;
			}
			else if (Object1.EntMainGrad2 == null ^ Object2.EntMainGrad2 == null )
			{
				equal = false;
			}
			if ( Object1.EntMainGrad3 != null && Object2.EntMainGrad3 != null )
			{
				if (Object1.EntMainGrad3 != Object2.EntMainGrad3)
					equal = false;
			}
			else if (Object1.EntMainGrad3 == null ^ Object2.EntMainGrad3 == null )
			{
				equal = false;
			}
			if ( Object1.EntMainMatrixId != null && Object2.EntMainMatrixId != null )
			{
				if (Object1.EntMainMatrixId != Object2.EntMainMatrixId)
					equal = false;
			}
			else if (Object1.EntMainMatrixId == null ^ Object2.EntMainMatrixId == null )
			{
				equal = false;
			}
			if ( Object1.TransferFlg != null && Object2.TransferFlg != null )
			{
				if (Object1.TransferFlg != Object2.TransferFlg)
					equal = false;
			}
			else if (Object1.TransferFlg == null ^ Object2.TransferFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmCodeTransferTypeId != null && Object2.AdmCodeTransferTypeId != null )
			{
				if (Object1.AdmCodeTransferTypeId != Object2.AdmCodeTransferTypeId)
					equal = false;
			}
			else if (Object1.AdmCodeTransferTypeId == null ^ Object2.AdmCodeTransferTypeId == null )
			{
				equal = false;
			}
			if ( Object1.UnivApproveDate != null && Object2.UnivApproveDate != null )
			{
				if (Object1.UnivApproveDate != Object2.UnivApproveDate)
					equal = false;
			}
			else if (Object1.UnivApproveDate == null ^ Object2.UnivApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.FacApproveDate != null && Object2.FacApproveDate != null )
			{
				if (Object1.FacApproveDate != Object2.FacApproveDate)
					equal = false;
			}
			else if (Object1.FacApproveDate == null ^ Object2.FacApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.DeptApproveDate != null && Object2.DeptApproveDate != null )
			{
				if (Object1.DeptApproveDate != Object2.DeptApproveDate)
					equal = false;
			}
			else if (Object1.DeptApproveDate == null ^ Object2.DeptApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.MajorCgpa != null && Object2.MajorCgpa != null )
			{
				if (Object1.MajorCgpa != Object2.MajorCgpa)
					equal = false;
			}
			else if (Object1.MajorCgpa == null ^ Object2.MajorCgpa == null )
			{
				equal = false;
			}
			if ( Object1.Cgpa != null && Object2.Cgpa != null )
			{
				if (Object1.Cgpa != Object2.Cgpa)
					equal = false;
			}
			else if (Object1.Cgpa == null ^ Object2.Cgpa == null )
			{
				equal = false;
			}
			if ( Object1.EdBylawId != null && Object2.EdBylawId != null )
			{
				if (Object1.EdBylawId != Object2.EdBylawId)
					equal = false;
			}
			else if (Object1.EdBylawId == null ^ Object2.EdBylawId == null )
			{
				equal = false;
			}
			if ( Object1.OldAlumniFlg != null && Object2.OldAlumniFlg != null )
			{
				if (Object1.OldAlumniFlg != Object2.OldAlumniFlg)
					equal = false;
			}
			else if (Object1.OldAlumniFlg == null ^ Object2.OldAlumniFlg == null )
			{
				equal = false;
			}
			if ( Object1.StudCardFlg != null && Object2.StudCardFlg != null )
			{
				if (Object1.StudCardFlg != Object2.StudCardFlg)
					equal = false;
			}
			else if (Object1.StudCardFlg == null ^ Object2.StudCardFlg == null )
			{
				equal = false;
			}
			if ( Object1.GrantingCode != null && Object2.GrantingCode != null )
			{
				if (Object1.GrantingCode != Object2.GrantingCode)
					equal = false;
			}
			else if (Object1.GrantingCode == null ^ Object2.GrantingCode == null )
			{
				equal = false;
			}
			if ( Object1.IsLast != null && Object2.IsLast != null )
			{
				if (Object1.IsLast != Object2.IsLast)
					equal = false;
			}
			else if (Object1.IsLast == null ^ Object2.IsLast == null )
			{
				equal = false;
			}
			if ( Object1.AmanestPermanentStopFlag != null && Object2.AmanestPermanentStopFlag != null )
			{
				if (Object1.AmanestPermanentStopFlag != Object2.AmanestPermanentStopFlag)
					equal = false;
			}
			else if (Object1.AmanestPermanentStopFlag == null ^ Object2.AmanestPermanentStopFlag == null )
			{
				equal = false;
			}
			if ( Object1.BatchNo != null && Object2.BatchNo != null )
			{
				if (Object1.BatchNo != Object2.BatchNo)
					equal = false;
			}
			else if (Object1.BatchNo == null ^ Object2.BatchNo == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeHonorId != null && Object2.GsCdeHonorId != null )
			{
				if (Object1.GsCdeHonorId != Object2.GsCdeHonorId)
					equal = false;
			}
			else if (Object1.GsCdeHonorId == null ^ Object2.GsCdeHonorId == null )
			{
				equal = false;
			}
			if ( Object1.TrnsfrFrom != null && Object2.TrnsfrFrom != null )
			{
				if (Object1.TrnsfrFrom != Object2.TrnsfrFrom)
					equal = false;
			}
			else if (Object1.TrnsfrFrom == null ^ Object2.TrnsfrFrom == null )
			{
				equal = false;
			}
			if ( Object1.TrnsfrNotes != null && Object2.TrnsfrNotes != null )
			{
				if (Object1.TrnsfrNotes != Object2.TrnsfrNotes)
					equal = false;
			}
			else if (Object1.TrnsfrNotes == null ^ Object2.TrnsfrNotes == null )
			{
				equal = false;
			}
			if ( Object1.TrnsfrDate != null && Object2.TrnsfrDate != null )
			{
				if (Object1.TrnsfrDate != Object2.TrnsfrDate)
					equal = false;
			}
			else if (Object1.TrnsfrDate == null ^ Object2.TrnsfrDate == null )
			{
				equal = false;
			}
			if ( Object1.OrgFacultyNameAr != null && Object2.OrgFacultyNameAr != null )
			{
				if (Object1.OrgFacultyNameAr != Object2.OrgFacultyNameAr)
					equal = false;
			}
			else if (Object1.OrgFacultyNameAr == null ^ Object2.OrgFacultyNameAr == null )
			{
				equal = false;
			}
			if ( Object1.StudFeeBalance != null && Object2.StudFeeBalance != null )
			{
				if (Object1.StudFeeBalance != Object2.StudFeeBalance)
					equal = false;
			}
			else if (Object1.StudFeeBalance == null ^ Object2.StudFeeBalance == null )
			{
				equal = false;
			}
			if ( Object1.AccumPrcent != null && Object2.AccumPrcent != null )
			{
				if (Object1.AccumPrcent != Object2.AccumPrcent)
					equal = false;
			}
			else if (Object1.AccumPrcent == null ^ Object2.AccumPrcent == null )
			{
				equal = false;
			}
			if ( Object1.HecId != null && Object2.HecId != null )
			{
				if (Object1.HecId != Object2.HecId)
					equal = false;
			}
			else if (Object1.HecId == null ^ Object2.HecId == null )
			{
				equal = false;
			}
			if ( Object1.ExpctdGradDate != null && Object2.ExpctdGradDate != null )
			{
				if (Object1.ExpctdGradDate != Object2.ExpctdGradDate)
					equal = false;
			}
			else if (Object1.ExpctdGradDate == null ^ Object2.ExpctdGradDate == null )
			{
				equal = false;
			}
			if ( Object1.AccumMarks != null && Object2.AccumMarks != null )
			{
				if (Object1.AccumMarks != Object2.AccumMarks)
					equal = false;
			}
			else if (Object1.AccumMarks == null ^ Object2.AccumMarks == null )
			{
				equal = false;
			}
			if ( Object1.AccumCourseMarks != null && Object2.AccumCourseMarks != null )
			{
				if (Object1.AccumCourseMarks != Object2.AccumCourseMarks)
					equal = false;
			}
			else if (Object1.AccumCourseMarks == null ^ Object2.AccumCourseMarks == null )
			{
				equal = false;
			}
			if ( Object1.MotherId != null && Object2.MotherId != null )
			{
				if (Object1.MotherId != Object2.MotherId)
					equal = false;
			}
			else if (Object1.MotherId == null ^ Object2.MotherId == null )
			{
				equal = false;
			}
			if ( Object1.PartTimeFlg != null && Object2.PartTimeFlg != null )
			{
				if (Object1.PartTimeFlg != Object2.PartTimeFlg)
					equal = false;
			}
			else if (Object1.PartTimeFlg == null ^ Object2.PartTimeFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudFacultyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudFacultyComparer GetComparer()
        {
            return new EdStudFacultyComparer();
        }
        */

        // Comparer delegates back to EdStudFaculty
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudFaculty rhs, EdStudFacultyColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudFacultyColumn.EdStudFacultyId:
            		return this.EdStudFacultyId.CompareTo(rhs.EdStudFacultyId);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.StudFacultyCode:
            		return this.StudFacultyCode.CompareTo(rhs.StudFacultyCode);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AdmCdeAppTypeId:
            		return this.AdmCdeAppTypeId.Value.CompareTo(rhs.AdmCdeAppTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdAcadYearJoinId:
            		return this.EdAcadYearJoinId.Value.CompareTo(rhs.EdAcadYearJoinId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdCodeSemesterJoinId:
            		return this.EdCodeSemesterJoinId.Value.CompareTo(rhs.EdCodeSemesterJoinId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EnrollDate:
            		return this.EnrollDate.Value.CompareTo(rhs.EnrollDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.ComptativeRate:
            		return this.ComptativeRate.Value.CompareTo(rhs.ComptativeRate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.FullTimeFlg:
            		return this.FullTimeFlg.Value.CompareTo(rhs.FullTimeFlg.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdCdeQualPhase:
            		return this.EdCdeQualPhase.Value.CompareTo(rhs.EdCdeQualPhase.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdStudQualId:
            		return this.EdStudQualId.Value.CompareTo(rhs.EdStudQualId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.GraduatesFlag:
            		return this.GraduatesFlag.CompareTo(rhs.GraduatesFlag);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.WithHonor:
            		return this.WithHonor.Value.CompareTo(rhs.WithHonor.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EntPolicyAccumHonorId:
            		return this.EntPolicyAccumHonorId.Value.CompareTo(rhs.EntPolicyAccumHonorId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AccumCredit:
            		return this.AccumCredit.Value.CompareTo(rhs.AccumCredit.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AccumPoints:
            		return this.AccumPoints.Value.CompareTo(rhs.AccumPoints.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EntMainGrad1:
            		return this.EntMainGrad1.Value.CompareTo(rhs.EntMainGrad1.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EntMainGrad2:
            		return this.EntMainGrad2.Value.CompareTo(rhs.EntMainGrad2.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EntMainGrad3:
            		return this.EntMainGrad3.Value.CompareTo(rhs.EntMainGrad3.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EntMainMatrixId:
            		return this.EntMainMatrixId.Value.CompareTo(rhs.EntMainMatrixId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.TransferFlg:
            		return this.TransferFlg.Value.CompareTo(rhs.TransferFlg.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AdmCodeTransferTypeId:
            		return this.AdmCodeTransferTypeId.Value.CompareTo(rhs.AdmCodeTransferTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.UnivApproveDate:
            		return this.UnivApproveDate.Value.CompareTo(rhs.UnivApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.FacApproveDate:
            		return this.FacApproveDate.Value.CompareTo(rhs.FacApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.DeptApproveDate:
            		return this.DeptApproveDate.Value.CompareTo(rhs.DeptApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.MajorCgpa:
            		return this.MajorCgpa.Value.CompareTo(rhs.MajorCgpa.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.Cgpa:
            		return this.Cgpa.Value.CompareTo(rhs.Cgpa.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.EdBylawId:
            		return this.EdBylawId.Value.CompareTo(rhs.EdBylawId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.OldAlumniFlg:
            		return this.OldAlumniFlg.Value.CompareTo(rhs.OldAlumniFlg.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.StudCardFlg:
            		return this.StudCardFlg.Value.CompareTo(rhs.StudCardFlg.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.GrantingCode:
            		return this.GrantingCode.CompareTo(rhs.GrantingCode);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.IsLast:
            		return this.IsLast.Value.CompareTo(rhs.IsLast.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AmanestPermanentStopFlag:
            		return this.AmanestPermanentStopFlag.Value.CompareTo(rhs.AmanestPermanentStopFlag.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.BatchNo:
            		return this.BatchNo.CompareTo(rhs.BatchNo);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.GsCdeHonorId:
            		return this.GsCdeHonorId.Value.CompareTo(rhs.GsCdeHonorId.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.TrnsfrFrom:
            		return this.TrnsfrFrom.CompareTo(rhs.TrnsfrFrom);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.TrnsfrNotes:
            		return this.TrnsfrNotes.CompareTo(rhs.TrnsfrNotes);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.TrnsfrDate:
            		return this.TrnsfrDate.Value.CompareTo(rhs.TrnsfrDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.OrgFacultyNameAr:
            		return this.OrgFacultyNameAr.CompareTo(rhs.OrgFacultyNameAr);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.StudFeeBalance:
            		return this.StudFeeBalance.Value.CompareTo(rhs.StudFeeBalance.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AccumPrcent:
            		return this.AccumPrcent.Value.CompareTo(rhs.AccumPrcent.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.HecId:
            		return this.HecId.CompareTo(rhs.HecId);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.ExpctdGradDate:
            		return this.ExpctdGradDate.Value.CompareTo(rhs.ExpctdGradDate.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AccumMarks:
            		return this.AccumMarks.Value.CompareTo(rhs.AccumMarks.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.AccumCourseMarks:
            		return this.AccumCourseMarks.Value.CompareTo(rhs.AccumCourseMarks.Value);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.MotherId:
            		return this.MotherId.CompareTo(rhs.MotherId);
            		
            		                 
            	
            	
            	case EdStudFacultyColumn.PartTimeFlg:
            		return this.PartTimeFlg.Value.CompareTo(rhs.PartTimeFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudFacultyKey> Members
		
		// member variable for the EntityId property
		private EdStudFacultyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudFacultyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudFacultyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudFaculty")
					.Append("|").Append( this.EdStudFacultyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{55}{54}- EdStudFacultyId: {0}{54}- EdStudId: {1}{54}- AsFacultyInfoId: {2}{54}- AsCodeDegreeId: {3}{54}- StudFacultyCode: {4}{54}- AdmCdeAppTypeId: {5}{54}- EdAcadYearJoinId: {6}{54}- EdCodeSemesterJoinId: {7}{54}- EnrollDate: {8}{54}- ComptativeRate: {9}{54}- FullTimeFlg: {10}{54}- EdCdeQualPhase: {11}{54}- EdStudQualId: {12}{54}- GraduatesFlag: {13}{54}- EdAcadYearId: {14}{54}- EdCodeSemesterId: {15}{54}- WithHonor: {16}{54}- EntPolicyAccumHonorId: {17}{54}- AccumCredit: {18}{54}- AccumPoints: {19}{54}- EntMainGrad1: {20}{54}- EntMainGrad2: {21}{54}- EntMainGrad3: {22}{54}- EntMainMatrixId: {23}{54}- TransferFlg: {24}{54}- AdmCodeTransferTypeId: {25}{54}- UnivApproveDate: {26}{54}- FacApproveDate: {27}{54}- DeptApproveDate: {28}{54}- EdCodeGradingId: {29}{54}- IsActive: {30}{54}- Notes: {31}{54}- MajorCgpa: {32}{54}- Cgpa: {33}{54}- EdBylawId: {34}{54}- OldAlumniFlg: {35}{54}- StudCardFlg: {36}{54}- GrantingCode: {37}{54}- IsLast: {38}{54}- AmanestPermanentStopFlag: {39}{54}- BatchNo: {40}{54}- GsCdeHonorId: {41}{54}- TrnsfrFrom: {42}{54}- TrnsfrNotes: {43}{54}- TrnsfrDate: {44}{54}- OrgFacultyNameAr: {45}{54}- StudFeeBalance: {46}{54}- AccumPrcent: {47}{54}- HecId: {48}{54}- ExpctdGradDate: {49}{54}- AccumMarks: {50}{54}- AccumCourseMarks: {51}{54}- MotherId: {52}{54}- PartTimeFlg: {53}{54}{56}", 
				this.EdStudFacultyId,
				this.EdStudId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.AsCodeDegreeId,
				(this.StudFacultyCode == null) ? string.Empty : this.StudFacultyCode.ToString(),
				(this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString(),
				(this.EdAcadYearJoinId == null) ? string.Empty : this.EdAcadYearJoinId.ToString(),
				(this.EdCodeSemesterJoinId == null) ? string.Empty : this.EdCodeSemesterJoinId.ToString(),
				(this.EnrollDate == null) ? string.Empty : this.EnrollDate.ToString(),
				(this.ComptativeRate == null) ? string.Empty : this.ComptativeRate.ToString(),
				(this.FullTimeFlg == null) ? string.Empty : this.FullTimeFlg.ToString(),
				(this.EdCdeQualPhase == null) ? string.Empty : this.EdCdeQualPhase.ToString(),
				(this.EdStudQualId == null) ? string.Empty : this.EdStudQualId.ToString(),
				this.GraduatesFlag,
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.WithHonor == null) ? string.Empty : this.WithHonor.ToString(),
				(this.EntPolicyAccumHonorId == null) ? string.Empty : this.EntPolicyAccumHonorId.ToString(),
				(this.AccumCredit == null) ? string.Empty : this.AccumCredit.ToString(),
				(this.AccumPoints == null) ? string.Empty : this.AccumPoints.ToString(),
				(this.EntMainGrad1 == null) ? string.Empty : this.EntMainGrad1.ToString(),
				(this.EntMainGrad2 == null) ? string.Empty : this.EntMainGrad2.ToString(),
				(this.EntMainGrad3 == null) ? string.Empty : this.EntMainGrad3.ToString(),
				(this.EntMainMatrixId == null) ? string.Empty : this.EntMainMatrixId.ToString(),
				(this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString(),
				(this.AdmCodeTransferTypeId == null) ? string.Empty : this.AdmCodeTransferTypeId.ToString(),
				(this.UnivApproveDate == null) ? string.Empty : this.UnivApproveDate.ToString(),
				(this.FacApproveDate == null) ? string.Empty : this.FacApproveDate.ToString(),
				(this.DeptApproveDate == null) ? string.Empty : this.DeptApproveDate.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				this.IsActive,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString(),
				(this.Cgpa == null) ? string.Empty : this.Cgpa.ToString(),
				(this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString(),
				(this.OldAlumniFlg == null) ? string.Empty : this.OldAlumniFlg.ToString(),
				(this.StudCardFlg == null) ? string.Empty : this.StudCardFlg.ToString(),
				(this.GrantingCode == null) ? string.Empty : this.GrantingCode.ToString(),
				(this.IsLast == null) ? string.Empty : this.IsLast.ToString(),
				(this.AmanestPermanentStopFlag == null) ? string.Empty : this.AmanestPermanentStopFlag.ToString(),
				(this.BatchNo == null) ? string.Empty : this.BatchNo.ToString(),
				(this.GsCdeHonorId == null) ? string.Empty : this.GsCdeHonorId.ToString(),
				(this.TrnsfrFrom == null) ? string.Empty : this.TrnsfrFrom.ToString(),
				(this.TrnsfrNotes == null) ? string.Empty : this.TrnsfrNotes.ToString(),
				(this.TrnsfrDate == null) ? string.Empty : this.TrnsfrDate.ToString(),
				(this.OrgFacultyNameAr == null) ? string.Empty : this.OrgFacultyNameAr.ToString(),
				(this.StudFeeBalance == null) ? string.Empty : this.StudFeeBalance.ToString(),
				(this.AccumPrcent == null) ? string.Empty : this.AccumPrcent.ToString(),
				(this.HecId == null) ? string.Empty : this.HecId.ToString(),
				(this.ExpctdGradDate == null) ? string.Empty : this.ExpctdGradDate.ToString(),
				(this.AccumMarks == null) ? string.Empty : this.AccumMarks.ToString(),
				(this.AccumCourseMarks == null) ? string.Empty : this.AccumCourseMarks.ToString(),
				(this.MotherId == null) ? string.Empty : this.MotherId.ToString(),
				(this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_FACULTY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudFacultyEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_FACULTY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_FACULTY"</remarks>
		public System.Decimal EdStudFacultyId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudFacultyId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeId = 0.0m;
		
		/// <summary>
		/// STUD_FACULTY_CODE : 
		/// </summary>
		public System.String		  StudFacultyCode = null;
		
		/// <summary>
		/// ADM_CDE_APP_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  AdmCdeAppTypeId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_JOIN_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearJoinId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_JOIN_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterJoinId = null;
		
		/// <summary>
		/// ENROLL_DATE : 
		/// </summary>
		public System.DateTime?		  EnrollDate = null;
		
		/// <summary>
		/// COMPTATIVE_RATE : 
		/// </summary>
		public System.Decimal?		  ComptativeRate = null;
		
		/// <summary>
		/// FULL_TIME_FLG : 1: morning
		/// 		/// 2: evening   KU
		/// </summary>
		public System.Decimal?		  FullTimeFlg = null;
		
		/// <summary>
		/// ED_CDE_QUAL_PHASE : 
		/// </summary>
		public System.Decimal?		  EdCdeQualPhase = null;
		
		/// <summary>
		/// ED_STUD_QUAL_ID : 
		/// </summary>
		public System.Decimal?		  EdStudQualId = null;
		
		/// <summary>
		/// GRADUATES_FLAG : 
		/// </summary>
		public System.Decimal		  GraduatesFlag = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// WITH_HONOR : 
		/// </summary>
		public System.Decimal?		  WithHonor = null;
		
		/// <summary>
		/// ENT_POLICY_ACCUM_HONOR_ID : XXXXX
		/// </summary>
		public System.Decimal?		  EntPolicyAccumHonorId = null;
		
		/// <summary>
		/// ACCUM_CREDIT : 
		/// </summary>
		public System.Decimal?		  AccumCredit = null;
		
		/// <summary>
		/// ACCUM_POINTS : 
		/// </summary>
		public System.Decimal?		  AccumPoints = null;
		
		/// <summary>
		/// ENT_MAIN_GRAD_1 : 
		/// </summary>
		public System.Decimal?		  EntMainGrad1 = null;
		
		/// <summary>
		/// ENT_MAIN_GRAD_2 : 
		/// </summary>
		public System.Decimal?		  EntMainGrad2 = null;
		
		/// <summary>
		/// ENT_MAIN_GRAD_3 : 
		/// </summary>
		public System.Decimal?		  EntMainGrad3 = null;
		
		/// <summary>
		/// ENT_MAIN_MATRIX_ID : 
		/// </summary>
		public System.Decimal?		  EntMainMatrixId = null;
		
		/// <summary>
		/// TRANSFER_FLG : 
		/// </summary>
		public System.Decimal?		  TransferFlg = null;
		
		/// <summary>
		/// ADM_CODE_TRANSFER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  AdmCodeTransferTypeId = null;
		
		/// <summary>
		/// UNIV_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  UnivApproveDate = null;
		
		/// <summary>
		/// FAC_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  FacApproveDate = null;
		
		/// <summary>
		/// DEPT_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  DeptApproveDate = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// MAJOR_CGPA : 
		/// </summary>
		public System.Decimal?		  MajorCgpa = null;
		
		/// <summary>
		/// CGPA : 
		/// </summary>
		public System.Decimal?		  Cgpa = null;
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal?		  EdBylawId = null;
		
		/// <summary>
		/// OLD_ALUMNI_FLG : 
		/// </summary>
		public System.Decimal?		  OldAlumniFlg = null;
		
		/// <summary>
		/// STUD_CARD_FLG : 
		/// </summary>
		public System.Decimal?		  StudCardFlg = null;
		
		/// <summary>
		/// GRANTING_CODE : 
		/// </summary>
		public System.String		  GrantingCode = null;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal?		  IsLast = null;
		
		/// <summary>
		/// AMANEST_PERMANENT_STOP_FLAG : 
		/// </summary>
		public System.Decimal?		  AmanestPermanentStopFlag = null;
		
		/// <summary>
		/// BATCH_NO : رقم الدفعة
		/// </summary>
		public System.String		  BatchNo = null;
		
		/// <summary>
		/// GS_CDE_HONOR_ID : 
		/// </summary>
		public System.Decimal?		  GsCdeHonorId = null;
		
		/// <summary>
		/// TRNSFR_FROM : الجهة المحول منها
		/// </summary>
		public System.String		  TrnsfrFrom = null;
		
		/// <summary>
		/// TRNSFR_NOTES : ملاحظات التحويل
		/// </summary>
		public System.String		  TrnsfrNotes = null;
		
		/// <summary>
		/// TRNSFR_DATE : تاريخ التحويل
		/// </summary>
		public System.DateTime?		  TrnsfrDate = null;
		
		/// <summary>
		/// ORG_FACULTY_NAME_AR : التنسيق المدنى الكلية المرشح لها
		/// </summary>
		public System.String		  OrgFacultyNameAr = null;
		
		/// <summary>
		/// STUD_FEE_BALANCE : رصيد الطالب الحالى
		/// </summary>
		public System.Decimal?		  StudFeeBalance = null;
		
		/// <summary>
		/// ACCUM_PRCENT : نسبة  مجموع التخرج
		/// </summary>
		public System.Decimal?		  AccumPrcent = null;
		
		/// <summary>
		/// HEC_ID : HEC-ID
		/// </summary>
		public System.String		  HecId = null;
		
		/// <summary>
		/// EXPCTD_GRAD_DATE : Ejust-sponsored
		/// </summary>
		public System.DateTime?		  ExpctdGradDate = null;
		
		/// <summary>
		/// ACCUM_MARKS : اجمالى مجموع درجات مقررات الطالب 
		/// </summary>
		public System.Decimal?		  AccumMarks = null;
		
		/// <summary>
		/// ACCUM_COURSE_MARKS : 
		/// 		/// اجمالى مجموع درجات خطة الطالب 
		/// </summary>
		public System.Decimal?		  AccumCourseMarks = null;
		
		/// <summary>
		/// Mother_ID : used in EUE to send to another destination  represent another code
		/// </summary>
		public System.String		  MotherId = null;
		
		/// <summary>
		/// PART_TIME_FLG : 
		/// </summary>
		public System.Boolean?		  PartTimeFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private AdmCdeAppType _admCdeAppTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return this._admCdeAppTypeIdSource; }
            set { this._admCdeAppTypeIdSource = value; }
      	}
		private AdmCodeTransferType _admCodeTransferTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return this._admCodeTransferTypeIdSource; }
            set { this._admCodeTransferTypeIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearJoinIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearJoinId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearJoinIdSource
      	{
            get { return this._edAcadYearJoinIdSource; }
            set { this._edAcadYearJoinIdSource = value; }
      	}
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		private EdCdeQualPhase _edCdeQualPhaseSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualPhase"/>.
		/// </summary>
		/// <value>The source EdCdeQualPhase for EdCdeQualPhase.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeQualPhase EdCdeQualPhaseSource
      	{
            get { return this._edCdeQualPhaseSource; }
            set { this._edCdeQualPhaseSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterJoinIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterJoinId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterJoinIdSource
      	{
            get { return this._edCodeSemesterJoinIdSource; }
            set { this._edCodeSemesterJoinIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStudQual _edStudQualIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudQual"/>.
		/// </summary>
		/// <value>The source EdStudQual for EdStudQualId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudQual EdStudQualIdSource
      	{
            get { return this._edStudQualIdSource; }
            set { this._edStudQualIdSource = value; }
      	}
		private EntMainMatrix _entMainMatrixIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntMainMatrix"/>.
		/// </summary>
		/// <value>The source EntMainMatrix for EntMainMatrixId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntMainMatrix EntMainMatrixIdSource
      	{
            get { return this._entMainMatrixIdSource; }
            set { this._entMainMatrixIdSource = value; }
      	}
		private EntPolicyAccumHonor _entPolicyAccumHonorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAccumHonor"/>.
		/// </summary>
		/// <value>The source EntPolicyAccumHonor for EntPolicyAccumHonorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAccumHonor EntPolicyAccumHonorIdSource
      	{
            get { return this._entPolicyAccumHonorIdSource; }
            set { this._entPolicyAccumHonorIdSource = value; }
      	}
		private EntityMain _entMainGrad1Source = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad1.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainGrad1Source
      	{
            get { return this._entMainGrad1Source; }
            set { this._entMainGrad1Source = value; }
      	}
		private EntityMain _entMainGrad2Source = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad2.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainGrad2Source
      	{
            get { return this._entMainGrad2Source; }
            set { this._entMainGrad2Source = value; }
      	}
		private EntityMain _entMainGrad3Source = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainGrad3.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainGrad3Source
      	{
            get { return this._entMainGrad3Source; }
            set { this._entMainGrad3Source = value; }
      	}
		private GsCdeHonor _gsCdeHonorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeHonor"/>.
		/// </summary>
		/// <value>The source GsCdeHonor for GsCdeHonorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeHonor GsCdeHonorIdSource
      	{
            get { return this._gsCdeHonorIdSource; }
            set { this._gsCdeHonorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgThesisStudCollection
		
		private TList<PgThesisStud> _pgThesisStudEdStudFacultyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudEdStudFacultyId
		/// </summary>
		
		public TList<PgThesisStud> PgThesisStudCollection
		{
			get
			{
				if (_pgThesisStudEdStudFacultyId == null)
				{
				_pgThesisStudEdStudFacultyId = new TList<PgThesisStud>();
				}
	
				return _pgThesisStudEdStudFacultyId;
			}
			set { _pgThesisStudEdStudFacultyId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudFacultyEntityData _tmp = new EdStudFacultyEntityData();
						
			_tmp.EdStudFacultyId = this.EdStudFacultyId;
			_tmp.OriginalEdStudFacultyId = this.OriginalEdStudFacultyId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.StudFacultyCode = this.StudFacultyCode;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.EdAcadYearJoinId = this.EdAcadYearJoinId;
			_tmp.EdCodeSemesterJoinId = this.EdCodeSemesterJoinId;
			_tmp.EnrollDate = this.EnrollDate;
			_tmp.ComptativeRate = this.ComptativeRate;
			_tmp.FullTimeFlg = this.FullTimeFlg;
			_tmp.EdCdeQualPhase = this.EdCdeQualPhase;
			_tmp.EdStudQualId = this.EdStudQualId;
			_tmp.GraduatesFlag = this.GraduatesFlag;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.WithHonor = this.WithHonor;
			_tmp.EntPolicyAccumHonorId = this.EntPolicyAccumHonorId;
			_tmp.AccumCredit = this.AccumCredit;
			_tmp.AccumPoints = this.AccumPoints;
			_tmp.EntMainGrad1 = this.EntMainGrad1;
			_tmp.EntMainGrad2 = this.EntMainGrad2;
			_tmp.EntMainGrad3 = this.EntMainGrad3;
			_tmp.EntMainMatrixId = this.EntMainMatrixId;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			_tmp.UnivApproveDate = this.UnivApproveDate;
			_tmp.FacApproveDate = this.FacApproveDate;
			_tmp.DeptApproveDate = this.DeptApproveDate;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.IsActive = this.IsActive;
			_tmp.Notes = this.Notes;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.Cgpa = this.Cgpa;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.OldAlumniFlg = this.OldAlumniFlg;
			_tmp.StudCardFlg = this.StudCardFlg;
			_tmp.GrantingCode = this.GrantingCode;
			_tmp.IsLast = this.IsLast;
			_tmp.AmanestPermanentStopFlag = this.AmanestPermanentStopFlag;
			_tmp.BatchNo = this.BatchNo;
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.TrnsfrFrom = this.TrnsfrFrom;
			_tmp.TrnsfrNotes = this.TrnsfrNotes;
			_tmp.TrnsfrDate = this.TrnsfrDate;
			_tmp.OrgFacultyNameAr = this.OrgFacultyNameAr;
			_tmp.StudFeeBalance = this.StudFeeBalance;
			_tmp.AccumPrcent = this.AccumPrcent;
			_tmp.HecId = this.HecId;
			_tmp.ExpctdGradDate = this.ExpctdGradDate;
			_tmp.AccumMarks = this.AccumMarks;
			_tmp.AccumCourseMarks = this.AccumCourseMarks;
			_tmp.MotherId = this.MotherId;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.AdmCdeAppTypeIdSource != null)
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource) as AdmCdeAppType;
			if (this.AdmCodeTransferTypeIdSource != null)
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearJoinIdSource != null)
				_tmp.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource) as EdAcadYear;
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			if (this.EdCdeQualPhaseSource != null)
				_tmp.EdCdeQualPhaseSource = MakeCopyOf(this.EdCdeQualPhaseSource) as EdCdeQualPhase;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCodeSemesterJoinIdSource != null)
				_tmp.EdCodeSemesterJoinIdSource = MakeCopyOf(this.EdCodeSemesterJoinIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudQualIdSource != null)
				_tmp.EdStudQualIdSource = MakeCopyOf(this.EdStudQualIdSource) as EdStudQual;
			if (this.EntMainMatrixIdSource != null)
				_tmp.EntMainMatrixIdSource = MakeCopyOf(this.EntMainMatrixIdSource) as EntMainMatrix;
			if (this.EntPolicyAccumHonorIdSource != null)
				_tmp.EntPolicyAccumHonorIdSource = MakeCopyOf(this.EntPolicyAccumHonorIdSource) as EntPolicyAccumHonor;
			if (this.EntMainGrad1Source != null)
				_tmp.EntMainGrad1Source = MakeCopyOf(this.EntMainGrad1Source) as EntityMain;
			if (this.EntMainGrad2Source != null)
				_tmp.EntMainGrad2Source = MakeCopyOf(this.EntMainGrad2Source) as EntityMain;
			if (this.EntMainGrad3Source != null)
				_tmp.EntMainGrad3Source = MakeCopyOf(this.EntMainGrad3Source) as EntityMain;
			if (this.GsCdeHonorIdSource != null)
				_tmp.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource) as GsCdeHonor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgThesisStudEdStudFacultyId != null)
				_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudFacultyEntityData _tmp = new EdStudFacultyEntityData();
						
			_tmp.EdStudFacultyId = this.EdStudFacultyId;
			_tmp.OriginalEdStudFacultyId = this.OriginalEdStudFacultyId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.StudFacultyCode = this.StudFacultyCode;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.EdAcadYearJoinId = this.EdAcadYearJoinId;
			_tmp.EdCodeSemesterJoinId = this.EdCodeSemesterJoinId;
			_tmp.EnrollDate = this.EnrollDate;
			_tmp.ComptativeRate = this.ComptativeRate;
			_tmp.FullTimeFlg = this.FullTimeFlg;
			_tmp.EdCdeQualPhase = this.EdCdeQualPhase;
			_tmp.EdStudQualId = this.EdStudQualId;
			_tmp.GraduatesFlag = this.GraduatesFlag;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.WithHonor = this.WithHonor;
			_tmp.EntPolicyAccumHonorId = this.EntPolicyAccumHonorId;
			_tmp.AccumCredit = this.AccumCredit;
			_tmp.AccumPoints = this.AccumPoints;
			_tmp.EntMainGrad1 = this.EntMainGrad1;
			_tmp.EntMainGrad2 = this.EntMainGrad2;
			_tmp.EntMainGrad3 = this.EntMainGrad3;
			_tmp.EntMainMatrixId = this.EntMainMatrixId;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			_tmp.UnivApproveDate = this.UnivApproveDate;
			_tmp.FacApproveDate = this.FacApproveDate;
			_tmp.DeptApproveDate = this.DeptApproveDate;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.IsActive = this.IsActive;
			_tmp.Notes = this.Notes;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.Cgpa = this.Cgpa;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.OldAlumniFlg = this.OldAlumniFlg;
			_tmp.StudCardFlg = this.StudCardFlg;
			_tmp.GrantingCode = this.GrantingCode;
			_tmp.IsLast = this.IsLast;
			_tmp.AmanestPermanentStopFlag = this.AmanestPermanentStopFlag;
			_tmp.BatchNo = this.BatchNo;
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.TrnsfrFrom = this.TrnsfrFrom;
			_tmp.TrnsfrNotes = this.TrnsfrNotes;
			_tmp.TrnsfrDate = this.TrnsfrDate;
			_tmp.OrgFacultyNameAr = this.OrgFacultyNameAr;
			_tmp.StudFeeBalance = this.StudFeeBalance;
			_tmp.AccumPrcent = this.AccumPrcent;
			_tmp.HecId = this.HecId;
			_tmp.ExpctdGradDate = this.ExpctdGradDate;
			_tmp.AccumMarks = this.AccumMarks;
			_tmp.AccumCourseMarks = this.AccumCourseMarks;
			_tmp.MotherId = this.MotherId;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				_tmp.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				_tmp.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearJoinIdSource != null && existingCopies.Contains(this.EdAcadYearJoinIdSource))
				_tmp.EdAcadYearJoinIdSource = existingCopies[this.EdAcadYearJoinIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource, existingCopies) as EdAcadYear;
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCdeQualPhaseSource != null && existingCopies.Contains(this.EdCdeQualPhaseSource))
				_tmp.EdCdeQualPhaseSource = existingCopies[this.EdCdeQualPhaseSource] as EdCdeQualPhase;
			else
				_tmp.EdCdeQualPhaseSource = MakeCopyOf(this.EdCdeQualPhaseSource, existingCopies) as EdCdeQualPhase;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeSemesterJoinIdSource != null && existingCopies.Contains(this.EdCodeSemesterJoinIdSource))
				_tmp.EdCodeSemesterJoinIdSource = existingCopies[this.EdCodeSemesterJoinIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterJoinIdSource = MakeCopyOf(this.EdCodeSemesterJoinIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudQualIdSource != null && existingCopies.Contains(this.EdStudQualIdSource))
				_tmp.EdStudQualIdSource = existingCopies[this.EdStudQualIdSource] as EdStudQual;
			else
				_tmp.EdStudQualIdSource = MakeCopyOf(this.EdStudQualIdSource, existingCopies) as EdStudQual;
			if (this.EntMainMatrixIdSource != null && existingCopies.Contains(this.EntMainMatrixIdSource))
				_tmp.EntMainMatrixIdSource = existingCopies[this.EntMainMatrixIdSource] as EntMainMatrix;
			else
				_tmp.EntMainMatrixIdSource = MakeCopyOf(this.EntMainMatrixIdSource, existingCopies) as EntMainMatrix;
			if (this.EntPolicyAccumHonorIdSource != null && existingCopies.Contains(this.EntPolicyAccumHonorIdSource))
				_tmp.EntPolicyAccumHonorIdSource = existingCopies[this.EntPolicyAccumHonorIdSource] as EntPolicyAccumHonor;
			else
				_tmp.EntPolicyAccumHonorIdSource = MakeCopyOf(this.EntPolicyAccumHonorIdSource, existingCopies) as EntPolicyAccumHonor;
			if (this.EntMainGrad1Source != null && existingCopies.Contains(this.EntMainGrad1Source))
				_tmp.EntMainGrad1Source = existingCopies[this.EntMainGrad1Source] as EntityMain;
			else
				_tmp.EntMainGrad1Source = MakeCopyOf(this.EntMainGrad1Source, existingCopies) as EntityMain;
			if (this.EntMainGrad2Source != null && existingCopies.Contains(this.EntMainGrad2Source))
				_tmp.EntMainGrad2Source = existingCopies[this.EntMainGrad2Source] as EntityMain;
			else
				_tmp.EntMainGrad2Source = MakeCopyOf(this.EntMainGrad2Source, existingCopies) as EntityMain;
			if (this.EntMainGrad3Source != null && existingCopies.Contains(this.EntMainGrad3Source))
				_tmp.EntMainGrad3Source = existingCopies[this.EntMainGrad3Source] as EntityMain;
			else
				_tmp.EntMainGrad3Source = MakeCopyOf(this.EntMainGrad3Source, existingCopies) as EntityMain;
			if (this.GsCdeHonorIdSource != null && existingCopies.Contains(this.GsCdeHonorIdSource))
				_tmp.GsCdeHonorIdSource = existingCopies[this.GsCdeHonorIdSource] as GsCdeHonor;
			else
				_tmp.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource, existingCopies) as GsCdeHonor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudFacultyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudFacultyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudFacultyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudFacultyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudFacultyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudFacultyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudFacultyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudFacultyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudFacultyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudFacultyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudFacultyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudFacultyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudFacultyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudFaculty"/> object.
	/// </remarks>
	public class EdStudFacultyEventArgs : System.EventArgs
	{
		private EdStudFacultyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudFacultyEventArgs class.
		///</summary>
		public EdStudFacultyEventArgs(EdStudFacultyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudFacultyEventArgs class.
		///</summary>
		public EdStudFacultyEventArgs(EdStudFacultyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudFacultyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudFacultyColumn" />
		public EdStudFacultyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudFaculty related events.
	///</summary>
	public delegate void EdStudFacultyEventHandler(object sender, EdStudFacultyEventArgs e);
	
	#region EdStudFacultyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudFacultyComparer : System.Collections.Generic.IComparer<EdStudFaculty>
	{
		EdStudFacultyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudFacultyComparer"/> class.
        /// </summary>
		public EdStudFacultyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudFacultyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudFacultyComparer(EdStudFacultyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudFaculty"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudFaculty"/> to compare.</param>
        /// <param name="b">The second <c>EdStudFaculty</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudFaculty a, EdStudFaculty b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudFaculty entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudFaculty a, EdStudFaculty b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudFacultyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudFacultyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudFaculty"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudFacultyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudFacultyKey class.
		/// </summary>
		public EdStudFacultyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudFacultyKey class.
		/// </summary>
		public EdStudFacultyKey(EdStudFacultyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudFacultyId = entity.EdStudFacultyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudFacultyKey class.
		/// </summary>
		public EdStudFacultyKey(System.Decimal _edStudFacultyId)
		{
			#region Init Properties

			this.EdStudFacultyId = _edStudFacultyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudFacultyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudFacultyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudFacultyId property
		private System.Decimal _edStudFacultyId;
		
		/// <summary>
		/// Gets or sets the EdStudFacultyId property.
		/// </summary>
		public System.Decimal EdStudFacultyId
		{
			get { return _edStudFacultyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudFacultyId = value;
				
				_edStudFacultyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudFacultyId = ( values["EdStudFacultyId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudFacultyId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudFacultyId", EdStudFacultyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudFacultyId: {0}{1}",
								EdStudFacultyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudFacultyColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudFaculty columns.
	/// </summary>
	[Serializable]
	public enum EdStudFacultyColumn : int
	{
		/// <summary>
		/// EdStudFacultyId : 
		/// </summary>
		[EnumTextValue("ED_STUD_FACULTY_ID")]
		[ColumnEnum("ED_STUD_FACULTY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudFacultyId = 1,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeId = 4,
		/// <summary>
		/// StudFacultyCode : 
		/// </summary>
		[EnumTextValue("STUD_FACULTY_CODE")]
		[ColumnEnum("STUD_FACULTY_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		StudFacultyCode = 5,
		/// <summary>
		/// AdmCdeAppTypeId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_APP_TYPE_ID")]
		[ColumnEnum("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeAppTypeId = 6,
		/// <summary>
		/// EdAcadYearJoinId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_JOIN_ID")]
		[ColumnEnum("ED_ACAD_YEAR_JOIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearJoinId = 7,
		/// <summary>
		/// EdCodeSemesterJoinId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_JOIN_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_JOIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterJoinId = 8,
		/// <summary>
		/// EnrollDate : 
		/// </summary>
		[EnumTextValue("ENROLL_DATE")]
		[ColumnEnum("ENROLL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EnrollDate = 9,
		/// <summary>
		/// ComptativeRate : 
		/// </summary>
		[EnumTextValue("COMPTATIVE_RATE")]
		[ColumnEnum("COMPTATIVE_RATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ComptativeRate = 10,
		/// <summary>
		/// FullTimeFlg : 1: morning
		/// 		/// 2: evening   KU
		/// </summary>
		[EnumTextValue("FULL_TIME_FLG")]
		[ColumnEnum("FULL_TIME_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FullTimeFlg = 11,
		/// <summary>
		/// EdCdeQualPhase : 
		/// </summary>
		[EnumTextValue("ED_CDE_QUAL_PHASE")]
		[ColumnEnum("ED_CDE_QUAL_PHASE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeQualPhase = 12,
		/// <summary>
		/// EdStudQualId : 
		/// </summary>
		[EnumTextValue("ED_STUD_QUAL_ID")]
		[ColumnEnum("ED_STUD_QUAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudQualId = 13,
		/// <summary>
		/// GraduatesFlag : 
		/// </summary>
		[EnumTextValue("GRADUATES_FLAG")]
		[ColumnEnum("GRADUATES_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GraduatesFlag = 14,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 15,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 16,
		/// <summary>
		/// WithHonor : 
		/// </summary>
		[EnumTextValue("WITH_HONOR")]
		[ColumnEnum("WITH_HONOR", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WithHonor = 17,
		/// <summary>
		/// EntPolicyAccumHonorId : XXXXX
		/// </summary>
		[EnumTextValue("ENT_POLICY_ACCUM_HONOR_ID")]
		[ColumnEnum("ENT_POLICY_ACCUM_HONOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAccumHonorId = 18,
		/// <summary>
		/// AccumCredit : 
		/// </summary>
		[EnumTextValue("ACCUM_CREDIT")]
		[ColumnEnum("ACCUM_CREDIT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumCredit = 19,
		/// <summary>
		/// AccumPoints : 
		/// </summary>
		[EnumTextValue("ACCUM_POINTS")]
		[ColumnEnum("ACCUM_POINTS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPoints = 20,
		/// <summary>
		/// EntMainGrad1 : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_GRAD_1")]
		[ColumnEnum("ENT_MAIN_GRAD_1", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainGrad1 = 21,
		/// <summary>
		/// EntMainGrad2 : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_GRAD_2")]
		[ColumnEnum("ENT_MAIN_GRAD_2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainGrad2 = 22,
		/// <summary>
		/// EntMainGrad3 : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_GRAD_3")]
		[ColumnEnum("ENT_MAIN_GRAD_3", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainGrad3 = 23,
		/// <summary>
		/// EntMainMatrixId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_MATRIX_ID")]
		[ColumnEnum("ENT_MAIN_MATRIX_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainMatrixId = 24,
		/// <summary>
		/// TransferFlg : 
		/// </summary>
		[EnumTextValue("TRANSFER_FLG")]
		[ColumnEnum("TRANSFER_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransferFlg = 25,
		/// <summary>
		/// AdmCodeTransferTypeId : 
		/// </summary>
		[EnumTextValue("ADM_CODE_TRANSFER_TYPE_ID")]
		[ColumnEnum("ADM_CODE_TRANSFER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCodeTransferTypeId = 26,
		/// <summary>
		/// UnivApproveDate : 
		/// </summary>
		[EnumTextValue("UNIV_APPROVE_DATE")]
		[ColumnEnum("UNIV_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UnivApproveDate = 27,
		/// <summary>
		/// FacApproveDate : 
		/// </summary>
		[EnumTextValue("FAC_APPROVE_DATE")]
		[ColumnEnum("FAC_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FacApproveDate = 28,
		/// <summary>
		/// DeptApproveDate : 
		/// </summary>
		[EnumTextValue("DEPT_APPROVE_DATE")]
		[ColumnEnum("DEPT_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeptApproveDate = 29,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 30,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 31,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 32,
		/// <summary>
		/// MajorCgpa : 
		/// </summary>
		[EnumTextValue("MAJOR_CGPA")]
		[ColumnEnum("MAJOR_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorCgpa = 33,
		/// <summary>
		/// Cgpa : 
		/// </summary>
		[EnumTextValue("CGPA")]
		[ColumnEnum("CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Cgpa = 34,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdBylawId = 35,
		/// <summary>
		/// OldAlumniFlg : 
		/// </summary>
		[EnumTextValue("OLD_ALUMNI_FLG")]
		[ColumnEnum("OLD_ALUMNI_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OldAlumniFlg = 36,
		/// <summary>
		/// StudCardFlg : 
		/// </summary>
		[EnumTextValue("STUD_CARD_FLG")]
		[ColumnEnum("STUD_CARD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudCardFlg = 37,
		/// <summary>
		/// GrantingCode : 
		/// </summary>
		[EnumTextValue("GRANTING_CODE")]
		[ColumnEnum("GRANTING_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		GrantingCode = 38,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsLast = 39,
		/// <summary>
		/// AmanestPermanentStopFlag : 
		/// </summary>
		[EnumTextValue("AMANEST_PERMANENT_STOP_FLAG")]
		[ColumnEnum("AMANEST_PERMANENT_STOP_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AmanestPermanentStopFlag = 40,
		/// <summary>
		/// BatchNo : رقم الدفعة
		/// </summary>
		[EnumTextValue("BATCH_NO")]
		[ColumnEnum("BATCH_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 3)]
		BatchNo = 41,
		/// <summary>
		/// GsCdeHonorId : 
		/// </summary>
		[EnumTextValue("GS_CDE_HONOR_ID")]
		[ColumnEnum("GS_CDE_HONOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdeHonorId = 42,
		/// <summary>
		/// TrnsfrFrom : الجهة المحول منها
		/// </summary>
		[EnumTextValue("TRNSFR_FROM")]
		[ColumnEnum("TRNSFR_FROM", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		TrnsfrFrom = 43,
		/// <summary>
		/// TrnsfrNotes : ملاحظات التحويل
		/// </summary>
		[EnumTextValue("TRNSFR_NOTES")]
		[ColumnEnum("TRNSFR_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		TrnsfrNotes = 44,
		/// <summary>
		/// TrnsfrDate : تاريخ التحويل
		/// </summary>
		[EnumTextValue("TRNSFR_DATE")]
		[ColumnEnum("TRNSFR_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TrnsfrDate = 45,
		/// <summary>
		/// OrgFacultyNameAr : التنسيق المدنى الكلية المرشح لها
		/// </summary>
		[EnumTextValue("ORG_FACULTY_NAME_AR")]
		[ColumnEnum("ORG_FACULTY_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		OrgFacultyNameAr = 46,
		/// <summary>
		/// StudFeeBalance : رصيد الطالب الحالى
		/// </summary>
		[EnumTextValue("STUD_FEE_BALANCE")]
		[ColumnEnum("STUD_FEE_BALANCE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudFeeBalance = 47,
		/// <summary>
		/// AccumPrcent : نسبة  مجموع التخرج
		/// </summary>
		[EnumTextValue("ACCUM_PRCENT")]
		[ColumnEnum("ACCUM_PRCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPrcent = 48,
		/// <summary>
		/// HecId : HEC-ID
		/// </summary>
		[EnumTextValue("HEC_ID")]
		[ColumnEnum("HEC_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		HecId = 49,
		/// <summary>
		/// ExpctdGradDate : Ejust-sponsored
		/// </summary>
		[EnumTextValue("EXPCTD_GRAD_DATE")]
		[ColumnEnum("EXPCTD_GRAD_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExpctdGradDate = 50,
		/// <summary>
		/// AccumMarks : اجمالى مجموع درجات مقررات الطالب 
		/// </summary>
		[EnumTextValue("ACCUM_MARKS")]
		[ColumnEnum("ACCUM_MARKS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumMarks = 51,
		/// <summary>
		/// AccumCourseMarks : 
		/// 		/// اجمالى مجموع درجات خطة الطالب 
		/// </summary>
		[EnumTextValue("ACCUM_COURSE_MARKS")]
		[ColumnEnum("ACCUM_COURSE_MARKS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumCourseMarks = 52,
		/// <summary>
		/// MotherId : used in EUE to send to another destination  represent another code
		/// </summary>
		[EnumTextValue("Mother_ID")]
		[ColumnEnum("Mother_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MotherId = 53,
		/// <summary>
		/// PartTimeFlg : 
		/// </summary>
		[EnumTextValue("PART_TIME_FLG")]
		[ColumnEnum("PART_TIME_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PartTimeFlg = 54
	}//End enum

	#endregion EdStudFacultyColumn Enum

} // end namespace
