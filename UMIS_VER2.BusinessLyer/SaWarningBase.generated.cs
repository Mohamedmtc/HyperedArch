
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaWarning.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_WARNING' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaWarningBase : EntityBase, ISaWarning, IEntityId<SaWarningKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaWarningEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaWarningEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaWarningEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaWarning> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaWarningEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaWarningEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaWarningBase"/> instance.
		///</summary>
		public SaWarningBase()
		{
			this.entityData = new SaWarningEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaWarningBase"/> instance.
		///</summary>
		///<param name="_saWarningId"></param>
		///<param name="_warningNum"></param>
		///<param name="_warningDate"></param>
		///<param name="_warningAddTypeId"></param>
		///<param name="_coment"></param>
		///<param name="_saJobStoppageId"></param>
		///<param name="_asFacultyInfoId"></param>
		public SaWarningBase(System.Decimal _saWarningId, System.Decimal _warningNum, System.DateTime _warningDate, 
			System.Decimal _warningAddTypeId, System.String _coment, System.Decimal _saJobStoppageId, System.Decimal _asFacultyInfoId)
		{
			this.entityData = new SaWarningEntityData();
			this.backupData = null;

			this.SaWarningId = _saWarningId;
			this.WarningNum = _warningNum;
			this.WarningDate = _warningDate;
			this.WarningAddTypeId = _warningAddTypeId;
			this.Coment = _coment;
			this.SaJobStoppageId = _saJobStoppageId;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaWarning"/> instance.
		///</summary>
		///<param name="_saWarningId"></param>
		///<param name="_warningNum"></param>
		///<param name="_warningDate"></param>
		///<param name="_warningAddTypeId"></param>
		///<param name="_coment"></param>
		///<param name="_saJobStoppageId"></param>
		///<param name="_asFacultyInfoId"></param>
		public static SaWarning CreateSaWarning(System.Decimal _saWarningId, System.Decimal _warningNum, System.DateTime _warningDate, 
			System.Decimal _warningAddTypeId, System.String _coment, System.Decimal _saJobStoppageId, System.Decimal _asFacultyInfoId)
		{
			SaWarning newSaWarning = new SaWarning();
			newSaWarning.SaWarningId = _saWarningId;
			newSaWarning.WarningNum = _warningNum;
			newSaWarning.WarningDate = _warningDate;
			newSaWarning.WarningAddTypeId = _warningAddTypeId;
			newSaWarning.Coment = _coment;
			newSaWarning.SaJobStoppageId = _saJobStoppageId;
			newSaWarning.AsFacultyInfoId = _asFacultyInfoId;
			return newSaWarning;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaWarningId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaWarningId
		{
			get
			{
				return this.entityData.SaWarningId; 
			}
			
			set
			{
				if (this.entityData.SaWarningId == value)
					return;
					
				OnColumnChanging(SaWarningColumn.SaWarningId, this.entityData.SaWarningId);
				this.entityData.SaWarningId = value;
				this.EntityId.SaWarningId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.SaWarningId, this.entityData.SaWarningId);
				OnPropertyChanged("SaWarningId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_WARNING_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_WARNING_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaWarningId
		{
			get { return this.entityData.OriginalSaWarningId; }
			set { this.entityData.OriginalSaWarningId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the WarningNum property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal WarningNum
		{
			get
			{
				return this.entityData.WarningNum; 
			}
			
			set
			{
				if (this.entityData.WarningNum == value)
					return;
					
				OnColumnChanging(SaWarningColumn.WarningNum, this.entityData.WarningNum);
				this.entityData.WarningNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.WarningNum, this.entityData.WarningNum);
				OnPropertyChanged("WarningNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WarningDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime WarningDate
		{
			get
			{
				return this.entityData.WarningDate; 
			}
			
			set
			{
				if (this.entityData.WarningDate == value)
					return;
					
				OnColumnChanging(SaWarningColumn.WarningDate, this.entityData.WarningDate);
				this.entityData.WarningDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.WarningDate, this.entityData.WarningDate);
				OnPropertyChanged("WarningDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WarningAddTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal WarningAddTypeId
		{
			get
			{
				return this.entityData.WarningAddTypeId; 
			}
			
			set
			{
				if (this.entityData.WarningAddTypeId == value)
					return;
					
				OnColumnChanging(SaWarningColumn.WarningAddTypeId, this.entityData.WarningAddTypeId);
				this.entityData.WarningAddTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.WarningAddTypeId, this.entityData.WarningAddTypeId);
				OnPropertyChanged("WarningAddTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Coment property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Coment
		{
			get
			{
				return this.entityData.Coment; 
			}
			
			set
			{
				if (this.entityData.Coment == value)
					return;
					
				OnColumnChanging(SaWarningColumn.Coment, this.entityData.Coment);
				this.entityData.Coment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.Coment, this.entityData.Coment);
				OnPropertyChanged("Coment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaJobStoppageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaJobStoppageId
		{
			get
			{
				return this.entityData.SaJobStoppageId; 
			}
			
			set
			{
				if (this.entityData.SaJobStoppageId == value)
					return;
					
				OnColumnChanging(SaWarningColumn.SaJobStoppageId, this.entityData.SaJobStoppageId);
				this.entityData.SaJobStoppageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.SaJobStoppageId, this.entityData.SaJobStoppageId);
				OnPropertyChanged("SaJobStoppageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaWarningColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaWarningColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaWarningAddType"/>.
		/// </summary>
		/// <value>The source SaWarningAddType for WarningAddTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaWarningAddType WarningAddTypeIdSource
      	{
            get { return entityData.WarningAddTypeIdSource; }
            set { entityData.WarningAddTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStoppage"/>.
		/// </summary>
		/// <value>The source SaJobStoppage for SaJobStoppageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaJobStoppage SaJobStoppageIdSource
      	{
            get { return entityData.SaJobStoppageIdSource; }
            set { entityData.SaJobStoppageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Coment", "Coment", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_WARNING"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_WARNING_ID", "WARNING_NUM", "WARNING_DATE", "WARNING_ADD_TYPE_ID", "COMENT", "SA_JOB_STOPPAGE_ID", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaWarningEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaWarning) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaWarning>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaWarning);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaWarning Entity 
		///</summary>
		protected virtual SaWarning Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaWarning copy = new SaWarning();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaWarningId = this.SaWarningId;
					copy.OriginalSaWarningId = this.OriginalSaWarningId;
				copy.WarningNum = this.WarningNum;
				copy.WarningDate = this.WarningDate;
				copy.WarningAddTypeId = this.WarningAddTypeId;
				copy.Coment = this.Coment;
				copy.SaJobStoppageId = this.SaJobStoppageId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.WarningAddTypeIdSource != null && existingCopies.Contains(this.WarningAddTypeIdSource))
				copy.WarningAddTypeIdSource = existingCopies[this.WarningAddTypeIdSource] as SaWarningAddType;
			else
				copy.WarningAddTypeIdSource = MakeCopyOf(this.WarningAddTypeIdSource, existingCopies) as SaWarningAddType;
			if (this.SaJobStoppageIdSource != null && existingCopies.Contains(this.SaJobStoppageIdSource))
				copy.SaJobStoppageIdSource = existingCopies[this.SaJobStoppageIdSource] as SaJobStoppage;
			else
				copy.SaJobStoppageIdSource = MakeCopyOf(this.SaJobStoppageIdSource, existingCopies) as SaJobStoppage;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaWarning Entity 
		///</summary>
		public virtual SaWarning Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaWarning Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaWarning DeepCopy()
		{
			return EntityHelper.Clone<SaWarning>(this as SaWarning);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaWarningEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaWarningEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaWarningEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaWarningColumn column)
		{
			switch(column)
			{
					case SaWarningColumn.SaWarningId:
					return entityData.SaWarningId != _originalData.SaWarningId;
					case SaWarningColumn.WarningNum:
					return entityData.WarningNum != _originalData.WarningNum;
					case SaWarningColumn.WarningDate:
					return entityData.WarningDate != _originalData.WarningDate;
					case SaWarningColumn.WarningAddTypeId:
					return entityData.WarningAddTypeId != _originalData.WarningAddTypeId;
					case SaWarningColumn.Coment:
					return entityData.Coment != _originalData.Coment;
					case SaWarningColumn.SaJobStoppageId:
					return entityData.SaJobStoppageId != _originalData.SaJobStoppageId;
					case SaWarningColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaWarningColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaWarningId != _originalData.SaWarningId;
			result = result || entityData.WarningNum != _originalData.WarningNum;
			result = result || entityData.WarningDate != _originalData.WarningDate;
			result = result || entityData.WarningAddTypeId != _originalData.WarningAddTypeId;
			result = result || entityData.Coment != _originalData.Coment;
			result = result || entityData.SaJobStoppageId != _originalData.SaJobStoppageId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaWarning Entity with the original data.
		///</summary>
		public SaWarning GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaWarning(
				_originalData.SaWarningId,
				_originalData.WarningNum,
				_originalData.WarningDate,
				_originalData.WarningAddTypeId,
				_originalData.Coment,
				_originalData.SaJobStoppageId,
				_originalData.AsFacultyInfoId
				);
				
			return (SaWarning)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaWarningBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaWarningBase)
				return ValueEquals(this, (SaWarningBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaWarningBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaWarningId.GetHashCode() ^ 
					this.WarningNum.GetHashCode() ^ 
					this.WarningDate.GetHashCode() ^ 
					this.WarningAddTypeId.GetHashCode() ^ 
					((this.Coment == null) ? string.Empty : this.Coment.ToString()).GetHashCode() ^ 
					this.SaJobStoppageId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaWarningBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaWarningBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaWarningBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaWarningBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaWarningBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaWarningBase Object1, SaWarningBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaWarningId != Object2.SaWarningId)
				equal = false;
			if (Object1.WarningNum != Object2.WarningNum)
				equal = false;
			if (Object1.WarningDate != Object2.WarningDate)
				equal = false;
			if (Object1.WarningAddTypeId != Object2.WarningAddTypeId)
				equal = false;
			if ( Object1.Coment != null && Object2.Coment != null )
			{
				if (Object1.Coment != Object2.Coment)
					equal = false;
			}
			else if (Object1.Coment == null ^ Object2.Coment == null )
			{
				equal = false;
			}
			if (Object1.SaJobStoppageId != Object2.SaJobStoppageId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaWarningBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaWarningComparer GetComparer()
        {
            return new SaWarningComparer();
        }
        */

        // Comparer delegates back to SaWarning
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaWarning rhs, SaWarningColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaWarningColumn.SaWarningId:
            		return this.SaWarningId.CompareTo(rhs.SaWarningId);
            		
            		                 
            	
            	
            	case SaWarningColumn.WarningNum:
            		return this.WarningNum.CompareTo(rhs.WarningNum);
            		
            		                 
            	
            	
            	case SaWarningColumn.WarningDate:
            		return this.WarningDate.CompareTo(rhs.WarningDate);
            		
            		                 
            	
            	
            	case SaWarningColumn.WarningAddTypeId:
            		return this.WarningAddTypeId.CompareTo(rhs.WarningAddTypeId);
            		
            		                 
            	
            	
            	case SaWarningColumn.Coment:
            		return this.Coment.CompareTo(rhs.Coment);
            		
            		                 
            	
            	
            	case SaWarningColumn.SaJobStoppageId:
            		return this.SaJobStoppageId.CompareTo(rhs.SaJobStoppageId);
            		
            		                 
            	
            	
            	case SaWarningColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaWarningKey> Members
		
		// member variable for the EntityId property
		private SaWarningKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaWarningKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaWarningKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaWarning")
					.Append("|").Append( this.SaWarningId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- SaWarningId: {0}{7}- WarningNum: {1}{7}- WarningDate: {2}{7}- WarningAddTypeId: {3}{7}- Coment: {4}{7}- SaJobStoppageId: {5}{7}- AsFacultyInfoId: {6}{7}{9}", 
				this.SaWarningId,
				this.WarningNum,
				this.WarningDate,
				this.WarningAddTypeId,
				(this.Coment == null) ? string.Empty : this.Coment.ToString(),
				this.SaJobStoppageId,
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_WARNING' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaWarningEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_WARNING_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_WARNING"</remarks>
		public System.Decimal SaWarningId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaWarningId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WARNING_NUM : 
		/// </summary>
		public System.Decimal		  WarningNum = 0.0m;
		
		/// <summary>
		/// WARNING_DATE : 
		/// </summary>
		public System.DateTime		  WarningDate = DateTime.MinValue;
		
		/// <summary>
		/// WARNING_ADD_TYPE_ID : 
		/// </summary>
		public System.Decimal		  WarningAddTypeId = 0.0m;
		
		/// <summary>
		/// COMENT : 
		/// </summary>
		public System.String		  Coment = null;
		
		/// <summary>
		/// SA_JOB_STOPPAGE_ID : 
		/// </summary>
		public System.Decimal		  SaJobStoppageId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaWarningAddType _warningAddTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaWarningAddType"/>.
		/// </summary>
		/// <value>The source SaWarningAddType for WarningAddTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaWarningAddType WarningAddTypeIdSource
      	{
            get { return this._warningAddTypeIdSource; }
            set { this._warningAddTypeIdSource = value; }
      	}
		private SaJobStoppage _saJobStoppageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStoppage"/>.
		/// </summary>
		/// <value>The source SaJobStoppage for SaJobStoppageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaJobStoppage SaJobStoppageIdSource
      	{
            get { return this._saJobStoppageIdSource; }
            set { this._saJobStoppageIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaWarningEntityData _tmp = new SaWarningEntityData();
						
			_tmp.SaWarningId = this.SaWarningId;
			_tmp.OriginalSaWarningId = this.OriginalSaWarningId;
			
			_tmp.WarningNum = this.WarningNum;
			_tmp.WarningDate = this.WarningDate;
			_tmp.WarningAddTypeId = this.WarningAddTypeId;
			_tmp.Coment = this.Coment;
			_tmp.SaJobStoppageId = this.SaJobStoppageId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.WarningAddTypeIdSource != null)
				_tmp.WarningAddTypeIdSource = MakeCopyOf(this.WarningAddTypeIdSource) as SaWarningAddType;
			if (this.SaJobStoppageIdSource != null)
				_tmp.SaJobStoppageIdSource = MakeCopyOf(this.SaJobStoppageIdSource) as SaJobStoppage;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaWarningEntityData _tmp = new SaWarningEntityData();
						
			_tmp.SaWarningId = this.SaWarningId;
			_tmp.OriginalSaWarningId = this.OriginalSaWarningId;
			
			_tmp.WarningNum = this.WarningNum;
			_tmp.WarningDate = this.WarningDate;
			_tmp.WarningAddTypeId = this.WarningAddTypeId;
			_tmp.Coment = this.Coment;
			_tmp.SaJobStoppageId = this.SaJobStoppageId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.WarningAddTypeIdSource != null && existingCopies.Contains(this.WarningAddTypeIdSource))
				_tmp.WarningAddTypeIdSource = existingCopies[this.WarningAddTypeIdSource] as SaWarningAddType;
			else
				_tmp.WarningAddTypeIdSource = MakeCopyOf(this.WarningAddTypeIdSource, existingCopies) as SaWarningAddType;
			if (this.SaJobStoppageIdSource != null && existingCopies.Contains(this.SaJobStoppageIdSource))
				_tmp.SaJobStoppageIdSource = existingCopies[this.SaJobStoppageIdSource] as SaJobStoppage;
			else
				_tmp.SaJobStoppageIdSource = MakeCopyOf(this.SaJobStoppageIdSource, existingCopies) as SaJobStoppage;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaWarningColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaWarningColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaWarningColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaWarningColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaWarningColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaWarningColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaWarningEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaWarningEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaWarningColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaWarningColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaWarningEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaWarningEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaWarningEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaWarning"/> object.
	/// </remarks>
	public class SaWarningEventArgs : System.EventArgs
	{
		private SaWarningColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaWarningEventArgs class.
		///</summary>
		public SaWarningEventArgs(SaWarningColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaWarningEventArgs class.
		///</summary>
		public SaWarningEventArgs(SaWarningColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaWarningColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaWarningColumn" />
		public SaWarningColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaWarning related events.
	///</summary>
	public delegate void SaWarningEventHandler(object sender, SaWarningEventArgs e);
	
	#region SaWarningComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaWarningComparer : System.Collections.Generic.IComparer<SaWarning>
	{
		SaWarningColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaWarningComparer"/> class.
        /// </summary>
		public SaWarningComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaWarningComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaWarningComparer(SaWarningColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaWarning"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaWarning"/> to compare.</param>
        /// <param name="b">The second <c>SaWarning</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaWarning a, SaWarning b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaWarning entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaWarning a, SaWarning b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaWarningColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaWarningKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaWarning"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaWarningKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaWarningKey class.
		/// </summary>
		public SaWarningKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaWarningKey class.
		/// </summary>
		public SaWarningKey(SaWarningBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaWarningId = entity.SaWarningId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaWarningKey class.
		/// </summary>
		public SaWarningKey(System.Decimal _saWarningId)
		{
			#region Init Properties

			this.SaWarningId = _saWarningId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaWarningBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaWarningBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaWarningId property
		private System.Decimal _saWarningId;
		
		/// <summary>
		/// Gets or sets the SaWarningId property.
		/// </summary>
		public System.Decimal SaWarningId
		{
			get { return _saWarningId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaWarningId = value;
				
				_saWarningId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaWarningId = ( values["SaWarningId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaWarningId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaWarningId", SaWarningId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaWarningId: {0}{1}",
								SaWarningId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaWarningColumn Enum
	
	/// <summary>
	/// Enumerate the SaWarning columns.
	/// </summary>
	[Serializable]
	public enum SaWarningColumn : int
	{
		/// <summary>
		/// SaWarningId : 
		/// </summary>
		[EnumTextValue("SA_WARNING_ID")]
		[ColumnEnum("SA_WARNING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaWarningId = 1,
		/// <summary>
		/// WarningNum : 
		/// </summary>
		[EnumTextValue("WARNING_NUM")]
		[ColumnEnum("WARNING_NUM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		WarningNum = 2,
		/// <summary>
		/// WarningDate : 
		/// </summary>
		[EnumTextValue("WARNING_DATE")]
		[ColumnEnum("WARNING_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		WarningDate = 3,
		/// <summary>
		/// WarningAddTypeId : 
		/// </summary>
		[EnumTextValue("WARNING_ADD_TYPE_ID")]
		[ColumnEnum("WARNING_ADD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		WarningAddTypeId = 4,
		/// <summary>
		/// Coment : 
		/// </summary>
		[EnumTextValue("COMENT")]
		[ColumnEnum("COMENT", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Coment = 5,
		/// <summary>
		/// SaJobStoppageId : 
		/// </summary>
		[EnumTextValue("SA_JOB_STOPPAGE_ID")]
		[ColumnEnum("SA_JOB_STOPPAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaJobStoppageId = 6,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 7
	}//End enum

	#endregion SaWarningColumn Enum

} // end namespace
