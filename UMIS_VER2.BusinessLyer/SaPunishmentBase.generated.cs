
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaPunishment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_PUNISHMENT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaPunishmentBase : EntityBase, ISaPunishment, IEntityId<SaPunishmentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaPunishmentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaPunishmentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaPunishmentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaPunishment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaPunishmentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaPunishmentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaPunishmentBase"/> instance.
		///</summary>
		public SaPunishmentBase()
		{
			this.entityData = new SaPunishmentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaPunishmentBase"/> instance.
		///</summary>
		///<param name="_saPunishmentId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_daysNum"></param>
		///<param name="_punishDate"></param>
		///<param name="_caseNum"></param>
		///<param name="_eraseDecisionNum"></param>
		///<param name="_eraseDecisionDate"></param>
		///<param name="_eraseDate"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodePunishRsnId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_saPunishBylawAuthId"></param>
		public SaPunishmentBase(System.Decimal _saPunishmentId, System.String _decisionNum, 
			System.DateTime? _decisionDate, System.String _decisionSumm, System.Decimal? _daysNum, 
			System.DateTime _punishDate, System.String _caseNum, System.String _eraseDecisionNum, 
			System.DateTime? _eraseDecisionDate, System.DateTime? _eraseDate, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal _saCodePunishRsnId, System.Decimal _gsApprovalHId, 
			System.Decimal _asFacultyInfoId, System.Decimal _saPunishBylawAuthId)
		{
			this.entityData = new SaPunishmentEntityData();
			this.backupData = null;

			this.SaPunishmentId = _saPunishmentId;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.DecisionSumm = _decisionSumm;
			this.DaysNum = _daysNum;
			this.PunishDate = _punishDate;
			this.CaseNum = _caseNum;
			this.EraseDecisionNum = _eraseDecisionNum;
			this.EraseDecisionDate = _eraseDecisionDate;
			this.EraseDate = _eraseDate;
			this.Comments = _comments;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodePunishRsnId = _saCodePunishRsnId;
			this.GsApprovalHId = _gsApprovalHId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.SaPunishBylawAuthId = _saPunishBylawAuthId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaPunishment"/> instance.
		///</summary>
		///<param name="_saPunishmentId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_daysNum"></param>
		///<param name="_punishDate"></param>
		///<param name="_caseNum"></param>
		///<param name="_eraseDecisionNum"></param>
		///<param name="_eraseDecisionDate"></param>
		///<param name="_eraseDate"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodePunishRsnId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_saPunishBylawAuthId"></param>
		public static SaPunishment CreateSaPunishment(System.Decimal _saPunishmentId, System.String _decisionNum, 
			System.DateTime? _decisionDate, System.String _decisionSumm, System.Decimal? _daysNum, 
			System.DateTime _punishDate, System.String _caseNum, System.String _eraseDecisionNum, 
			System.DateTime? _eraseDecisionDate, System.DateTime? _eraseDate, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal _saCodePunishRsnId, System.Decimal _gsApprovalHId, 
			System.Decimal _asFacultyInfoId, System.Decimal _saPunishBylawAuthId)
		{
			SaPunishment newSaPunishment = new SaPunishment();
			newSaPunishment.SaPunishmentId = _saPunishmentId;
			newSaPunishment.DecisionNum = _decisionNum;
			newSaPunishment.DecisionDate = _decisionDate;
			newSaPunishment.DecisionSumm = _decisionSumm;
			newSaPunishment.DaysNum = _daysNum;
			newSaPunishment.PunishDate = _punishDate;
			newSaPunishment.CaseNum = _caseNum;
			newSaPunishment.EraseDecisionNum = _eraseDecisionNum;
			newSaPunishment.EraseDecisionDate = _eraseDecisionDate;
			newSaPunishment.EraseDate = _eraseDate;
			newSaPunishment.Comments = _comments;
			newSaPunishment.SaStfMemberId = _saStfMemberId;
			newSaPunishment.SaCodePunishRsnId = _saCodePunishRsnId;
			newSaPunishment.GsApprovalHId = _gsApprovalHId;
			newSaPunishment.AsFacultyInfoId = _asFacultyInfoId;
			newSaPunishment.SaPunishBylawAuthId = _saPunishBylawAuthId;
			return newSaPunishment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaPunishmentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaPunishmentId
		{
			get
			{
				return this.entityData.SaPunishmentId; 
			}
			
			set
			{
				if (this.entityData.SaPunishmentId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.SaPunishmentId, this.entityData.SaPunishmentId);
				this.entityData.SaPunishmentId = value;
				this.EntityId.SaPunishmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.SaPunishmentId, this.entityData.SaPunishmentId);
				OnPropertyChanged("SaPunishmentId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_PUNISHMENT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_PUNISHMENT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaPunishmentId
		{
			get { return this.entityData.OriginalSaPunishmentId; }
			set { this.entityData.OriginalSaPunishmentId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDecisionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionSumm property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String DecisionSumm
		{
			get
			{
				return this.entityData.DecisionSumm; 
			}
			
			set
			{
				if (this.entityData.DecisionSumm == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.DecisionSumm, this.entityData.DecisionSumm);
				this.entityData.DecisionSumm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.DecisionSumm, this.entityData.DecisionSumm);
				OnPropertyChanged("DecisionSumm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaysNum property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDaysNumNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DaysNum
		{
			get
			{
				return this.entityData.DaysNum; 
			}
			
			set
			{
				if (this.entityData.DaysNum == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.DaysNum, this.entityData.DaysNum);
				this.entityData.DaysNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.DaysNum, this.entityData.DaysNum);
				OnPropertyChanged("DaysNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PunishDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PunishDate
		{
			get
			{
				return this.entityData.PunishDate; 
			}
			
			set
			{
				if (this.entityData.PunishDate == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.PunishDate, this.entityData.PunishDate);
				this.entityData.PunishDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.PunishDate, this.entityData.PunishDate);
				OnPropertyChanged("PunishDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CaseNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String CaseNum
		{
			get
			{
				return this.entityData.CaseNum; 
			}
			
			set
			{
				if (this.entityData.CaseNum == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.CaseNum, this.entityData.CaseNum);
				this.entityData.CaseNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.CaseNum, this.entityData.CaseNum);
				OnPropertyChanged("CaseNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EraseDecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String EraseDecisionNum
		{
			get
			{
				return this.entityData.EraseDecisionNum; 
			}
			
			set
			{
				if (this.entityData.EraseDecisionNum == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.EraseDecisionNum, this.entityData.EraseDecisionNum);
				this.entityData.EraseDecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.EraseDecisionNum, this.entityData.EraseDecisionNum);
				OnPropertyChanged("EraseDecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EraseDecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEraseDecisionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EraseDecisionDate
		{
			get
			{
				return this.entityData.EraseDecisionDate; 
			}
			
			set
			{
				if (this.entityData.EraseDecisionDate == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.EraseDecisionDate, this.entityData.EraseDecisionDate);
				this.entityData.EraseDecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.EraseDecisionDate, this.entityData.EraseDecisionDate);
				OnPropertyChanged("EraseDecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EraseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEraseDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EraseDate
		{
			get
			{
				return this.entityData.EraseDate; 
			}
			
			set
			{
				if (this.entityData.EraseDate == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.EraseDate, this.entityData.EraseDate);
				this.entityData.EraseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.EraseDate, this.entityData.EraseDate);
				OnPropertyChanged("EraseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodePunishRsnId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodePunishRsnId
		{
			get
			{
				return this.entityData.SaCodePunishRsnId; 
			}
			
			set
			{
				if (this.entityData.SaCodePunishRsnId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.SaCodePunishRsnId, this.entityData.SaCodePunishRsnId);
				this.entityData.SaCodePunishRsnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.SaCodePunishRsnId, this.entityData.SaCodePunishRsnId);
				OnPropertyChanged("SaCodePunishRsnId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaPunishBylawAuthId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaPunishBylawAuthId
		{
			get
			{
				return this.entityData.SaPunishBylawAuthId; 
			}
			
			set
			{
				if (this.entityData.SaPunishBylawAuthId == value)
					return;
					
				OnColumnChanging(SaPunishmentColumn.SaPunishBylawAuthId, this.entityData.SaPunishBylawAuthId);
				this.entityData.SaPunishBylawAuthId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPunishmentColumn.SaPunishBylawAuthId, this.entityData.SaPunishBylawAuthId);
				OnPropertyChanged("SaPunishBylawAuthId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodePunishRsn"/>.
		/// </summary>
		/// <value>The source SaCodePunishRsn for SaCodePunishRsnId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodePunishRsn SaCodePunishRsnIdSource
      	{
            get { return entityData.SaCodePunishRsnIdSource; }
            set { entityData.SaCodePunishRsnIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaPunishBylawAuth"/>.
		/// </summary>
		/// <value>The source SaPunishBylawAuth for SaPunishBylawAuthId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaPunishBylawAuth SaPunishBylawAuthIdSource
      	{
            get { return entityData.SaPunishBylawAuthIdSource; }
            set { entityData.SaPunishBylawAuthIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionSumm", "Decision Summ", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CaseNum", "Case Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EraseDecisionNum", "Erase Decision Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_PUNISHMENT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_PUNISHMENT_ID", "DECISION_NUM", "DECISION_DATE", "DECISION_SUMM", "DAYS_NUM", "PUNISH_DATE", "CASE_NUM", "ERASE_DECISION_NUM", "ERASE_DECISION_DATE", "ERASE_DATE", "COMMENTS", "SA_STF_MEMBER_ID", "SA_CODE_PUNISH_RSN_ID", "GS_APPROVAL_H_ID", "AS_FACULTY_INFO_ID", "SA_PUNISH_BYLAW_AUTH_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaPunishmentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaPunishment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaPunishment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaPunishment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaPunishment Entity 
		///</summary>
		protected virtual SaPunishment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaPunishment copy = new SaPunishment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaPunishmentId = this.SaPunishmentId;
					copy.OriginalSaPunishmentId = this.OriginalSaPunishmentId;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.DecisionSumm = this.DecisionSumm;
				copy.DaysNum = this.DaysNum;
				copy.PunishDate = this.PunishDate;
				copy.CaseNum = this.CaseNum;
				copy.EraseDecisionNum = this.EraseDecisionNum;
				copy.EraseDecisionDate = this.EraseDecisionDate;
				copy.EraseDate = this.EraseDate;
				copy.Comments = this.Comments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodePunishRsnId = this.SaCodePunishRsnId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.SaPunishBylawAuthId = this.SaPunishBylawAuthId;
			
			if (this.SaCodePunishRsnIdSource != null && existingCopies.Contains(this.SaCodePunishRsnIdSource))
				copy.SaCodePunishRsnIdSource = existingCopies[this.SaCodePunishRsnIdSource] as SaCodePunishRsn;
			else
				copy.SaCodePunishRsnIdSource = MakeCopyOf(this.SaCodePunishRsnIdSource, existingCopies) as SaCodePunishRsn;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaPunishBylawAuthIdSource != null && existingCopies.Contains(this.SaPunishBylawAuthIdSource))
				copy.SaPunishBylawAuthIdSource = existingCopies[this.SaPunishBylawAuthIdSource] as SaPunishBylawAuth;
			else
				copy.SaPunishBylawAuthIdSource = MakeCopyOf(this.SaPunishBylawAuthIdSource, existingCopies) as SaPunishBylawAuth;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaPunishment Entity 
		///</summary>
		public virtual SaPunishment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaPunishment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaPunishment DeepCopy()
		{
			return EntityHelper.Clone<SaPunishment>(this as SaPunishment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaPunishmentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaPunishmentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaPunishmentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaPunishmentColumn column)
		{
			switch(column)
			{
					case SaPunishmentColumn.SaPunishmentId:
					return entityData.SaPunishmentId != _originalData.SaPunishmentId;
					case SaPunishmentColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaPunishmentColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaPunishmentColumn.DecisionSumm:
					return entityData.DecisionSumm != _originalData.DecisionSumm;
					case SaPunishmentColumn.DaysNum:
					return entityData.DaysNum != _originalData.DaysNum;
					case SaPunishmentColumn.PunishDate:
					return entityData.PunishDate != _originalData.PunishDate;
					case SaPunishmentColumn.CaseNum:
					return entityData.CaseNum != _originalData.CaseNum;
					case SaPunishmentColumn.EraseDecisionNum:
					return entityData.EraseDecisionNum != _originalData.EraseDecisionNum;
					case SaPunishmentColumn.EraseDecisionDate:
					return entityData.EraseDecisionDate != _originalData.EraseDecisionDate;
					case SaPunishmentColumn.EraseDate:
					return entityData.EraseDate != _originalData.EraseDate;
					case SaPunishmentColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaPunishmentColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaPunishmentColumn.SaCodePunishRsnId:
					return entityData.SaCodePunishRsnId != _originalData.SaCodePunishRsnId;
					case SaPunishmentColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case SaPunishmentColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaPunishmentColumn.SaPunishBylawAuthId:
					return entityData.SaPunishBylawAuthId != _originalData.SaPunishBylawAuthId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaPunishmentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaPunishmentId != _originalData.SaPunishmentId;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.DecisionSumm != _originalData.DecisionSumm;
			result = result || entityData.DaysNum != _originalData.DaysNum;
			result = result || entityData.PunishDate != _originalData.PunishDate;
			result = result || entityData.CaseNum != _originalData.CaseNum;
			result = result || entityData.EraseDecisionNum != _originalData.EraseDecisionNum;
			result = result || entityData.EraseDecisionDate != _originalData.EraseDecisionDate;
			result = result || entityData.EraseDate != _originalData.EraseDate;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodePunishRsnId != _originalData.SaCodePunishRsnId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.SaPunishBylawAuthId != _originalData.SaPunishBylawAuthId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaPunishment Entity with the original data.
		///</summary>
		public SaPunishment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaPunishment(
				_originalData.SaPunishmentId,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.DecisionSumm,
				_originalData.DaysNum,
				_originalData.PunishDate,
				_originalData.CaseNum,
				_originalData.EraseDecisionNum,
				_originalData.EraseDecisionDate,
				_originalData.EraseDate,
				_originalData.Comments,
				_originalData.SaStfMemberId,
				_originalData.SaCodePunishRsnId,
				_originalData.GsApprovalHId,
				_originalData.AsFacultyInfoId,
				_originalData.SaPunishBylawAuthId
				);
				
			return (SaPunishment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaPunishmentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaPunishmentBase)
				return ValueEquals(this, (SaPunishmentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaPunishmentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaPunishmentId.GetHashCode() ^ 
					((this.DecisionNum == null) ? string.Empty : this.DecisionNum.ToString()).GetHashCode() ^ 
					((this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString()).GetHashCode() ^ 
					((this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString()).GetHashCode() ^ 
					((this.DaysNum == null) ? string.Empty : this.DaysNum.ToString()).GetHashCode() ^ 
					this.PunishDate.GetHashCode() ^ 
					((this.CaseNum == null) ? string.Empty : this.CaseNum.ToString()).GetHashCode() ^ 
					((this.EraseDecisionNum == null) ? string.Empty : this.EraseDecisionNum.ToString()).GetHashCode() ^ 
					((this.EraseDecisionDate == null) ? string.Empty : this.EraseDecisionDate.ToString()).GetHashCode() ^ 
					((this.EraseDate == null) ? string.Empty : this.EraseDate.ToString()).GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodePunishRsnId.GetHashCode() ^ 
					this.GsApprovalHId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					this.SaPunishBylawAuthId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaPunishmentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaPunishmentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaPunishmentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaPunishmentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaPunishmentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaPunishmentBase Object1, SaPunishmentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaPunishmentId != Object2.SaPunishmentId)
				equal = false;
			if ( Object1.DecisionNum != null && Object2.DecisionNum != null )
			{
				if (Object1.DecisionNum != Object2.DecisionNum)
					equal = false;
			}
			else if (Object1.DecisionNum == null ^ Object2.DecisionNum == null )
			{
				equal = false;
			}
			if ( Object1.DecisionDate != null && Object2.DecisionDate != null )
			{
				if (Object1.DecisionDate != Object2.DecisionDate)
					equal = false;
			}
			else if (Object1.DecisionDate == null ^ Object2.DecisionDate == null )
			{
				equal = false;
			}
			if ( Object1.DecisionSumm != null && Object2.DecisionSumm != null )
			{
				if (Object1.DecisionSumm != Object2.DecisionSumm)
					equal = false;
			}
			else if (Object1.DecisionSumm == null ^ Object2.DecisionSumm == null )
			{
				equal = false;
			}
			if ( Object1.DaysNum != null && Object2.DaysNum != null )
			{
				if (Object1.DaysNum != Object2.DaysNum)
					equal = false;
			}
			else if (Object1.DaysNum == null ^ Object2.DaysNum == null )
			{
				equal = false;
			}
			if (Object1.PunishDate != Object2.PunishDate)
				equal = false;
			if ( Object1.CaseNum != null && Object2.CaseNum != null )
			{
				if (Object1.CaseNum != Object2.CaseNum)
					equal = false;
			}
			else if (Object1.CaseNum == null ^ Object2.CaseNum == null )
			{
				equal = false;
			}
			if ( Object1.EraseDecisionNum != null && Object2.EraseDecisionNum != null )
			{
				if (Object1.EraseDecisionNum != Object2.EraseDecisionNum)
					equal = false;
			}
			else if (Object1.EraseDecisionNum == null ^ Object2.EraseDecisionNum == null )
			{
				equal = false;
			}
			if ( Object1.EraseDecisionDate != null && Object2.EraseDecisionDate != null )
			{
				if (Object1.EraseDecisionDate != Object2.EraseDecisionDate)
					equal = false;
			}
			else if (Object1.EraseDecisionDate == null ^ Object2.EraseDecisionDate == null )
			{
				equal = false;
			}
			if ( Object1.EraseDate != null && Object2.EraseDate != null )
			{
				if (Object1.EraseDate != Object2.EraseDate)
					equal = false;
			}
			else if (Object1.EraseDate == null ^ Object2.EraseDate == null )
			{
				equal = false;
			}
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodePunishRsnId != Object2.SaCodePunishRsnId)
				equal = false;
			if (Object1.GsApprovalHId != Object2.GsApprovalHId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if (Object1.SaPunishBylawAuthId != Object2.SaPunishBylawAuthId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaPunishmentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaPunishmentComparer GetComparer()
        {
            return new SaPunishmentComparer();
        }
        */

        // Comparer delegates back to SaPunishment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaPunishment rhs, SaPunishmentColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaPunishmentColumn.SaPunishmentId:
            		return this.SaPunishmentId.CompareTo(rhs.SaPunishmentId);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.DecisionDate:
            		return this.DecisionDate.Value.CompareTo(rhs.DecisionDate.Value);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.DecisionSumm:
            		return this.DecisionSumm.CompareTo(rhs.DecisionSumm);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.DaysNum:
            		return this.DaysNum.Value.CompareTo(rhs.DaysNum.Value);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.PunishDate:
            		return this.PunishDate.CompareTo(rhs.PunishDate);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.CaseNum:
            		return this.CaseNum.CompareTo(rhs.CaseNum);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.EraseDecisionNum:
            		return this.EraseDecisionNum.CompareTo(rhs.EraseDecisionNum);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.EraseDecisionDate:
            		return this.EraseDecisionDate.Value.CompareTo(rhs.EraseDecisionDate.Value);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.EraseDate:
            		return this.EraseDate.Value.CompareTo(rhs.EraseDate.Value);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.SaCodePunishRsnId:
            		return this.SaCodePunishRsnId.CompareTo(rhs.SaCodePunishRsnId);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.GsApprovalHId:
            		return this.GsApprovalHId.CompareTo(rhs.GsApprovalHId);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaPunishmentColumn.SaPunishBylawAuthId:
            		return this.SaPunishBylawAuthId.CompareTo(rhs.SaPunishBylawAuthId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaPunishmentKey> Members
		
		// member variable for the EntityId property
		private SaPunishmentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaPunishmentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaPunishmentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaPunishment")
					.Append("|").Append( this.SaPunishmentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- SaPunishmentId: {0}{16}- DecisionNum: {1}{16}- DecisionDate: {2}{16}- DecisionSumm: {3}{16}- DaysNum: {4}{16}- PunishDate: {5}{16}- CaseNum: {6}{16}- EraseDecisionNum: {7}{16}- EraseDecisionDate: {8}{16}- EraseDate: {9}{16}- Comments: {10}{16}- SaStfMemberId: {11}{16}- SaCodePunishRsnId: {12}{16}- GsApprovalHId: {13}{16}- AsFacultyInfoId: {14}{16}- SaPunishBylawAuthId: {15}{16}{18}", 
				this.SaPunishmentId,
				(this.DecisionNum == null) ? string.Empty : this.DecisionNum.ToString(),
				(this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString(),
				(this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString(),
				(this.DaysNum == null) ? string.Empty : this.DaysNum.ToString(),
				this.PunishDate,
				(this.CaseNum == null) ? string.Empty : this.CaseNum.ToString(),
				(this.EraseDecisionNum == null) ? string.Empty : this.EraseDecisionNum.ToString(),
				(this.EraseDecisionDate == null) ? string.Empty : this.EraseDecisionDate.ToString(),
				(this.EraseDate == null) ? string.Empty : this.EraseDate.ToString(),
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.SaStfMemberId,
				this.SaCodePunishRsnId,
				this.GsApprovalHId,
				this.AsFacultyInfoId,
				this.SaPunishBylawAuthId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_PUNISHMENT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaPunishmentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_PUNISHMENT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_PUNISHMENT"</remarks>
		public System.Decimal SaPunishmentId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaPunishmentId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = null;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime?		  DecisionDate = null;
		
		/// <summary>
		/// DECISION_SUMM : 
		/// </summary>
		public System.String		  DecisionSumm = null;
		
		/// <summary>
		/// DAYS_NUM : 
		/// </summary>
		public System.Decimal?		  DaysNum = null;
		
		/// <summary>
		/// PUNISH_DATE : 
		/// </summary>
		public System.DateTime		  PunishDate = DateTime.MinValue;
		
		/// <summary>
		/// CASE_NUM : 
		/// </summary>
		public System.String		  CaseNum = null;
		
		/// <summary>
		/// ERASE_DECISION_NUM : 
		/// </summary>
		public System.String		  EraseDecisionNum = null;
		
		/// <summary>
		/// ERASE_DECISION_DATE : 
		/// </summary>
		public System.DateTime?		  EraseDecisionDate = null;
		
		/// <summary>
		/// ERASE_DATE : 
		/// </summary>
		public System.DateTime?		  EraseDate = null;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_PUNISH_RSN_ID : 
		/// </summary>
		public System.Decimal		  SaCodePunishRsnId = 0.0m;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal		  GsApprovalHId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// SA_PUNISH_BYLAW_AUTH_ID : 
		/// </summary>
		public System.Decimal		  SaPunishBylawAuthId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodePunishRsn _saCodePunishRsnIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodePunishRsn"/>.
		/// </summary>
		/// <value>The source SaCodePunishRsn for SaCodePunishRsnId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodePunishRsn SaCodePunishRsnIdSource
      	{
            get { return this._saCodePunishRsnIdSource; }
            set { this._saCodePunishRsnIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private SaPunishBylawAuth _saPunishBylawAuthIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaPunishBylawAuth"/>.
		/// </summary>
		/// <value>The source SaPunishBylawAuth for SaPunishBylawAuthId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaPunishBylawAuth SaPunishBylawAuthIdSource
      	{
            get { return this._saPunishBylawAuthIdSource; }
            set { this._saPunishBylawAuthIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaPunishmentEntityData _tmp = new SaPunishmentEntityData();
						
			_tmp.SaPunishmentId = this.SaPunishmentId;
			_tmp.OriginalSaPunishmentId = this.OriginalSaPunishmentId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.DaysNum = this.DaysNum;
			_tmp.PunishDate = this.PunishDate;
			_tmp.CaseNum = this.CaseNum;
			_tmp.EraseDecisionNum = this.EraseDecisionNum;
			_tmp.EraseDecisionDate = this.EraseDecisionDate;
			_tmp.EraseDate = this.EraseDate;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodePunishRsnId = this.SaCodePunishRsnId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.SaPunishBylawAuthId = this.SaPunishBylawAuthId;
			
			#region Source Parent Composite Entities
			if (this.SaCodePunishRsnIdSource != null)
				_tmp.SaCodePunishRsnIdSource = MakeCopyOf(this.SaCodePunishRsnIdSource) as SaCodePunishRsn;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.SaPunishBylawAuthIdSource != null)
				_tmp.SaPunishBylawAuthIdSource = MakeCopyOf(this.SaPunishBylawAuthIdSource) as SaPunishBylawAuth;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaPunishmentEntityData _tmp = new SaPunishmentEntityData();
						
			_tmp.SaPunishmentId = this.SaPunishmentId;
			_tmp.OriginalSaPunishmentId = this.OriginalSaPunishmentId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.DaysNum = this.DaysNum;
			_tmp.PunishDate = this.PunishDate;
			_tmp.CaseNum = this.CaseNum;
			_tmp.EraseDecisionNum = this.EraseDecisionNum;
			_tmp.EraseDecisionDate = this.EraseDecisionDate;
			_tmp.EraseDate = this.EraseDate;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodePunishRsnId = this.SaCodePunishRsnId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.SaPunishBylawAuthId = this.SaPunishBylawAuthId;
			
			#region Source Parent Composite Entities
			if (this.SaCodePunishRsnIdSource != null && existingCopies.Contains(this.SaCodePunishRsnIdSource))
				_tmp.SaCodePunishRsnIdSource = existingCopies[this.SaCodePunishRsnIdSource] as SaCodePunishRsn;
			else
				_tmp.SaCodePunishRsnIdSource = MakeCopyOf(this.SaCodePunishRsnIdSource, existingCopies) as SaCodePunishRsn;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaPunishBylawAuthIdSource != null && existingCopies.Contains(this.SaPunishBylawAuthIdSource))
				_tmp.SaPunishBylawAuthIdSource = existingCopies[this.SaPunishBylawAuthIdSource] as SaPunishBylawAuth;
			else
				_tmp.SaPunishBylawAuthIdSource = MakeCopyOf(this.SaPunishBylawAuthIdSource, existingCopies) as SaPunishBylawAuth;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPunishmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaPunishmentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPunishmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaPunishmentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPunishmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaPunishmentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaPunishmentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaPunishmentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPunishmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaPunishmentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaPunishmentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaPunishmentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaPunishmentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaPunishment"/> object.
	/// </remarks>
	public class SaPunishmentEventArgs : System.EventArgs
	{
		private SaPunishmentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaPunishmentEventArgs class.
		///</summary>
		public SaPunishmentEventArgs(SaPunishmentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaPunishmentEventArgs class.
		///</summary>
		public SaPunishmentEventArgs(SaPunishmentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaPunishmentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaPunishmentColumn" />
		public SaPunishmentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaPunishment related events.
	///</summary>
	public delegate void SaPunishmentEventHandler(object sender, SaPunishmentEventArgs e);
	
	#region SaPunishmentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaPunishmentComparer : System.Collections.Generic.IComparer<SaPunishment>
	{
		SaPunishmentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaPunishmentComparer"/> class.
        /// </summary>
		public SaPunishmentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaPunishmentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaPunishmentComparer(SaPunishmentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaPunishment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaPunishment"/> to compare.</param>
        /// <param name="b">The second <c>SaPunishment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaPunishment a, SaPunishment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaPunishment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaPunishment a, SaPunishment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaPunishmentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaPunishmentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaPunishment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaPunishmentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaPunishmentKey class.
		/// </summary>
		public SaPunishmentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaPunishmentKey class.
		/// </summary>
		public SaPunishmentKey(SaPunishmentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaPunishmentId = entity.SaPunishmentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaPunishmentKey class.
		/// </summary>
		public SaPunishmentKey(System.Decimal _saPunishmentId)
		{
			#region Init Properties

			this.SaPunishmentId = _saPunishmentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaPunishmentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaPunishmentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaPunishmentId property
		private System.Decimal _saPunishmentId;
		
		/// <summary>
		/// Gets or sets the SaPunishmentId property.
		/// </summary>
		public System.Decimal SaPunishmentId
		{
			get { return _saPunishmentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaPunishmentId = value;
				
				_saPunishmentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaPunishmentId = ( values["SaPunishmentId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaPunishmentId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaPunishmentId", SaPunishmentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaPunishmentId: {0}{1}",
								SaPunishmentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaPunishmentColumn Enum
	
	/// <summary>
	/// Enumerate the SaPunishment columns.
	/// </summary>
	[Serializable]
	public enum SaPunishmentColumn : int
	{
		/// <summary>
		/// SaPunishmentId : 
		/// </summary>
		[EnumTextValue("SA_PUNISHMENT_ID")]
		[ColumnEnum("SA_PUNISHMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaPunishmentId = 1,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		DecisionNum = 2,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DecisionDate = 3,
		/// <summary>
		/// DecisionSumm : 
		/// </summary>
		[EnumTextValue("DECISION_SUMM")]
		[ColumnEnum("DECISION_SUMM", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		DecisionSumm = 4,
		/// <summary>
		/// DaysNum : 
		/// </summary>
		[EnumTextValue("DAYS_NUM")]
		[ColumnEnum("DAYS_NUM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DaysNum = 5,
		/// <summary>
		/// PunishDate : 
		/// </summary>
		[EnumTextValue("PUNISH_DATE")]
		[ColumnEnum("PUNISH_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PunishDate = 6,
		/// <summary>
		/// CaseNum : 
		/// </summary>
		[EnumTextValue("CASE_NUM")]
		[ColumnEnum("CASE_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		CaseNum = 7,
		/// <summary>
		/// EraseDecisionNum : 
		/// </summary>
		[EnumTextValue("ERASE_DECISION_NUM")]
		[ColumnEnum("ERASE_DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		EraseDecisionNum = 8,
		/// <summary>
		/// EraseDecisionDate : 
		/// </summary>
		[EnumTextValue("ERASE_DECISION_DATE")]
		[ColumnEnum("ERASE_DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EraseDecisionDate = 9,
		/// <summary>
		/// EraseDate : 
		/// </summary>
		[EnumTextValue("ERASE_DATE")]
		[ColumnEnum("ERASE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EraseDate = 10,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Comments = 11,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 12,
		/// <summary>
		/// SaCodePunishRsnId : 
		/// </summary>
		[EnumTextValue("SA_CODE_PUNISH_RSN_ID")]
		[ColumnEnum("SA_CODE_PUNISH_RSN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodePunishRsnId = 13,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsApprovalHId = 14,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 15,
		/// <summary>
		/// SaPunishBylawAuthId : 
		/// </summary>
		[EnumTextValue("SA_PUNISH_BYLAW_AUTH_ID")]
		[ColumnEnum("SA_PUNISH_BYLAW_AUTH_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaPunishBylawAuthId = 16
	}//End enum

	#endregion SaPunishmentColumn Enum

} // end namespace
