
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaStfSummeryTrans.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_STF_SUMMERY_TRANS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaStfSummeryTransBase : EntityBase, ISaStfSummeryTrans, IEntityId<SaStfSummeryTransKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaStfSummeryTransEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaStfSummeryTransEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaStfSummeryTransEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaStfSummeryTrans> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaStfSummeryTransEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaStfSummeryTransEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaStfSummeryTransBase"/> instance.
		///</summary>
		public SaStfSummeryTransBase()
		{
			this.entityData = new SaStfSummeryTransEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaStfSummeryTransBase"/> instance.
		///</summary>
		///<param name="_saStfSummeryTransId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeSummeryId"></param>
		///<param name="_saCodeJobStatusId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_extendedToDate"></param>
		///<param name="_actEndDate"></param>
		///<param name="_transactionId"></param>
		public SaStfSummeryTransBase(System.Decimal _saStfSummeryTransId, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeSummeryId, System.Decimal _saCodeJobStatusId, System.DateTime _fromDate, 
			System.DateTime? _toDate, System.DateTime? _extendedToDate, System.DateTime? _actEndDate, 
			System.Decimal _transactionId)
		{
			this.entityData = new SaStfSummeryTransEntityData();
			this.backupData = null;

			this.SaStfSummeryTransId = _saStfSummeryTransId;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeSummeryId = _saCodeSummeryId;
			this.SaCodeJobStatusId = _saCodeJobStatusId;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.ExtendedToDate = _extendedToDate;
			this.ActEndDate = _actEndDate;
			this.TransactionId = _transactionId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaStfSummeryTrans"/> instance.
		///</summary>
		///<param name="_saStfSummeryTransId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeSummeryId"></param>
		///<param name="_saCodeJobStatusId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_extendedToDate"></param>
		///<param name="_actEndDate"></param>
		///<param name="_transactionId"></param>
		public static SaStfSummeryTrans CreateSaStfSummeryTrans(System.Decimal _saStfSummeryTransId, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeSummeryId, System.Decimal _saCodeJobStatusId, System.DateTime _fromDate, 
			System.DateTime? _toDate, System.DateTime? _extendedToDate, System.DateTime? _actEndDate, 
			System.Decimal _transactionId)
		{
			SaStfSummeryTrans newSaStfSummeryTrans = new SaStfSummeryTrans();
			newSaStfSummeryTrans.SaStfSummeryTransId = _saStfSummeryTransId;
			newSaStfSummeryTrans.SaStfMemberId = _saStfMemberId;
			newSaStfSummeryTrans.SaCodeSummeryId = _saCodeSummeryId;
			newSaStfSummeryTrans.SaCodeJobStatusId = _saCodeJobStatusId;
			newSaStfSummeryTrans.FromDate = _fromDate;
			newSaStfSummeryTrans.ToDate = _toDate;
			newSaStfSummeryTrans.ExtendedToDate = _extendedToDate;
			newSaStfSummeryTrans.ActEndDate = _actEndDate;
			newSaStfSummeryTrans.TransactionId = _transactionId;
			return newSaStfSummeryTrans;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaStfSummeryTransId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaStfSummeryTransId
		{
			get
			{
				return this.entityData.SaStfSummeryTransId; 
			}
			
			set
			{
				if (this.entityData.SaStfSummeryTransId == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.SaStfSummeryTransId, this.entityData.SaStfSummeryTransId);
				this.entityData.SaStfSummeryTransId = value;
				this.EntityId.SaStfSummeryTransId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.SaStfSummeryTransId, this.entityData.SaStfSummeryTransId);
				OnPropertyChanged("SaStfSummeryTransId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_STF_SUMMERY_TRANS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_STF_SUMMERY_TRANS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaStfSummeryTransId
		{
			get { return this.entityData.OriginalSaStfSummeryTransId; }
			set { this.entityData.OriginalSaStfSummeryTransId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeSummeryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeSummeryId
		{
			get
			{
				return this.entityData.SaCodeSummeryId; 
			}
			
			set
			{
				if (this.entityData.SaCodeSummeryId == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.SaCodeSummeryId, this.entityData.SaCodeSummeryId);
				this.entityData.SaCodeSummeryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.SaCodeSummeryId, this.entityData.SaCodeSummeryId);
				OnPropertyChanged("SaCodeSummeryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeJobStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeJobStatusId
		{
			get
			{
				return this.entityData.SaCodeJobStatusId; 
			}
			
			set
			{
				if (this.entityData.SaCodeJobStatusId == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.SaCodeJobStatusId, this.entityData.SaCodeJobStatusId);
				this.entityData.SaCodeJobStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.SaCodeJobStatusId, this.entityData.SaCodeJobStatusId);
				OnPropertyChanged("SaCodeJobStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExtendedToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExtendedToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExtendedToDate
		{
			get
			{
				return this.entityData.ExtendedToDate; 
			}
			
			set
			{
				if (this.entityData.ExtendedToDate == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.ExtendedToDate, this.entityData.ExtendedToDate);
				this.entityData.ExtendedToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.ExtendedToDate, this.entityData.ExtendedToDate);
				OnPropertyChanged("ExtendedToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActEndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsActEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ActEndDate
		{
			get
			{
				return this.entityData.ActEndDate; 
			}
			
			set
			{
				if (this.entityData.ActEndDate == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.ActEndDate, this.entityData.ActEndDate);
				this.entityData.ActEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.ActEndDate, this.entityData.ActEndDate);
				OnPropertyChanged("ActEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TransactionId
		{
			get
			{
				return this.entityData.TransactionId; 
			}
			
			set
			{
				if (this.entityData.TransactionId == value)
					return;
					
				OnColumnChanging(SaStfSummeryTransColumn.TransactionId, this.entityData.TransactionId);
				this.entityData.TransactionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaStfSummeryTransColumn.TransactionId, this.entityData.TransactionId);
				OnPropertyChanged("TransactionId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeSummery"/>.
		/// </summary>
		/// <value>The source SaCodeSummery for SaCodeSummeryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeSummery SaCodeSummeryIdSource
      	{
            get { return entityData.SaCodeSummeryIdSource; }
            set { entityData.SaCodeSummeryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeJobStatus"/>.
		/// </summary>
		/// <value>The source SaCodeJobStatus for SaCodeJobStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeJobStatus SaCodeJobStatusIdSource
      	{
            get { return entityData.SaCodeJobStatusIdSource; }
            set { entityData.SaCodeJobStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_STF_SUMMERY_TRANS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_STF_SUMMERY_TRANS_ID", "SA_STF_MEMBER_ID", "SA_CODE_SUMMERY_ID", "SA_CODE_JOB_STATUS_ID", "FROM_DATE", "TO_DATE", "EXTENDED_TO_DATE", "ACT_END_DATE", "TRANSACTION_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaStfSummeryTransEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaStfSummeryTrans) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaStfSummeryTrans>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaStfSummeryTrans);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaStfSummeryTrans Entity 
		///</summary>
		protected virtual SaStfSummeryTrans Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaStfSummeryTrans copy = new SaStfSummeryTrans();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaStfSummeryTransId = this.SaStfSummeryTransId;
					copy.OriginalSaStfSummeryTransId = this.OriginalSaStfSummeryTransId;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeSummeryId = this.SaCodeSummeryId;
				copy.SaCodeJobStatusId = this.SaCodeJobStatusId;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.ExtendedToDate = this.ExtendedToDate;
				copy.ActEndDate = this.ActEndDate;
				copy.TransactionId = this.TransactionId;
			
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SaCodeSummeryIdSource != null && existingCopies.Contains(this.SaCodeSummeryIdSource))
				copy.SaCodeSummeryIdSource = existingCopies[this.SaCodeSummeryIdSource] as SaCodeSummery;
			else
				copy.SaCodeSummeryIdSource = MakeCopyOf(this.SaCodeSummeryIdSource, existingCopies) as SaCodeSummery;
			if (this.SaCodeJobStatusIdSource != null && existingCopies.Contains(this.SaCodeJobStatusIdSource))
				copy.SaCodeJobStatusIdSource = existingCopies[this.SaCodeJobStatusIdSource] as SaCodeJobStatus;
			else
				copy.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource, existingCopies) as SaCodeJobStatus;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaStfSummeryTrans Entity 
		///</summary>
		public virtual SaStfSummeryTrans Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaStfSummeryTrans Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaStfSummeryTrans DeepCopy()
		{
			return EntityHelper.Clone<SaStfSummeryTrans>(this as SaStfSummeryTrans);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaStfSummeryTransEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaStfSummeryTransEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaStfSummeryTransEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaStfSummeryTransColumn column)
		{
			switch(column)
			{
					case SaStfSummeryTransColumn.SaStfSummeryTransId:
					return entityData.SaStfSummeryTransId != _originalData.SaStfSummeryTransId;
					case SaStfSummeryTransColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaStfSummeryTransColumn.SaCodeSummeryId:
					return entityData.SaCodeSummeryId != _originalData.SaCodeSummeryId;
					case SaStfSummeryTransColumn.SaCodeJobStatusId:
					return entityData.SaCodeJobStatusId != _originalData.SaCodeJobStatusId;
					case SaStfSummeryTransColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case SaStfSummeryTransColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case SaStfSummeryTransColumn.ExtendedToDate:
					return entityData.ExtendedToDate != _originalData.ExtendedToDate;
					case SaStfSummeryTransColumn.ActEndDate:
					return entityData.ActEndDate != _originalData.ActEndDate;
					case SaStfSummeryTransColumn.TransactionId:
					return entityData.TransactionId != _originalData.TransactionId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaStfSummeryTransColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaStfSummeryTransId != _originalData.SaStfSummeryTransId;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeSummeryId != _originalData.SaCodeSummeryId;
			result = result || entityData.SaCodeJobStatusId != _originalData.SaCodeJobStatusId;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.ExtendedToDate != _originalData.ExtendedToDate;
			result = result || entityData.ActEndDate != _originalData.ActEndDate;
			result = result || entityData.TransactionId != _originalData.TransactionId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaStfSummeryTrans Entity with the original data.
		///</summary>
		public SaStfSummeryTrans GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaStfSummeryTrans(
				_originalData.SaStfSummeryTransId,
				_originalData.SaStfMemberId,
				_originalData.SaCodeSummeryId,
				_originalData.SaCodeJobStatusId,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.ExtendedToDate,
				_originalData.ActEndDate,
				_originalData.TransactionId
				);
				
			return (SaStfSummeryTrans)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaStfSummeryTransBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaStfSummeryTransBase)
				return ValueEquals(this, (SaStfSummeryTransBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaStfSummeryTransBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaStfSummeryTransId.GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodeSummeryId.GetHashCode() ^ 
					this.SaCodeJobStatusId.GetHashCode() ^ 
					this.FromDate.GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					((this.ExtendedToDate == null) ? string.Empty : this.ExtendedToDate.ToString()).GetHashCode() ^ 
					((this.ActEndDate == null) ? string.Empty : this.ActEndDate.ToString()).GetHashCode() ^ 
					this.TransactionId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaStfSummeryTransBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaStfSummeryTransBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaStfSummeryTransBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaStfSummeryTransBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaStfSummeryTransBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaStfSummeryTransBase Object1, SaStfSummeryTransBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaStfSummeryTransId != Object2.SaStfSummeryTransId)
				equal = false;
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodeSummeryId != Object2.SaCodeSummeryId)
				equal = false;
			if (Object1.SaCodeJobStatusId != Object2.SaCodeJobStatusId)
				equal = false;
			if (Object1.FromDate != Object2.FromDate)
				equal = false;
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.ExtendedToDate != null && Object2.ExtendedToDate != null )
			{
				if (Object1.ExtendedToDate != Object2.ExtendedToDate)
					equal = false;
			}
			else if (Object1.ExtendedToDate == null ^ Object2.ExtendedToDate == null )
			{
				equal = false;
			}
			if ( Object1.ActEndDate != null && Object2.ActEndDate != null )
			{
				if (Object1.ActEndDate != Object2.ActEndDate)
					equal = false;
			}
			else if (Object1.ActEndDate == null ^ Object2.ActEndDate == null )
			{
				equal = false;
			}
			if (Object1.TransactionId != Object2.TransactionId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaStfSummeryTransBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaStfSummeryTransComparer GetComparer()
        {
            return new SaStfSummeryTransComparer();
        }
        */

        // Comparer delegates back to SaStfSummeryTrans
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaStfSummeryTrans rhs, SaStfSummeryTransColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaStfSummeryTransColumn.SaStfSummeryTransId:
            		return this.SaStfSummeryTransId.CompareTo(rhs.SaStfSummeryTransId);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.SaCodeSummeryId:
            		return this.SaCodeSummeryId.CompareTo(rhs.SaCodeSummeryId);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.SaCodeJobStatusId:
            		return this.SaCodeJobStatusId.CompareTo(rhs.SaCodeJobStatusId);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.FromDate:
            		return this.FromDate.CompareTo(rhs.FromDate);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.ExtendedToDate:
            		return this.ExtendedToDate.Value.CompareTo(rhs.ExtendedToDate.Value);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.ActEndDate:
            		return this.ActEndDate.Value.CompareTo(rhs.ActEndDate.Value);
            		
            		                 
            	
            	
            	case SaStfSummeryTransColumn.TransactionId:
            		return this.TransactionId.CompareTo(rhs.TransactionId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaStfSummeryTransKey> Members
		
		// member variable for the EntityId property
		private SaStfSummeryTransKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaStfSummeryTransKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaStfSummeryTransKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaStfSummeryTrans")
					.Append("|").Append( this.SaStfSummeryTransId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- SaStfSummeryTransId: {0}{9}- SaStfMemberId: {1}{9}- SaCodeSummeryId: {2}{9}- SaCodeJobStatusId: {3}{9}- FromDate: {4}{9}- ToDate: {5}{9}- ExtendedToDate: {6}{9}- ActEndDate: {7}{9}- TransactionId: {8}{9}{11}", 
				this.SaStfSummeryTransId,
				this.SaStfMemberId,
				this.SaCodeSummeryId,
				this.SaCodeJobStatusId,
				this.FromDate,
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.ExtendedToDate == null) ? string.Empty : this.ExtendedToDate.ToString(),
				(this.ActEndDate == null) ? string.Empty : this.ActEndDate.ToString(),
				this.TransactionId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_STF_SUMMERY_TRANS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaStfSummeryTransEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_STF_SUMMERY_TRANS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_STF_SUMMERY_TRANS"</remarks>
		public System.Decimal SaStfSummeryTransId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaStfSummeryTransId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_SUMMERY_ID : 
		/// </summary>
		public System.Decimal		  SaCodeSummeryId = 0.0m;
		
		/// <summary>
		/// SA_CODE_JOB_STATUS_ID : 
		/// </summary>
		public System.Decimal		  SaCodeJobStatusId = 0.0m;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime		  FromDate = DateTime.MinValue;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// EXTENDED_TO_DATE : 
		/// </summary>
		public System.DateTime?		  ExtendedToDate = null;
		
		/// <summary>
		/// ACT_END_DATE : 
		/// </summary>
		public System.DateTime?		  ActEndDate = null;
		
		/// <summary>
		/// TRANSACTION_ID : 
		/// </summary>
		public System.Decimal		  TransactionId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private SaCodeSummery _saCodeSummeryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeSummery"/>.
		/// </summary>
		/// <value>The source SaCodeSummery for SaCodeSummeryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeSummery SaCodeSummeryIdSource
      	{
            get { return this._saCodeSummeryIdSource; }
            set { this._saCodeSummeryIdSource = value; }
      	}
		private SaCodeJobStatus _saCodeJobStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeJobStatus"/>.
		/// </summary>
		/// <value>The source SaCodeJobStatus for SaCodeJobStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeJobStatus SaCodeJobStatusIdSource
      	{
            get { return this._saCodeJobStatusIdSource; }
            set { this._saCodeJobStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaStfSummeryTransEntityData _tmp = new SaStfSummeryTransEntityData();
						
			_tmp.SaStfSummeryTransId = this.SaStfSummeryTransId;
			_tmp.OriginalSaStfSummeryTransId = this.OriginalSaStfSummeryTransId;
			
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeSummeryId = this.SaCodeSummeryId;
			_tmp.SaCodeJobStatusId = this.SaCodeJobStatusId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.ExtendedToDate = this.ExtendedToDate;
			_tmp.ActEndDate = this.ActEndDate;
			_tmp.TransactionId = this.TransactionId;
			
			#region Source Parent Composite Entities
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.SaCodeSummeryIdSource != null)
				_tmp.SaCodeSummeryIdSource = MakeCopyOf(this.SaCodeSummeryIdSource) as SaCodeSummery;
			if (this.SaCodeJobStatusIdSource != null)
				_tmp.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource) as SaCodeJobStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaStfSummeryTransEntityData _tmp = new SaStfSummeryTransEntityData();
						
			_tmp.SaStfSummeryTransId = this.SaStfSummeryTransId;
			_tmp.OriginalSaStfSummeryTransId = this.OriginalSaStfSummeryTransId;
			
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeSummeryId = this.SaCodeSummeryId;
			_tmp.SaCodeJobStatusId = this.SaCodeJobStatusId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.ExtendedToDate = this.ExtendedToDate;
			_tmp.ActEndDate = this.ActEndDate;
			_tmp.TransactionId = this.TransactionId;
			
			#region Source Parent Composite Entities
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SaCodeSummeryIdSource != null && existingCopies.Contains(this.SaCodeSummeryIdSource))
				_tmp.SaCodeSummeryIdSource = existingCopies[this.SaCodeSummeryIdSource] as SaCodeSummery;
			else
				_tmp.SaCodeSummeryIdSource = MakeCopyOf(this.SaCodeSummeryIdSource, existingCopies) as SaCodeSummery;
			if (this.SaCodeJobStatusIdSource != null && existingCopies.Contains(this.SaCodeJobStatusIdSource))
				_tmp.SaCodeJobStatusIdSource = existingCopies[this.SaCodeJobStatusIdSource] as SaCodeJobStatus;
			else
				_tmp.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource, existingCopies) as SaCodeJobStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaStfSummeryTransColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaStfSummeryTransColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaStfSummeryTransColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaStfSummeryTransColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaStfSummeryTransColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaStfSummeryTransColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaStfSummeryTransEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaStfSummeryTransEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaStfSummeryTransColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaStfSummeryTransColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaStfSummeryTransEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaStfSummeryTransEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaStfSummeryTransEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaStfSummeryTrans"/> object.
	/// </remarks>
	public class SaStfSummeryTransEventArgs : System.EventArgs
	{
		private SaStfSummeryTransColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaStfSummeryTransEventArgs class.
		///</summary>
		public SaStfSummeryTransEventArgs(SaStfSummeryTransColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaStfSummeryTransEventArgs class.
		///</summary>
		public SaStfSummeryTransEventArgs(SaStfSummeryTransColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaStfSummeryTransColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaStfSummeryTransColumn" />
		public SaStfSummeryTransColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaStfSummeryTrans related events.
	///</summary>
	public delegate void SaStfSummeryTransEventHandler(object sender, SaStfSummeryTransEventArgs e);
	
	#region SaStfSummeryTransComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaStfSummeryTransComparer : System.Collections.Generic.IComparer<SaStfSummeryTrans>
	{
		SaStfSummeryTransColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaStfSummeryTransComparer"/> class.
        /// </summary>
		public SaStfSummeryTransComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaStfSummeryTransComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaStfSummeryTransComparer(SaStfSummeryTransColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaStfSummeryTrans"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaStfSummeryTrans"/> to compare.</param>
        /// <param name="b">The second <c>SaStfSummeryTrans</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaStfSummeryTrans a, SaStfSummeryTrans b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaStfSummeryTrans entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaStfSummeryTrans a, SaStfSummeryTrans b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaStfSummeryTransColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaStfSummeryTransKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaStfSummeryTrans"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaStfSummeryTransKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransKey class.
		/// </summary>
		public SaStfSummeryTransKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransKey class.
		/// </summary>
		public SaStfSummeryTransKey(SaStfSummeryTransBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaStfSummeryTransId = entity.SaStfSummeryTransId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaStfSummeryTransKey class.
		/// </summary>
		public SaStfSummeryTransKey(System.Decimal _saStfSummeryTransId)
		{
			#region Init Properties

			this.SaStfSummeryTransId = _saStfSummeryTransId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaStfSummeryTransBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaStfSummeryTransBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaStfSummeryTransId property
		private System.Decimal _saStfSummeryTransId;
		
		/// <summary>
		/// Gets or sets the SaStfSummeryTransId property.
		/// </summary>
		public System.Decimal SaStfSummeryTransId
		{
			get { return _saStfSummeryTransId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaStfSummeryTransId = value;
				
				_saStfSummeryTransId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaStfSummeryTransId = ( values["SaStfSummeryTransId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaStfSummeryTransId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaStfSummeryTransId", SaStfSummeryTransId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaStfSummeryTransId: {0}{1}",
								SaStfSummeryTransId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaStfSummeryTransColumn Enum
	
	/// <summary>
	/// Enumerate the SaStfSummeryTrans columns.
	/// </summary>
	[Serializable]
	public enum SaStfSummeryTransColumn : int
	{
		/// <summary>
		/// SaStfSummeryTransId : 
		/// </summary>
		[EnumTextValue("SA_STF_SUMMERY_TRANS_ID")]
		[ColumnEnum("SA_STF_SUMMERY_TRANS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaStfSummeryTransId = 1,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 2,
		/// <summary>
		/// SaCodeSummeryId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SUMMERY_ID")]
		[ColumnEnum("SA_CODE_SUMMERY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeSummeryId = 3,
		/// <summary>
		/// SaCodeJobStatusId : 
		/// </summary>
		[EnumTextValue("SA_CODE_JOB_STATUS_ID")]
		[ColumnEnum("SA_CODE_JOB_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeJobStatusId = 4,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		FromDate = 5,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 6,
		/// <summary>
		/// ExtendedToDate : 
		/// </summary>
		[EnumTextValue("EXTENDED_TO_DATE")]
		[ColumnEnum("EXTENDED_TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExtendedToDate = 7,
		/// <summary>
		/// ActEndDate : 
		/// </summary>
		[EnumTextValue("ACT_END_DATE")]
		[ColumnEnum("ACT_END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ActEndDate = 8,
		/// <summary>
		/// TransactionId : 
		/// </summary>
		[EnumTextValue("TRANSACTION_ID")]
		[ColumnEnum("TRANSACTION_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TransactionId = 9
	}//End enum

	#endregion SaStfSummeryTransColumn Enum

} // end namespace
