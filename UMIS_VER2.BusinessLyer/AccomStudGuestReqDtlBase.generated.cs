
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AccomStudGuestReqDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ACCOM_STUD_GUEST_REQ_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccomStudGuestReqDtlBase : EntityBase, IAccomStudGuestReqDtl, IEntityId<AccomStudGuestReqDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccomStudGuestReqDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccomStudGuestReqDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccomStudGuestReqDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccomStudGuestReqDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomStudGuestReqDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomStudGuestReqDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccomStudGuestReqDtlBase"/> instance.
		///</summary>
		public AccomStudGuestReqDtlBase()
		{
			this.entityData = new AccomStudGuestReqDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccomStudGuestReqDtlBase"/> instance.
		///</summary>
		///<param name="_accomStudGuestReqDtlId"></param>
		///<param name="_accomStudGuestReqId"></param>
		///<param name="_guestNameAr">اسم الضيف</param>
		///<param name="_gsCountryNodeId">الجنسية</param>
		///<param name="_address">العنوان</param>
		///<param name="_mobileNum">رقم الهاتف</param>
		///<param name="_workType">نوع العمل</param>
		///<param name="_workAddress">مكان العمل</param>
		///<param name="_accomRoomId">الغرف  -من نوع ضيافة فقط</param>
		///<param name="_accomBedId">سراير الغرفة</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public AccomStudGuestReqDtlBase(System.Decimal _accomStudGuestReqDtlId, System.Decimal _accomStudGuestReqId, 
			System.String _guestNameAr, System.Decimal? _gsCountryNodeId, System.String _address, 
			System.String _mobileNum, System.String _workType, System.String _workAddress, 
			System.Decimal? _accomRoomId, System.Decimal? _accomBedId, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			this.entityData = new AccomStudGuestReqDtlEntityData();
			this.backupData = null;

			this.AccomStudGuestReqDtlId = _accomStudGuestReqDtlId;
			this.AccomStudGuestReqId = _accomStudGuestReqId;
			this.GuestNameAr = _guestNameAr;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.Address = _address;
			this.MobileNum = _mobileNum;
			this.WorkType = _workType;
			this.WorkAddress = _workAddress;
			this.AccomRoomId = _accomRoomId;
			this.AccomBedId = _accomBedId;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccomStudGuestReqDtl"/> instance.
		///</summary>
		///<param name="_accomStudGuestReqDtlId"></param>
		///<param name="_accomStudGuestReqId"></param>
		///<param name="_guestNameAr">اسم الضيف</param>
		///<param name="_gsCountryNodeId">الجنسية</param>
		///<param name="_address">العنوان</param>
		///<param name="_mobileNum">رقم الهاتف</param>
		///<param name="_workType">نوع العمل</param>
		///<param name="_workAddress">مكان العمل</param>
		///<param name="_accomRoomId">الغرف  -من نوع ضيافة فقط</param>
		///<param name="_accomBedId">سراير الغرفة</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static AccomStudGuestReqDtl CreateAccomStudGuestReqDtl(System.Decimal _accomStudGuestReqDtlId, System.Decimal _accomStudGuestReqId, 
			System.String _guestNameAr, System.Decimal? _gsCountryNodeId, System.String _address, 
			System.String _mobileNum, System.String _workType, System.String _workAddress, 
			System.Decimal? _accomRoomId, System.Decimal? _accomBedId, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			AccomStudGuestReqDtl newAccomStudGuestReqDtl = new AccomStudGuestReqDtl();
			newAccomStudGuestReqDtl.AccomStudGuestReqDtlId = _accomStudGuestReqDtlId;
			newAccomStudGuestReqDtl.AccomStudGuestReqId = _accomStudGuestReqId;
			newAccomStudGuestReqDtl.GuestNameAr = _guestNameAr;
			newAccomStudGuestReqDtl.GsCountryNodeId = _gsCountryNodeId;
			newAccomStudGuestReqDtl.Address = _address;
			newAccomStudGuestReqDtl.MobileNum = _mobileNum;
			newAccomStudGuestReqDtl.WorkType = _workType;
			newAccomStudGuestReqDtl.WorkAddress = _workAddress;
			newAccomStudGuestReqDtl.AccomRoomId = _accomRoomId;
			newAccomStudGuestReqDtl.AccomBedId = _accomBedId;
			newAccomStudGuestReqDtl.LastDate = _lastDate;
			newAccomStudGuestReqDtl.SeUserId = _seUserId;
			return newAccomStudGuestReqDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AccomStudGuestReqDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AccomStudGuestReqDtlId
		{
			get
			{
				return this.entityData.AccomStudGuestReqDtlId; 
			}
			
			set
			{
				if (this.entityData.AccomStudGuestReqDtlId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.AccomStudGuestReqDtlId, this.entityData.AccomStudGuestReqDtlId);
				this.entityData.AccomStudGuestReqDtlId = value;
				this.EntityId.AccomStudGuestReqDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.AccomStudGuestReqDtlId, this.entityData.AccomStudGuestReqDtlId);
				OnPropertyChanged("AccomStudGuestReqDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ACCOM_STUD_GUEST_REQ_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ACCOM_STUD_GUEST_REQ_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAccomStudGuestReqDtlId
		{
			get { return this.entityData.OriginalAccomStudGuestReqDtlId; }
			set { this.entityData.OriginalAccomStudGuestReqDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AccomStudGuestReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AccomStudGuestReqId
		{
			get
			{
				return this.entityData.AccomStudGuestReqId; 
			}
			
			set
			{
				if (this.entityData.AccomStudGuestReqId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.AccomStudGuestReqId, this.entityData.AccomStudGuestReqId);
				this.entityData.AccomStudGuestReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.AccomStudGuestReqId, this.entityData.AccomStudGuestReqId);
				OnPropertyChanged("AccomStudGuestReqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GuestNameAr property. 
		///		اسم الضيف
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"اسم الضيف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String GuestNameAr
		{
			get
			{
				return this.entityData.GuestNameAr; 
			}
			
			set
			{
				if (this.entityData.GuestNameAr == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.GuestNameAr, this.entityData.GuestNameAr);
				this.entityData.GuestNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.GuestNameAr, this.entityData.GuestNameAr);
				OnPropertyChanged("GuestNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		الجنسية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الجنسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		العنوان
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العنوان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileNum property. 
		///		رقم الهاتف
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الهاتف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String MobileNum
		{
			get
			{
				return this.entityData.MobileNum; 
			}
			
			set
			{
				if (this.entityData.MobileNum == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.MobileNum, this.entityData.MobileNum);
				this.entityData.MobileNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.MobileNum, this.entityData.MobileNum);
				OnPropertyChanged("MobileNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkType property. 
		///		نوع العمل
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع العمل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WorkType
		{
			get
			{
				return this.entityData.WorkType; 
			}
			
			set
			{
				if (this.entityData.WorkType == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.WorkType, this.entityData.WorkType);
				this.entityData.WorkType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.WorkType, this.entityData.WorkType);
				OnPropertyChanged("WorkType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkAddress property. 
		///		مكان العمل
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مكان العمل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String WorkAddress
		{
			get
			{
				return this.entityData.WorkAddress; 
			}
			
			set
			{
				if (this.entityData.WorkAddress == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.WorkAddress, this.entityData.WorkAddress);
				this.entityData.WorkAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.WorkAddress, this.entityData.WorkAddress);
				OnPropertyChanged("WorkAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccomRoomId property. 
		///		الغرف  -من نوع ضيافة فقط
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccomRoomIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الغرف  -من نوع ضيافة فقط"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccomRoomId
		{
			get
			{
				return this.entityData.AccomRoomId; 
			}
			
			set
			{
				if (this.entityData.AccomRoomId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.AccomRoomId, this.entityData.AccomRoomId);
				this.entityData.AccomRoomId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.AccomRoomId, this.entityData.AccomRoomId);
				OnPropertyChanged("AccomRoomId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccomBedId property. 
		///		سراير الغرفة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccomBedIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"سراير الغرفة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccomBedId
		{
			get
			{
				return this.entityData.AccomBedId; 
			}
			
			set
			{
				if (this.entityData.AccomBedId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.AccomBedId, this.entityData.AccomBedId);
				this.entityData.AccomBedId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.AccomBedId, this.entityData.AccomBedId);
				OnPropertyChanged("AccomBedId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AccomStudGuestReqDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudGuestReqDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AccomBed"/>.
		/// </summary>
		/// <value>The source AccomBed for AccomBedId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccomBed AccomBedIdSource
      	{
            get { return entityData.AccomBedIdSource; }
            set { entityData.AccomBedIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AccomRoom"/>.
		/// </summary>
		/// <value>The source AccomRoom for AccomRoomId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccomRoom AccomRoomIdSource
      	{
            get { return entityData.AccomRoomIdSource; }
            set { entityData.AccomRoomIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AccomStudGuestReq"/>.
		/// </summary>
		/// <value>The source AccomStudGuestReq for AccomStudGuestReqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccomStudGuestReq AccomStudGuestReqIdSource
      	{
            get { return entityData.AccomStudGuestReqIdSource; }
            set { entityData.AccomStudGuestReqIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GuestNameAr", "Guest Name Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GuestNameAr", "Guest Name Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobileNum", "Mobile Num", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WorkType", "Work Type", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WorkAddress", "Work Address", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ACCOM_STUD_GUEST_REQ_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ACCOM_STUD_GUEST_REQ_DTL_ID", "ACCOM_STUD_GUEST_REQ_ID", "GUEST_NAME_AR", "GS_COUNTRY_NODE_ID", "ADDRESS", "MOBILE_NUM", "WORK_TYPE", "WORK_ADDRESS", "ACCOM_ROOM_ID", "ACCOM_BED_ID", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccomStudGuestReqDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccomStudGuestReqDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccomStudGuestReqDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccomStudGuestReqDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccomStudGuestReqDtl Entity 
		///</summary>
		protected virtual AccomStudGuestReqDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AccomStudGuestReqDtl copy = new AccomStudGuestReqDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AccomStudGuestReqDtlId = this.AccomStudGuestReqDtlId;
					copy.OriginalAccomStudGuestReqDtlId = this.OriginalAccomStudGuestReqDtlId;
				copy.AccomStudGuestReqId = this.AccomStudGuestReqId;
				copy.GuestNameAr = this.GuestNameAr;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.Address = this.Address;
				copy.MobileNum = this.MobileNum;
				copy.WorkType = this.WorkType;
				copy.WorkAddress = this.WorkAddress;
				copy.AccomRoomId = this.AccomRoomId;
				copy.AccomBedId = this.AccomBedId;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.AccomBedIdSource != null && existingCopies.Contains(this.AccomBedIdSource))
				copy.AccomBedIdSource = existingCopies[this.AccomBedIdSource] as AccomBed;
			else
				copy.AccomBedIdSource = MakeCopyOf(this.AccomBedIdSource, existingCopies) as AccomBed;
			if (this.AccomRoomIdSource != null && existingCopies.Contains(this.AccomRoomIdSource))
				copy.AccomRoomIdSource = existingCopies[this.AccomRoomIdSource] as AccomRoom;
			else
				copy.AccomRoomIdSource = MakeCopyOf(this.AccomRoomIdSource, existingCopies) as AccomRoom;
			if (this.AccomStudGuestReqIdSource != null && existingCopies.Contains(this.AccomStudGuestReqIdSource))
				copy.AccomStudGuestReqIdSource = existingCopies[this.AccomStudGuestReqIdSource] as AccomStudGuestReq;
			else
				copy.AccomStudGuestReqIdSource = MakeCopyOf(this.AccomStudGuestReqIdSource, existingCopies) as AccomStudGuestReq;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AccomStudGuestReqDtl Entity 
		///</summary>
		public virtual AccomStudGuestReqDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AccomStudGuestReqDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccomStudGuestReqDtl DeepCopy()
		{
			return EntityHelper.Clone<AccomStudGuestReqDtl>(this as AccomStudGuestReqDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccomStudGuestReqDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccomStudGuestReqDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccomStudGuestReqDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccomStudGuestReqDtlColumn column)
		{
			switch(column)
			{
					case AccomStudGuestReqDtlColumn.AccomStudGuestReqDtlId:
					return entityData.AccomStudGuestReqDtlId != _originalData.AccomStudGuestReqDtlId;
					case AccomStudGuestReqDtlColumn.AccomStudGuestReqId:
					return entityData.AccomStudGuestReqId != _originalData.AccomStudGuestReqId;
					case AccomStudGuestReqDtlColumn.GuestNameAr:
					return entityData.GuestNameAr != _originalData.GuestNameAr;
					case AccomStudGuestReqDtlColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case AccomStudGuestReqDtlColumn.Address:
					return entityData.Address != _originalData.Address;
					case AccomStudGuestReqDtlColumn.MobileNum:
					return entityData.MobileNum != _originalData.MobileNum;
					case AccomStudGuestReqDtlColumn.WorkType:
					return entityData.WorkType != _originalData.WorkType;
					case AccomStudGuestReqDtlColumn.WorkAddress:
					return entityData.WorkAddress != _originalData.WorkAddress;
					case AccomStudGuestReqDtlColumn.AccomRoomId:
					return entityData.AccomRoomId != _originalData.AccomRoomId;
					case AccomStudGuestReqDtlColumn.AccomBedId:
					return entityData.AccomBedId != _originalData.AccomBedId;
					case AccomStudGuestReqDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case AccomStudGuestReqDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccomStudGuestReqDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AccomStudGuestReqDtlId != _originalData.AccomStudGuestReqDtlId;
			result = result || entityData.AccomStudGuestReqId != _originalData.AccomStudGuestReqId;
			result = result || entityData.GuestNameAr != _originalData.GuestNameAr;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.MobileNum != _originalData.MobileNum;
			result = result || entityData.WorkType != _originalData.WorkType;
			result = result || entityData.WorkAddress != _originalData.WorkAddress;
			result = result || entityData.AccomRoomId != _originalData.AccomRoomId;
			result = result || entityData.AccomBedId != _originalData.AccomBedId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a AccomStudGuestReqDtl Entity with the original data.
		///</summary>
		public AccomStudGuestReqDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccomStudGuestReqDtl(
				_originalData.AccomStudGuestReqDtlId,
				_originalData.AccomStudGuestReqId,
				_originalData.GuestNameAr,
				_originalData.GsCountryNodeId,
				_originalData.Address,
				_originalData.MobileNum,
				_originalData.WorkType,
				_originalData.WorkAddress,
				_originalData.AccomRoomId,
				_originalData.AccomBedId,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (AccomStudGuestReqDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccomStudGuestReqDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccomStudGuestReqDtlBase)
				return ValueEquals(this, (AccomStudGuestReqDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccomStudGuestReqDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AccomStudGuestReqDtlId.GetHashCode() ^ 
					this.AccomStudGuestReqId.GetHashCode() ^ 
					this.GuestNameAr.GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.MobileNum == null) ? string.Empty : this.MobileNum.ToString()).GetHashCode() ^ 
					((this.WorkType == null) ? string.Empty : this.WorkType.ToString()).GetHashCode() ^ 
					((this.WorkAddress == null) ? string.Empty : this.WorkAddress.ToString()).GetHashCode() ^ 
					((this.AccomRoomId == null) ? string.Empty : this.AccomRoomId.ToString()).GetHashCode() ^ 
					((this.AccomBedId == null) ? string.Empty : this.AccomBedId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccomStudGuestReqDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccomStudGuestReqDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccomStudGuestReqDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccomStudGuestReqDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccomStudGuestReqDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccomStudGuestReqDtlBase Object1, AccomStudGuestReqDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccomStudGuestReqDtlId != Object2.AccomStudGuestReqDtlId)
				equal = false;
			if (Object1.AccomStudGuestReqId != Object2.AccomStudGuestReqId)
				equal = false;
			if (Object1.GuestNameAr != Object2.GuestNameAr)
				equal = false;
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.MobileNum != null && Object2.MobileNum != null )
			{
				if (Object1.MobileNum != Object2.MobileNum)
					equal = false;
			}
			else if (Object1.MobileNum == null ^ Object2.MobileNum == null )
			{
				equal = false;
			}
			if ( Object1.WorkType != null && Object2.WorkType != null )
			{
				if (Object1.WorkType != Object2.WorkType)
					equal = false;
			}
			else if (Object1.WorkType == null ^ Object2.WorkType == null )
			{
				equal = false;
			}
			if ( Object1.WorkAddress != null && Object2.WorkAddress != null )
			{
				if (Object1.WorkAddress != Object2.WorkAddress)
					equal = false;
			}
			else if (Object1.WorkAddress == null ^ Object2.WorkAddress == null )
			{
				equal = false;
			}
			if ( Object1.AccomRoomId != null && Object2.AccomRoomId != null )
			{
				if (Object1.AccomRoomId != Object2.AccomRoomId)
					equal = false;
			}
			else if (Object1.AccomRoomId == null ^ Object2.AccomRoomId == null )
			{
				equal = false;
			}
			if ( Object1.AccomBedId != null && Object2.AccomBedId != null )
			{
				if (Object1.AccomBedId != Object2.AccomBedId)
					equal = false;
			}
			else if (Object1.AccomBedId == null ^ Object2.AccomBedId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccomStudGuestReqDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccomStudGuestReqDtlComparer GetComparer()
        {
            return new AccomStudGuestReqDtlComparer();
        }
        */

        // Comparer delegates back to AccomStudGuestReqDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccomStudGuestReqDtl rhs, AccomStudGuestReqDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccomStudGuestReqDtlColumn.AccomStudGuestReqDtlId:
            		return this.AccomStudGuestReqDtlId.CompareTo(rhs.AccomStudGuestReqDtlId);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.AccomStudGuestReqId:
            		return this.AccomStudGuestReqId.CompareTo(rhs.AccomStudGuestReqId);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.GuestNameAr:
            		return this.GuestNameAr.CompareTo(rhs.GuestNameAr);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.MobileNum:
            		return this.MobileNum.CompareTo(rhs.MobileNum);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.WorkType:
            		return this.WorkType.CompareTo(rhs.WorkType);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.WorkAddress:
            		return this.WorkAddress.CompareTo(rhs.WorkAddress);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.AccomRoomId:
            		return this.AccomRoomId.Value.CompareTo(rhs.AccomRoomId.Value);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.AccomBedId:
            		return this.AccomBedId.Value.CompareTo(rhs.AccomBedId.Value);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case AccomStudGuestReqDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccomStudGuestReqDtlKey> Members
		
		// member variable for the EntityId property
		private AccomStudGuestReqDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccomStudGuestReqDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccomStudGuestReqDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccomStudGuestReqDtl")
					.Append("|").Append( this.AccomStudGuestReqDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- AccomStudGuestReqDtlId: {0}{12}- AccomStudGuestReqId: {1}{12}- GuestNameAr: {2}{12}- GsCountryNodeId: {3}{12}- Address: {4}{12}- MobileNum: {5}{12}- WorkType: {6}{12}- WorkAddress: {7}{12}- AccomRoomId: {8}{12}- AccomBedId: {9}{12}- LastDate: {10}{12}- SeUserId: {11}{12}{14}", 
				this.AccomStudGuestReqDtlId,
				this.AccomStudGuestReqId,
				this.GuestNameAr,
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.MobileNum == null) ? string.Empty : this.MobileNum.ToString(),
				(this.WorkType == null) ? string.Empty : this.WorkType.ToString(),
				(this.WorkAddress == null) ? string.Empty : this.WorkAddress.ToString(),
				(this.AccomRoomId == null) ? string.Empty : this.AccomRoomId.ToString(),
				(this.AccomBedId == null) ? string.Empty : this.AccomBedId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ACCOM_STUD_GUEST_REQ_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccomStudGuestReqDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ACCOM_STUD_GUEST_REQ_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ACCOM_STUD_GUEST_REQ_DTL"</remarks>
		public System.Decimal AccomStudGuestReqDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAccomStudGuestReqDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ACCOM_STUD_GUEST_REQ_ID : 
		/// </summary>
		public System.Decimal		  AccomStudGuestReqId = 0.0m;
		
		/// <summary>
		/// GUEST_NAME_AR : اسم الضيف
		/// </summary>
		public System.String		  GuestNameAr = string.Empty;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : الجنسية
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// ADDRESS : العنوان
		/// </summary>
		public System.String		  Address = null;
		
		/// <summary>
		/// MOBILE_NUM : رقم الهاتف
		/// </summary>
		public System.String		  MobileNum = null;
		
		/// <summary>
		/// WORK_TYPE : نوع العمل
		/// </summary>
		public System.String		  WorkType = null;
		
		/// <summary>
		/// WORK_ADDRESS : مكان العمل
		/// </summary>
		public System.String		  WorkAddress = null;
		
		/// <summary>
		/// ACCOM_ROOM_ID : الغرف  -من نوع ضيافة فقط
		/// </summary>
		public System.Decimal?		  AccomRoomId = null;
		
		/// <summary>
		/// ACCOM_BED_ID : سراير الغرفة
		/// </summary>
		public System.Decimal?		  AccomBedId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AccomBed _accomBedIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccomBed"/>.
		/// </summary>
		/// <value>The source AccomBed for AccomBedId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AccomBed AccomBedIdSource
      	{
            get { return this._accomBedIdSource; }
            set { this._accomBedIdSource = value; }
      	}
		private AccomRoom _accomRoomIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccomRoom"/>.
		/// </summary>
		/// <value>The source AccomRoom for AccomRoomId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AccomRoom AccomRoomIdSource
      	{
            get { return this._accomRoomIdSource; }
            set { this._accomRoomIdSource = value; }
      	}
		private AccomStudGuestReq _accomStudGuestReqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccomStudGuestReq"/>.
		/// </summary>
		/// <value>The source AccomStudGuestReq for AccomStudGuestReqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AccomStudGuestReq AccomStudGuestReqIdSource
      	{
            get { return this._accomStudGuestReqIdSource; }
            set { this._accomStudGuestReqIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccomStudGuestReqDtlEntityData _tmp = new AccomStudGuestReqDtlEntityData();
						
			_tmp.AccomStudGuestReqDtlId = this.AccomStudGuestReqDtlId;
			_tmp.OriginalAccomStudGuestReqDtlId = this.OriginalAccomStudGuestReqDtlId;
			
			_tmp.AccomStudGuestReqId = this.AccomStudGuestReqId;
			_tmp.GuestNameAr = this.GuestNameAr;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.Address = this.Address;
			_tmp.MobileNum = this.MobileNum;
			_tmp.WorkType = this.WorkType;
			_tmp.WorkAddress = this.WorkAddress;
			_tmp.AccomRoomId = this.AccomRoomId;
			_tmp.AccomBedId = this.AccomBedId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AccomBedIdSource != null)
				_tmp.AccomBedIdSource = MakeCopyOf(this.AccomBedIdSource) as AccomBed;
			if (this.AccomRoomIdSource != null)
				_tmp.AccomRoomIdSource = MakeCopyOf(this.AccomRoomIdSource) as AccomRoom;
			if (this.AccomStudGuestReqIdSource != null)
				_tmp.AccomStudGuestReqIdSource = MakeCopyOf(this.AccomStudGuestReqIdSource) as AccomStudGuestReq;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccomStudGuestReqDtlEntityData _tmp = new AccomStudGuestReqDtlEntityData();
						
			_tmp.AccomStudGuestReqDtlId = this.AccomStudGuestReqDtlId;
			_tmp.OriginalAccomStudGuestReqDtlId = this.OriginalAccomStudGuestReqDtlId;
			
			_tmp.AccomStudGuestReqId = this.AccomStudGuestReqId;
			_tmp.GuestNameAr = this.GuestNameAr;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.Address = this.Address;
			_tmp.MobileNum = this.MobileNum;
			_tmp.WorkType = this.WorkType;
			_tmp.WorkAddress = this.WorkAddress;
			_tmp.AccomRoomId = this.AccomRoomId;
			_tmp.AccomBedId = this.AccomBedId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AccomBedIdSource != null && existingCopies.Contains(this.AccomBedIdSource))
				_tmp.AccomBedIdSource = existingCopies[this.AccomBedIdSource] as AccomBed;
			else
				_tmp.AccomBedIdSource = MakeCopyOf(this.AccomBedIdSource, existingCopies) as AccomBed;
			if (this.AccomRoomIdSource != null && existingCopies.Contains(this.AccomRoomIdSource))
				_tmp.AccomRoomIdSource = existingCopies[this.AccomRoomIdSource] as AccomRoom;
			else
				_tmp.AccomRoomIdSource = MakeCopyOf(this.AccomRoomIdSource, existingCopies) as AccomRoom;
			if (this.AccomStudGuestReqIdSource != null && existingCopies.Contains(this.AccomStudGuestReqIdSource))
				_tmp.AccomStudGuestReqIdSource = existingCopies[this.AccomStudGuestReqIdSource] as AccomStudGuestReq;
			else
				_tmp.AccomStudGuestReqIdSource = MakeCopyOf(this.AccomStudGuestReqIdSource, existingCopies) as AccomStudGuestReq;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudGuestReqDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccomStudGuestReqDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudGuestReqDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccomStudGuestReqDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudGuestReqDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccomStudGuestReqDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccomStudGuestReqDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccomStudGuestReqDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudGuestReqDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccomStudGuestReqDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccomStudGuestReqDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccomStudGuestReqDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccomStudGuestReqDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccomStudGuestReqDtl"/> object.
	/// </remarks>
	public class AccomStudGuestReqDtlEventArgs : System.EventArgs
	{
		private AccomStudGuestReqDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccomStudGuestReqDtlEventArgs class.
		///</summary>
		public AccomStudGuestReqDtlEventArgs(AccomStudGuestReqDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccomStudGuestReqDtlEventArgs class.
		///</summary>
		public AccomStudGuestReqDtlEventArgs(AccomStudGuestReqDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccomStudGuestReqDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccomStudGuestReqDtlColumn" />
		public AccomStudGuestReqDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccomStudGuestReqDtl related events.
	///</summary>
	public delegate void AccomStudGuestReqDtlEventHandler(object sender, AccomStudGuestReqDtlEventArgs e);
	
	#region AccomStudGuestReqDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccomStudGuestReqDtlComparer : System.Collections.Generic.IComparer<AccomStudGuestReqDtl>
	{
		AccomStudGuestReqDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccomStudGuestReqDtlComparer"/> class.
        /// </summary>
		public AccomStudGuestReqDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccomStudGuestReqDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccomStudGuestReqDtlComparer(AccomStudGuestReqDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AccomStudGuestReqDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AccomStudGuestReqDtl"/> to compare.</param>
        /// <param name="b">The second <c>AccomStudGuestReqDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccomStudGuestReqDtl a, AccomStudGuestReqDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccomStudGuestReqDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccomStudGuestReqDtl a, AccomStudGuestReqDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccomStudGuestReqDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccomStudGuestReqDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccomStudGuestReqDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccomStudGuestReqDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlKey class.
		/// </summary>
		public AccomStudGuestReqDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlKey class.
		/// </summary>
		public AccomStudGuestReqDtlKey(AccomStudGuestReqDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AccomStudGuestReqDtlId = entity.AccomStudGuestReqDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomStudGuestReqDtlKey class.
		/// </summary>
		public AccomStudGuestReqDtlKey(System.Decimal _accomStudGuestReqDtlId)
		{
			#region Init Properties

			this.AccomStudGuestReqDtlId = _accomStudGuestReqDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccomStudGuestReqDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccomStudGuestReqDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccomStudGuestReqDtlId property
		private System.Decimal _accomStudGuestReqDtlId;
		
		/// <summary>
		/// Gets or sets the AccomStudGuestReqDtlId property.
		/// </summary>
		public System.Decimal AccomStudGuestReqDtlId
		{
			get { return _accomStudGuestReqDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccomStudGuestReqDtlId = value;
				
				_accomStudGuestReqDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccomStudGuestReqDtlId = ( values["AccomStudGuestReqDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AccomStudGuestReqDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccomStudGuestReqDtlId", AccomStudGuestReqDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccomStudGuestReqDtlId: {0}{1}",
								AccomStudGuestReqDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccomStudGuestReqDtlColumn Enum
	
	/// <summary>
	/// Enumerate the AccomStudGuestReqDtl columns.
	/// </summary>
	[Serializable]
	public enum AccomStudGuestReqDtlColumn : int
	{
		/// <summary>
		/// AccomStudGuestReqDtlId : 
		/// </summary>
		[EnumTextValue("ACCOM_STUD_GUEST_REQ_DTL_ID")]
		[ColumnEnum("ACCOM_STUD_GUEST_REQ_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AccomStudGuestReqDtlId = 1,
		/// <summary>
		/// AccomStudGuestReqId : 
		/// </summary>
		[EnumTextValue("ACCOM_STUD_GUEST_REQ_ID")]
		[ColumnEnum("ACCOM_STUD_GUEST_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AccomStudGuestReqId = 2,
		/// <summary>
		/// GuestNameAr : اسم الضيف
		/// </summary>
		[EnumTextValue("GUEST_NAME_AR")]
		[ColumnEnum("GUEST_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		GuestNameAr = 3,
		/// <summary>
		/// GsCountryNodeId : الجنسية
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 4,
		/// <summary>
		/// Address : العنوان
		/// </summary>
		[EnumTextValue("ADDRESS")]
		[ColumnEnum("ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Address = 5,
		/// <summary>
		/// MobileNum : رقم الهاتف
		/// </summary>
		[EnumTextValue("MOBILE_NUM")]
		[ColumnEnum("MOBILE_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		MobileNum = 6,
		/// <summary>
		/// WorkType : نوع العمل
		/// </summary>
		[EnumTextValue("WORK_TYPE")]
		[ColumnEnum("WORK_TYPE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		WorkType = 7,
		/// <summary>
		/// WorkAddress : مكان العمل
		/// </summary>
		[EnumTextValue("WORK_ADDRESS")]
		[ColumnEnum("WORK_ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		WorkAddress = 8,
		/// <summary>
		/// AccomRoomId : الغرف  -من نوع ضيافة فقط
		/// </summary>
		[EnumTextValue("ACCOM_ROOM_ID")]
		[ColumnEnum("ACCOM_ROOM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccomRoomId = 9,
		/// <summary>
		/// AccomBedId : سراير الغرفة
		/// </summary>
		[EnumTextValue("ACCOM_BED_ID")]
		[ColumnEnum("ACCOM_BED_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccomBedId = 10,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12
	}//End enum

	#endregion AccomStudGuestReqDtlColumn Enum

} // end namespace
