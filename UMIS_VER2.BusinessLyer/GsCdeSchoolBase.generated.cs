
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCdeSchool.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_CDE_SCHOOL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCdeSchoolBase : EntityBase, IGsCdeSchool, IEntityId<GsCdeSchoolKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCdeSchoolEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCdeSchoolEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCdeSchoolEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCdeSchool> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdeSchoolEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdeSchoolEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCdeSchoolBase"/> instance.
		///</summary>
		public GsCdeSchoolBase()
		{
			this.entityData = new GsCdeSchoolEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCdeSchoolBase"/> instance.
		///</summary>
		///<param name="_gsCdeSchoolId">اكواد المدارس</param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_isPublicFlg"></param>
		///<param name="_notes">الادارة التعليمية</param>
		///<param name="_schoolAddress">School Address</param>
		///<param name="_schoolCode">CSS</param>
		public GsCdeSchoolBase(System.Decimal _gsCdeSchoolId, System.String _descrAr, System.String _descrEn, 
			System.Decimal? _gsCountryNodeId, System.Decimal _isPublicFlg, System.String _notes, 
			System.String _schoolAddress, System.String _schoolCode)
		{
			this.entityData = new GsCdeSchoolEntityData();
			this.backupData = null;

			this.GsCdeSchoolId = _gsCdeSchoolId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.IsPublicFlg = _isPublicFlg;
			this.Notes = _notes;
			this.SchoolAddress = _schoolAddress;
			this.SchoolCode = _schoolCode;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCdeSchool"/> instance.
		///</summary>
		///<param name="_gsCdeSchoolId">اكواد المدارس</param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_isPublicFlg"></param>
		///<param name="_notes">الادارة التعليمية</param>
		///<param name="_schoolAddress">School Address</param>
		///<param name="_schoolCode">CSS</param>
		public static GsCdeSchool CreateGsCdeSchool(System.Decimal _gsCdeSchoolId, System.String _descrAr, System.String _descrEn, 
			System.Decimal? _gsCountryNodeId, System.Decimal _isPublicFlg, System.String _notes, 
			System.String _schoolAddress, System.String _schoolCode)
		{
			GsCdeSchool newGsCdeSchool = new GsCdeSchool();
			newGsCdeSchool.GsCdeSchoolId = _gsCdeSchoolId;
			newGsCdeSchool.DescrAr = _descrAr;
			newGsCdeSchool.DescrEn = _descrEn;
			newGsCdeSchool.GsCountryNodeId = _gsCountryNodeId;
			newGsCdeSchool.IsPublicFlg = _isPublicFlg;
			newGsCdeSchool.Notes = _notes;
			newGsCdeSchool.SchoolAddress = _schoolAddress;
			newGsCdeSchool.SchoolCode = _schoolCode;
			return newGsCdeSchool;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCdeSchoolId property. 
		///		اكواد المدارس
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اكواد المدارس"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCdeSchoolId
		{
			get
			{
				return this.entityData.GsCdeSchoolId; 
			}
			
			set
			{
				if (this.entityData.GsCdeSchoolId == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.GsCdeSchoolId, this.entityData.GsCdeSchoolId);
				this.entityData.GsCdeSchoolId = value;
				this.EntityId.GsCdeSchoolId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.GsCdeSchoolId, this.entityData.GsCdeSchoolId);
				OnPropertyChanged("GsCdeSchoolId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_CDE_SCHOOL_ID property.
		///		اكواد المدارس
		/// </summary>
		/// <remarks>This is the original value of the GS_CDE_SCHOOL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCdeSchoolId
		{
			get { return this.entityData.OriginalGsCdeSchoolId; }
			set { this.entityData.OriginalGsCdeSchoolId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPublicFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsPublicFlg
		{
			get
			{
				return this.entityData.IsPublicFlg; 
			}
			
			set
			{
				if (this.entityData.IsPublicFlg == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.IsPublicFlg, this.entityData.IsPublicFlg);
				this.entityData.IsPublicFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.IsPublicFlg, this.entityData.IsPublicFlg);
				OnPropertyChanged("IsPublicFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		الادارة التعليمية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الادارة التعليمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolAddress property. 
		///		School Address
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"School Address"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String SchoolAddress
		{
			get
			{
				return this.entityData.SchoolAddress; 
			}
			
			set
			{
				if (this.entityData.SchoolAddress == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.SchoolAddress, this.entityData.SchoolAddress);
				this.entityData.SchoolAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.SchoolAddress, this.entityData.SchoolAddress);
				OnPropertyChanged("SchoolAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchoolCode property. 
		///		CSS
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"CSS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SchoolCode
		{
			get
			{
				return this.entityData.SchoolCode; 
			}
			
			set
			{
				if (this.entityData.SchoolCode == value)
					return;
					
				OnColumnChanging(GsCdeSchoolColumn.SchoolCode, this.entityData.SchoolCode);
				this.entityData.SchoolCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeSchoolColumn.SchoolCode, this.entityData.SchoolCode);
				OnPropertyChanged("SchoolCode");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudQual objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_GS_CDE_SCHOOL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQual> EdStudQualCollection
		{
			get { return entityData.EdStudQualCollection; }
			set { entityData.EdStudQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmReqDoc objects
		///	which are related to this object through the relation FK_ADM_REQ_DOC_GS_CDE_SCHOOL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmReqDoc> AdmReqDocCollection
		{
			get { return entityData.AdmReqDocCollection; }
			set { entityData.AdmReqDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SchoolAddress", "School Address", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SchoolCode", "School Code", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_CDE_SCHOOL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_CDE_SCHOOL_ID", "DESCR_AR", "DESCR_EN", "GS_COUNTRY_NODE_ID", "IS_PUBLIC_FLG", "NOTES", "SCHOOL_ADDRESS", "SCHOOL_CODE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCdeSchoolEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCdeSchool) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCdeSchool>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCdeSchool);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCdeSchool Entity 
		///</summary>
		protected virtual GsCdeSchool Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCdeSchool copy = new GsCdeSchool();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCdeSchoolId = this.GsCdeSchoolId;
					copy.OriginalGsCdeSchoolId = this.OriginalGsCdeSchoolId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.IsPublicFlg = this.IsPublicFlg;
				copy.Notes = this.Notes;
				copy.SchoolAddress = this.SchoolAddress;
				copy.SchoolCode = this.SchoolCode;
			
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
		
			//deep copy nested objects
			copy.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			copy.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCdeSchool Entity 
		///</summary>
		public virtual GsCdeSchool Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCdeSchool Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCdeSchool DeepCopy()
		{
			return EntityHelper.Clone<GsCdeSchool>(this as GsCdeSchool);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCdeSchoolEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCdeSchoolEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCdeSchoolEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCdeSchoolColumn column)
		{
			switch(column)
			{
					case GsCdeSchoolColumn.GsCdeSchoolId:
					return entityData.GsCdeSchoolId != _originalData.GsCdeSchoolId;
					case GsCdeSchoolColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case GsCdeSchoolColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case GsCdeSchoolColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case GsCdeSchoolColumn.IsPublicFlg:
					return entityData.IsPublicFlg != _originalData.IsPublicFlg;
					case GsCdeSchoolColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case GsCdeSchoolColumn.SchoolAddress:
					return entityData.SchoolAddress != _originalData.SchoolAddress;
					case GsCdeSchoolColumn.SchoolCode:
					return entityData.SchoolCode != _originalData.SchoolCode;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCdeSchoolColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCdeSchoolId != _originalData.GsCdeSchoolId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.IsPublicFlg != _originalData.IsPublicFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SchoolAddress != _originalData.SchoolAddress;
			result = result || entityData.SchoolCode != _originalData.SchoolCode;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCdeSchool Entity with the original data.
		///</summary>
		public GsCdeSchool GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCdeSchool(
				_originalData.GsCdeSchoolId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.GsCountryNodeId,
				_originalData.IsPublicFlg,
				_originalData.Notes,
				_originalData.SchoolAddress,
				_originalData.SchoolCode
				);
				
			return (GsCdeSchool)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCdeSchoolBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCdeSchoolBase)
				return ValueEquals(this, (GsCdeSchoolBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCdeSchoolBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCdeSchoolId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					this.IsPublicFlg.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SchoolAddress == null) ? string.Empty : this.SchoolAddress.ToString()).GetHashCode() ^ 
					((this.SchoolCode == null) ? string.Empty : this.SchoolCode.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCdeSchoolBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCdeSchoolBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCdeSchoolBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCdeSchoolBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCdeSchoolBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCdeSchoolBase Object1, GsCdeSchoolBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCdeSchoolId != Object2.GsCdeSchoolId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if (Object1.IsPublicFlg != Object2.IsPublicFlg)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SchoolAddress != null && Object2.SchoolAddress != null )
			{
				if (Object1.SchoolAddress != Object2.SchoolAddress)
					equal = false;
			}
			else if (Object1.SchoolAddress == null ^ Object2.SchoolAddress == null )
			{
				equal = false;
			}
			if ( Object1.SchoolCode != null && Object2.SchoolCode != null )
			{
				if (Object1.SchoolCode != Object2.SchoolCode)
					equal = false;
			}
			else if (Object1.SchoolCode == null ^ Object2.SchoolCode == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCdeSchoolBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCdeSchoolComparer GetComparer()
        {
            return new GsCdeSchoolComparer();
        }
        */

        // Comparer delegates back to GsCdeSchool
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCdeSchool rhs, GsCdeSchoolColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCdeSchoolColumn.GsCdeSchoolId:
            		return this.GsCdeSchoolId.CompareTo(rhs.GsCdeSchoolId);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.IsPublicFlg:
            		return this.IsPublicFlg.CompareTo(rhs.IsPublicFlg);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.SchoolAddress:
            		return this.SchoolAddress.CompareTo(rhs.SchoolAddress);
            		
            		                 
            	
            	
            	case GsCdeSchoolColumn.SchoolCode:
            		return this.SchoolCode.CompareTo(rhs.SchoolCode);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCdeSchoolKey> Members
		
		// member variable for the EntityId property
		private GsCdeSchoolKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCdeSchoolKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCdeSchoolKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCdeSchool")
					.Append("|").Append( this.GsCdeSchoolId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- GsCdeSchoolId: {0}{8}- DescrAr: {1}{8}- DescrEn: {2}{8}- GsCountryNodeId: {3}{8}- IsPublicFlg: {4}{8}- Notes: {5}{8}- SchoolAddress: {6}{8}- SchoolCode: {7}{8}{10}", 
				this.GsCdeSchoolId,
				this.DescrAr,
				this.DescrEn,
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				this.IsPublicFlg,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SchoolAddress == null) ? string.Empty : this.SchoolAddress.ToString(),
				(this.SchoolCode == null) ? string.Empty : this.SchoolCode.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_CDE_SCHOOL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCdeSchoolEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_CDE_SCHOOL_ID : اكواد المدارس
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_CDE_SCHOOL"</remarks>
		public System.Decimal GsCdeSchoolId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCdeSchoolId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// IS_PUBLIC_FLG : 
		/// </summary>
		public System.Decimal		  IsPublicFlg = 0.0m;
		
		/// <summary>
		/// NOTES : الادارة التعليمية
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SCHOOL_ADDRESS : School Address
		/// </summary>
		public System.String		  SchoolAddress = null;
		
		/// <summary>
		/// SCHOOL_CODE : CSS
		/// </summary>
		public System.String		  SchoolCode = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudQualCollection
		
		private TList<EdStudQual> _edStudQualGsCdeSchoolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualGsCdeSchoolId
		/// </summary>
		
		public TList<EdStudQual> EdStudQualCollection
		{
			get
			{
				if (_edStudQualGsCdeSchoolId == null)
				{
				_edStudQualGsCdeSchoolId = new TList<EdStudQual>();
				}
	
				return _edStudQualGsCdeSchoolId;
			}
			set { _edStudQualGsCdeSchoolId = value; }
		}
		
		#endregion

		#region AdmReqDocCollection
		
		private TList<AdmReqDoc> _admReqDocGsCdeSchoolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admReqDocGsCdeSchoolId
		/// </summary>
		
		public TList<AdmReqDoc> AdmReqDocCollection
		{
			get
			{
				if (_admReqDocGsCdeSchoolId == null)
				{
				_admReqDocGsCdeSchoolId = new TList<AdmReqDoc>();
				}
	
				return _admReqDocGsCdeSchoolId;
			}
			set { _admReqDocGsCdeSchoolId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCdeSchoolEntityData _tmp = new GsCdeSchoolEntityData();
						
			_tmp.GsCdeSchoolId = this.GsCdeSchoolId;
			_tmp.OriginalGsCdeSchoolId = this.OriginalGsCdeSchoolId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.IsPublicFlg = this.IsPublicFlg;
			_tmp.Notes = this.Notes;
			_tmp.SchoolAddress = this.SchoolAddress;
			_tmp.SchoolCode = this.SchoolCode;
			
			#region Source Parent Composite Entities
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudQualGsCdeSchoolId != null)
				_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection); 
			if (this._admReqDocGsCdeSchoolId != null)
				_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCdeSchoolEntityData _tmp = new GsCdeSchoolEntityData();
						
			_tmp.GsCdeSchoolId = this.GsCdeSchoolId;
			_tmp.OriginalGsCdeSchoolId = this.OriginalGsCdeSchoolId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.IsPublicFlg = this.IsPublicFlg;
			_tmp.Notes = this.Notes;
			_tmp.SchoolAddress = this.SchoolAddress;
			_tmp.SchoolCode = this.SchoolCode;
			
			#region Source Parent Composite Entities
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeSchoolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCdeSchoolColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeSchoolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCdeSchoolColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeSchoolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCdeSchoolColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCdeSchoolEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCdeSchoolEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeSchoolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCdeSchoolColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCdeSchoolEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCdeSchoolEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCdeSchoolEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCdeSchool"/> object.
	/// </remarks>
	public class GsCdeSchoolEventArgs : System.EventArgs
	{
		private GsCdeSchoolColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCdeSchoolEventArgs class.
		///</summary>
		public GsCdeSchoolEventArgs(GsCdeSchoolColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCdeSchoolEventArgs class.
		///</summary>
		public GsCdeSchoolEventArgs(GsCdeSchoolColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCdeSchoolColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCdeSchoolColumn" />
		public GsCdeSchoolColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCdeSchool related events.
	///</summary>
	public delegate void GsCdeSchoolEventHandler(object sender, GsCdeSchoolEventArgs e);
	
	#region GsCdeSchoolComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCdeSchoolComparer : System.Collections.Generic.IComparer<GsCdeSchool>
	{
		GsCdeSchoolColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdeSchoolComparer"/> class.
        /// </summary>
		public GsCdeSchoolComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdeSchoolComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCdeSchoolComparer(GsCdeSchoolColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCdeSchool"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCdeSchool"/> to compare.</param>
        /// <param name="b">The second <c>GsCdeSchool</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCdeSchool a, GsCdeSchool b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCdeSchool entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCdeSchool a, GsCdeSchool b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCdeSchoolColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCdeSchoolKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCdeSchool"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCdeSchoolKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolKey class.
		/// </summary>
		public GsCdeSchoolKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolKey class.
		/// </summary>
		public GsCdeSchoolKey(GsCdeSchoolBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCdeSchoolId = entity.GsCdeSchoolId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdeSchoolKey class.
		/// </summary>
		public GsCdeSchoolKey(System.Decimal _gsCdeSchoolId)
		{
			#region Init Properties

			this.GsCdeSchoolId = _gsCdeSchoolId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCdeSchoolBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCdeSchoolBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCdeSchoolId property
		private System.Decimal _gsCdeSchoolId;
		
		/// <summary>
		/// Gets or sets the GsCdeSchoolId property.
		/// </summary>
		public System.Decimal GsCdeSchoolId
		{
			get { return _gsCdeSchoolId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCdeSchoolId = value;
				
				_gsCdeSchoolId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCdeSchoolId = ( values["GsCdeSchoolId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCdeSchoolId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCdeSchoolId", GsCdeSchoolId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCdeSchoolId: {0}{1}",
								GsCdeSchoolId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCdeSchoolColumn Enum
	
	/// <summary>
	/// Enumerate the GsCdeSchool columns.
	/// </summary>
	[Serializable]
	public enum GsCdeSchoolColumn : int
	{
		/// <summary>
		/// GsCdeSchoolId : اكواد المدارس
		/// </summary>
		[EnumTextValue("GS_CDE_SCHOOL_ID")]
		[ColumnEnum("GS_CDE_SCHOOL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCdeSchoolId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrEn = 3,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 4,
		/// <summary>
		/// IsPublicFlg : 
		/// </summary>
		[EnumTextValue("IS_PUBLIC_FLG")]
		[ColumnEnum("IS_PUBLIC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsPublicFlg = 5,
		/// <summary>
		/// Notes : الادارة التعليمية
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 6,
		/// <summary>
		/// SchoolAddress : School Address
		/// </summary>
		[EnumTextValue("SCHOOL_ADDRESS")]
		[ColumnEnum("SCHOOL_ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		SchoolAddress = 7,
		/// <summary>
		/// SchoolCode : CSS
		/// </summary>
		[EnumTextValue("SCHOOL_CODE")]
		[ColumnEnum("SCHOOL_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		SchoolCode = 8
	}//End enum

	#endregion GsCdeSchoolColumn Enum

} // end namespace
