
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCountryNode.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_COUNTRY_NODE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCountryNodeBase : EntityBase, IGsCountryNode, IEntityId<GsCountryNodeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCountryNodeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCountryNodeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCountryNodeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCountryNode> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCountryNodeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCountryNodeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCountryNodeBase"/> instance.
		///</summary>
		public GsCountryNodeBase()
		{
			this.entityData = new GsCountryNodeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCountryNodeBase"/> instance.
		///</summary>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_nodeDescrAr"></param>
		///<param name="_nodeDescrEn"></param>
		///<param name="_nodePath"></param>
		///<param name="_nodeOrder"></param>
		///<param name="_nodeParentId"></param>
		///<param name="_nodeLevel"></param>
		///<param name="_nodeCode"></param>
		///<param name="_nodeChildCount"></param>
		///<param name="_gsCodeCNodeNatureId"></param>
		///<param name="_isNodeLocal"></param>
		///<param name="_isNodeVisible"></param>
		///<param name="_gccFlg">يعامل معاملة المصرى فى المصروفات similarity_flg=1 </param>
		///<param name="_nationCode">كود الجنسية</param>
		///<param name="_nationDescrAr">وصف الجنسية</param>
		///<param name="_nationDescrEn">وصف الجنسية</param>
		///<param name="_gsCodeCurrencyId">عملة دفع المصروفات الاساسية</param>
		///<param name="_admAdmissionBandId"></param>
		public GsCountryNodeBase(System.Decimal _gsCountryNodeId, System.String _nodeDescrAr, 
			System.String _nodeDescrEn, System.String _nodePath, System.Decimal _nodeOrder, 
			System.Decimal _nodeParentId, System.Decimal _nodeLevel, System.String _nodeCode, 
			System.Decimal _nodeChildCount, System.Decimal _gsCodeCNodeNatureId, System.Decimal _isNodeLocal, 
			System.Decimal _isNodeVisible, System.Decimal? _gccFlg, System.String _nationCode, 
			System.String _nationDescrAr, System.String _nationDescrEn, System.Decimal? _gsCodeCurrencyId, 
			System.Decimal? _admAdmissionBandId)
		{
			this.entityData = new GsCountryNodeEntityData();
			this.backupData = null;

			this.GsCountryNodeId = _gsCountryNodeId;
			this.NodeDescrAr = _nodeDescrAr;
			this.NodeDescrEn = _nodeDescrEn;
			this.NodePath = _nodePath;
			this.NodeOrder = _nodeOrder;
			this.NodeParentId = _nodeParentId;
			this.NodeLevel = _nodeLevel;
			this.NodeCode = _nodeCode;
			this.NodeChildCount = _nodeChildCount;
			this.GsCodeCNodeNatureId = _gsCodeCNodeNatureId;
			this.IsNodeLocal = _isNodeLocal;
			this.IsNodeVisible = _isNodeVisible;
			this.GccFlg = _gccFlg;
			this.NationCode = _nationCode;
			this.NationDescrAr = _nationDescrAr;
			this.NationDescrEn = _nationDescrEn;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.AdmAdmissionBandId = _admAdmissionBandId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCountryNode"/> instance.
		///</summary>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_nodeDescrAr"></param>
		///<param name="_nodeDescrEn"></param>
		///<param name="_nodePath"></param>
		///<param name="_nodeOrder"></param>
		///<param name="_nodeParentId"></param>
		///<param name="_nodeLevel"></param>
		///<param name="_nodeCode"></param>
		///<param name="_nodeChildCount"></param>
		///<param name="_gsCodeCNodeNatureId"></param>
		///<param name="_isNodeLocal"></param>
		///<param name="_isNodeVisible"></param>
		///<param name="_gccFlg">يعامل معاملة المصرى فى المصروفات similarity_flg=1 </param>
		///<param name="_nationCode">كود الجنسية</param>
		///<param name="_nationDescrAr">وصف الجنسية</param>
		///<param name="_nationDescrEn">وصف الجنسية</param>
		///<param name="_gsCodeCurrencyId">عملة دفع المصروفات الاساسية</param>
		///<param name="_admAdmissionBandId"></param>
		public static GsCountryNode CreateGsCountryNode(System.Decimal _gsCountryNodeId, System.String _nodeDescrAr, 
			System.String _nodeDescrEn, System.String _nodePath, System.Decimal _nodeOrder, 
			System.Decimal _nodeParentId, System.Decimal _nodeLevel, System.String _nodeCode, 
			System.Decimal _nodeChildCount, System.Decimal _gsCodeCNodeNatureId, System.Decimal _isNodeLocal, 
			System.Decimal _isNodeVisible, System.Decimal? _gccFlg, System.String _nationCode, 
			System.String _nationDescrAr, System.String _nationDescrEn, System.Decimal? _gsCodeCurrencyId, 
			System.Decimal? _admAdmissionBandId)
		{
			GsCountryNode newGsCountryNode = new GsCountryNode();
			newGsCountryNode.GsCountryNodeId = _gsCountryNodeId;
			newGsCountryNode.NodeDescrAr = _nodeDescrAr;
			newGsCountryNode.NodeDescrEn = _nodeDescrEn;
			newGsCountryNode.NodePath = _nodePath;
			newGsCountryNode.NodeOrder = _nodeOrder;
			newGsCountryNode.NodeParentId = _nodeParentId;
			newGsCountryNode.NodeLevel = _nodeLevel;
			newGsCountryNode.NodeCode = _nodeCode;
			newGsCountryNode.NodeChildCount = _nodeChildCount;
			newGsCountryNode.GsCodeCNodeNatureId = _gsCodeCNodeNatureId;
			newGsCountryNode.IsNodeLocal = _isNodeLocal;
			newGsCountryNode.IsNodeVisible = _isNodeVisible;
			newGsCountryNode.GccFlg = _gccFlg;
			newGsCountryNode.NationCode = _nationCode;
			newGsCountryNode.NationDescrAr = _nationDescrAr;
			newGsCountryNode.NationDescrEn = _nationDescrEn;
			newGsCountryNode.GsCodeCurrencyId = _gsCodeCurrencyId;
			newGsCountryNode.AdmAdmissionBandId = _admAdmissionBandId;
			return newGsCountryNode;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				this.EntityId.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_COUNTRY_NODE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_COUNTRY_NODE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCountryNodeId
		{
			get { return this.entityData.OriginalGsCountryNodeId; }
			set { this.entityData.OriginalGsCountryNodeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the NodeDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String NodeDescrAr
		{
			get
			{
				return this.entityData.NodeDescrAr; 
			}
			
			set
			{
				if (this.entityData.NodeDescrAr == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeDescrAr, this.entityData.NodeDescrAr);
				this.entityData.NodeDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeDescrAr, this.entityData.NodeDescrAr);
				OnPropertyChanged("NodeDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String NodeDescrEn
		{
			get
			{
				return this.entityData.NodeDescrEn; 
			}
			
			set
			{
				if (this.entityData.NodeDescrEn == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeDescrEn, this.entityData.NodeDescrEn);
				this.entityData.NodeDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeDescrEn, this.entityData.NodeDescrEn);
				OnPropertyChanged("NodeDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodePath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 90)]
		public virtual System.String NodePath
		{
			get
			{
				return this.entityData.NodePath; 
			}
			
			set
			{
				if (this.entityData.NodePath == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodePath, this.entityData.NodePath);
				this.entityData.NodePath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodePath, this.entityData.NodePath);
				OnPropertyChanged("NodePath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NodeOrder
		{
			get
			{
				return this.entityData.NodeOrder; 
			}
			
			set
			{
				if (this.entityData.NodeOrder == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeOrder, this.entityData.NodeOrder);
				this.entityData.NodeOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeOrder, this.entityData.NodeOrder);
				OnPropertyChanged("NodeOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeParentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NodeParentId
		{
			get
			{
				return this.entityData.NodeParentId; 
			}
			
			set
			{
				if (this.entityData.NodeParentId == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeParentId, this.entityData.NodeParentId);
				this.entityData.NodeParentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeParentId, this.entityData.NodeParentId);
				OnPropertyChanged("NodeParentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeLevel property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NodeLevel
		{
			get
			{
				return this.entityData.NodeLevel; 
			}
			
			set
			{
				if (this.entityData.NodeLevel == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeLevel, this.entityData.NodeLevel);
				this.entityData.NodeLevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeLevel, this.entityData.NodeLevel);
				OnPropertyChanged("NodeLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String NodeCode
		{
			get
			{
				return this.entityData.NodeCode; 
			}
			
			set
			{
				if (this.entityData.NodeCode == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeCode, this.entityData.NodeCode);
				this.entityData.NodeCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeCode, this.entityData.NodeCode);
				OnPropertyChanged("NodeCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeChildCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NodeChildCount
		{
			get
			{
				return this.entityData.NodeChildCount; 
			}
			
			set
			{
				if (this.entityData.NodeChildCount == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NodeChildCount, this.entityData.NodeChildCount);
				this.entityData.NodeChildCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NodeChildCount, this.entityData.NodeChildCount);
				OnPropertyChanged("NodeChildCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCNodeNatureId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCNodeNatureId
		{
			get
			{
				return this.entityData.GsCodeCNodeNatureId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCNodeNatureId == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.GsCodeCNodeNatureId, this.entityData.GsCodeCNodeNatureId);
				this.entityData.GsCodeCNodeNatureId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.GsCodeCNodeNatureId, this.entityData.GsCodeCNodeNatureId);
				OnPropertyChanged("GsCodeCNodeNatureId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNodeLocal property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsNodeLocal
		{
			get
			{
				return this.entityData.IsNodeLocal; 
			}
			
			set
			{
				if (this.entityData.IsNodeLocal == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.IsNodeLocal, this.entityData.IsNodeLocal);
				this.entityData.IsNodeLocal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.IsNodeLocal, this.entityData.IsNodeLocal);
				OnPropertyChanged("IsNodeLocal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNodeVisible property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsNodeVisible
		{
			get
			{
				return this.entityData.IsNodeVisible; 
			}
			
			set
			{
				if (this.entityData.IsNodeVisible == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.IsNodeVisible, this.entityData.IsNodeVisible);
				this.entityData.IsNodeVisible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.IsNodeVisible, this.entityData.IsNodeVisible);
				OnPropertyChanged("IsNodeVisible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GccFlg property. 
		///		يعامل معاملة المصرى فى المصروفات similarity_flg=1 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGccFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يعامل معاملة المصرى فى المصروفات similarity_flg=1 "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GccFlg
		{
			get
			{
				return this.entityData.GccFlg; 
			}
			
			set
			{
				if (this.entityData.GccFlg == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.GccFlg, this.entityData.GccFlg);
				this.entityData.GccFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.GccFlg, this.entityData.GccFlg);
				OnPropertyChanged("GccFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationCode property. 
		///		كود الجنسية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"كود الجنسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String NationCode
		{
			get
			{
				return this.entityData.NationCode; 
			}
			
			set
			{
				if (this.entityData.NationCode == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NationCode, this.entityData.NationCode);
				this.entityData.NationCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NationCode, this.entityData.NationCode);
				OnPropertyChanged("NationCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationDescrAr property. 
		///		وصف الجنسية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"وصف الجنسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String NationDescrAr
		{
			get
			{
				return this.entityData.NationDescrAr; 
			}
			
			set
			{
				if (this.entityData.NationDescrAr == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NationDescrAr, this.entityData.NationDescrAr);
				this.entityData.NationDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NationDescrAr, this.entityData.NationDescrAr);
				OnPropertyChanged("NationDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationDescrEn property. 
		///		وصف الجنسية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"وصف الجنسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String NationDescrEn
		{
			get
			{
				return this.entityData.NationDescrEn; 
			}
			
			set
			{
				if (this.entityData.NationDescrEn == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.NationDescrEn, this.entityData.NationDescrEn);
				this.entityData.NationDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.NationDescrEn, this.entityData.NationDescrEn);
				OnPropertyChanged("NationDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		عملة دفع المصروفات الاساسية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عملة دفع المصروفات الاساسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAdmissionBandId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAdmissionBandIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAdmissionBandId
		{
			get
			{
				return this.entityData.AdmAdmissionBandId; 
			}
			
			set
			{
				if (this.entityData.AdmAdmissionBandId == value)
					return;
					
				OnColumnChanging(GsCountryNodeColumn.AdmAdmissionBandId, this.entityData.AdmAdmissionBandId);
				this.entityData.AdmAdmissionBandId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCountryNodeColumn.AdmAdmissionBandId, this.entityData.AdmAdmissionBandId);
				OnPropertyChanged("AdmAdmissionBandId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAdmissionBand"/>.
		/// </summary>
		/// <value>The source AdmAdmissionBand for AdmAdmissionBandId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAdmissionBand AdmAdmissionBandIdSource
      	{
            get { return entityData.AdmAdmissionBandIdSource; }
            set { entityData.AdmAdmissionBandIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCNodeNature"/>.
		/// </summary>
		/// <value>The source GsCodeCNodeNature for GsCodeCNodeNatureId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCNodeNature GsCodeCNodeNatureIdSource
      	{
            get { return entityData.GsCodeCNodeNatureIdSource; }
            set { entityData.GsCodeCNodeNatureIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for NodeParentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode NodeParentIdSource
      	{
            get { return entityData.NodeParentIdSource; }
            set { entityData.NodeParentIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsCdeSchool objects
		///	which are related to this object through the relation FK_GS_CDE_SCHOOL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCdeSchool> GsCdeSchoolCollection
		{
			get { return entityData.GsCdeSchoolCollection; }
			set { entityData.GsCdeSchoolCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgExtMember objects
		///	which are related to this object through the relation FK_PG_EXT_MEMBER_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgExtMember> PgExtMemberCollection
		{
			get { return entityData.PgExtMemberCollection; }
			set { entityData.PgExtMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TrnsStudCarStkr objects
		///	which are related to this object through the relation FK_TRNS_STUD_CAR_STKR_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsStudCarStkr> TrnsStudCarStkrCollection
		{
			get { return entityData.TrnsStudCarStkrCollection; }
			set { entityData.TrnsStudCarStkrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmApplicant objects
		///	which are related to this object through the relation FK_ADM_APPLICANT_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmApplicant> AdmApplicantCollectionGetByGsCountryNodeId
		{
			get { return entityData.AdmApplicantCollectionGetByGsCountryNodeId; }
			set { entityData.AdmApplicantCollectionGetByGsCountryNodeId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCdeUniversities objects
		///	which are related to this object through the relation FK_GS_CDE_UNIVERSITIES_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCdeUniversities> GsCdeUniversitiesCollection
		{
			get { return entityData.GsCdeUniversitiesCollection; }
			set { entityData.GsCdeUniversitiesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdEmployeeQual objects
		///	which are related to this object through the relation FK_ED_EMPLOYEE_QUAL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdEmployeeQual> EdEmployeeQualCollection
		{
			get { return entityData.EdEmployeeQualCollection; }
			set { entityData.EdEmployeeQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AsFacultyInfo objects
		///	which are related to this object through the relation FK_AS_FACULTY_INFO_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AsFacultyInfo> AsFacultyInfoCollection
		{
			get { return entityData.AsFacultyInfoCollection; }
			set { entityData.AsFacultyInfoCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdGuard objects
		///	which are related to this object through the relation FK_ED_GUARD_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdGuard> EdGuardCollection
		{
			get { return entityData.EdGuardCollection; }
			set { entityData.EdGuardCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStud objects
		///	which are related to this object through the relation FK_ED_STUD_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStud> EdStudCollectionGetByGsBirthCountryNodeId
		{
			get { return entityData.EdStudCollectionGetByGsBirthCountryNodeId; }
			set { entityData.EdStudCollectionGetByGsBirthCountryNodeId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TrnsCdeDrvr objects
		///	which are related to this object through the relation FK_TRNS_CDE_DRVR_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsCdeDrvr> TrnsCdeDrvrCollection
		{
			get { return entityData.TrnsCdeDrvrCollection; }
			set { entityData.TrnsCdeDrvrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStud objects
		///	which are related to this object through the relation FK_ED_STUD_GS_COUNTRY_INFO
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStud> EdStudCollectionGetByGsCountryInfoId1
		{
			get { return entityData.EdStudCollectionGetByGsCountryInfoId1; }
			set { entityData.EdStudCollectionGetByGsCountryInfoId1 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPrecondQual objects
		///	which are related to this object through the relation FK_ADM_PRECOND_QUAL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get { return entityData.AdmPrecondQualCollection; }
			set { entityData.AdmPrecondQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgStudConference objects
		///	which are related to this object through the relation FK_PG_STUD_CONFERENCE_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgStudConference> PgStudConferenceCollection
		{
			get { return entityData.PgStudConferenceCollection; }
			set { entityData.PgStudConferenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MltRptDayMission objects
		///	which are related to this object through the relation FK_MLT_RPT_DAY_MISSION_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltRptDayMission> MltRptDayMissionCollection
		{
			get { return entityData.MltRptDayMissionCollection; }
			set { entityData.MltRptDayMissionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TrnsLine objects
		///	which are related to this object through the relation FK_TRNS_LINE_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsLine> TrnsLineCollection
		{
			get { return entityData.TrnsLineCollection; }
			set { entityData.TrnsLineCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudMission objects
		///	which are related to this object through the relation FK_ED_STUD_MISSION_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudMission> EdStudMissionCollection
		{
			get { return entityData.EdStudMissionCollection; }
			set { entityData.EdStudMissionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgStudTravel objects
		///	which are related to this object through the relation FK_PG_STUD_TRAVEL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgStudTravel> PgStudTravelCollection
		{
			get { return entityData.PgStudTravelCollection; }
			set { entityData.PgStudTravelCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudQual objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQual> EdStudQualCollection
		{
			get { return entityData.EdStudQualCollection; }
			set { entityData.EdStudQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCountryNode objects
		///	which are related to this object through the relation FK_GS_COUNTRY_NODE_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCountryNode> GsCountryNodeCollection
		{
			get { return entityData.GsCountryNodeCollection; }
			set { entityData.GsCountryNodeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudFund objects
		///	which are related to this object through the relation FK_FEE_STUD_FUND_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudFund> FeeStudFundCollection
		{
			get { return entityData.FeeStudFundCollection; }
			set { entityData.FeeStudFundCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransReq objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_REQ_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransReq> AdmAppTransReqCollection
		{
			get { return entityData.AdmAppTransReqCollection; }
			set { entityData.AdmAppTransReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmApplicant objects
		///	which are related to this object through the relation FK_ADM_APPLICANT_GS_COUNTRY_NODE_BIRTH
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmApplicant> AdmApplicantCollectionGetByGsBirthCountryNodeId
		{
			get { return entityData.AdmApplicantCollectionGetByGsBirthCountryNodeId; }
			set { entityData.AdmApplicantCollectionGetByGsBirthCountryNodeId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AlmJob objects
		///	which are related to this object through the relation FK_ALM_JOB_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AlmJob> AlmJobCollection
		{
			get { return entityData.AlmJobCollection; }
			set { entityData.AlmJobCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsAddressDtl objects
		///	which are related to this object through the relation FK_GS_ADDRESS_DTL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAddressDtl> GsAddressDtlCollection
		{
			get { return entityData.GsAddressDtlCollection; }
			set { entityData.GsAddressDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccomStudGuestReqDtl objects
		///	which are related to this object through the relation FK_ACCOM_STUD_GUEST_REQ_DTL_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomStudGuestReqDtl> AccomStudGuestReqDtlCollection
		{
			get { return entityData.AccomStudGuestReqDtlCollection; }
			set { entityData.AccomStudGuestReqDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaStfMember objects
		///	which are related to this object through the relation FK_SA_STF_MEMBER_GS_COUNTRY_NODE1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaStfMember> SaStfMemberCollectionGetByGsCountryInfoId
		{
			get { return entityData.SaStfMemberCollectionGetByGsCountryInfoId; }
			set { entityData.SaStfMemberCollectionGetByGsCountryInfoId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsMilitaryOffice objects
		///	which are related to this object through the relation FK_GS_MILITARY_OFFICE_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsMilitaryOffice> GsMilitaryOfficeCollection
		{
			get { return entityData.GsMilitaryOfficeCollection; }
			set { entityData.GsMilitaryOfficeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaStfMember objects
		///	which are related to this object through the relation FK_SA_STF_MEMBER_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaStfMember> SaStfMemberCollectionGetByGsCountryNodeId
		{
			get { return entityData.SaStfMemberCollectionGetByGsCountryNodeId; }
			set { entityData.SaStfMemberCollectionGetByGsCountryNodeId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of TrnsCdeStop objects
		///	which are related to this object through the relation FK_TRNS_CDE_STOP_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<TrnsCdeStop> TrnsCdeStopCollection
		{
			get { return entityData.TrnsCdeStopCollection; }
			set { entityData.TrnsCdeStopCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppWorkExper objects
		///	which are related to this object through the relation FK_ADM_APP_WORK_EXPER_GS_COUNTRY_NODE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppWorkExper> AdmAppWorkExperCollection
		{
			get { return entityData.AdmAppWorkExperCollection; }
			set { entityData.AdmAppWorkExperCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("NodeDescrAr", "Node Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodeDescrAr", "Node Descr Ar", 128));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodeDescrEn", "Node Descr En", 128));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("NodePath", "Node Path"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodePath", "Node Path", 90));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodeCode", "Node Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NationCode", "Nation Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NationDescrAr", "Nation Descr Ar", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NationDescrEn", "Nation Descr En", 64));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_COUNTRY_NODE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_COUNTRY_NODE_ID", "NODE_DESCR_AR", "NODE_DESCR_EN", "NODE_PATH", "NODE_ORDER", "NODE_PARENT_ID", "NODE_LEVEL", "NODE_CODE", "NODE_CHILD_COUNT", "GS_CODE_C_NODE_NATURE_ID", "IS_NODE_LOCAL", "IS_NODE_VISIBLE", "GCC_FLG", "NATION_CODE", "NATION_DESCR_AR", "NATION_DESCR_EN", "GS_CODE_CURRENCY_ID", "ADM_ADMISSION_BAND_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCountryNodeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCountryNode) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCountryNode>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCountryNode);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCountryNode Entity 
		///</summary>
		protected virtual GsCountryNode Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCountryNode copy = new GsCountryNode();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCountryNodeId = this.GsCountryNodeId;
					copy.OriginalGsCountryNodeId = this.OriginalGsCountryNodeId;
				copy.NodeDescrAr = this.NodeDescrAr;
				copy.NodeDescrEn = this.NodeDescrEn;
				copy.NodePath = this.NodePath;
				copy.NodeOrder = this.NodeOrder;
				copy.NodeParentId = this.NodeParentId;
				copy.NodeLevel = this.NodeLevel;
				copy.NodeCode = this.NodeCode;
				copy.NodeChildCount = this.NodeChildCount;
				copy.GsCodeCNodeNatureId = this.GsCodeCNodeNatureId;
				copy.IsNodeLocal = this.IsNodeLocal;
				copy.IsNodeVisible = this.IsNodeVisible;
				copy.GccFlg = this.GccFlg;
				copy.NationCode = this.NationCode;
				copy.NationDescrAr = this.NationDescrAr;
				copy.NationDescrEn = this.NationDescrEn;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.AdmAdmissionBandId = this.AdmAdmissionBandId;
			
			if (this.AdmAdmissionBandIdSource != null && existingCopies.Contains(this.AdmAdmissionBandIdSource))
				copy.AdmAdmissionBandIdSource = existingCopies[this.AdmAdmissionBandIdSource] as AdmAdmissionBand;
			else
				copy.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource, existingCopies) as AdmAdmissionBand;
			if (this.GsCodeCNodeNatureIdSource != null && existingCopies.Contains(this.GsCodeCNodeNatureIdSource))
				copy.GsCodeCNodeNatureIdSource = existingCopies[this.GsCodeCNodeNatureIdSource] as GsCodeCNodeNature;
			else
				copy.GsCodeCNodeNatureIdSource = MakeCopyOf(this.GsCodeCNodeNatureIdSource, existingCopies) as GsCodeCNodeNature;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.NodeParentIdSource != null && existingCopies.Contains(this.NodeParentIdSource))
				copy.NodeParentIdSource = existingCopies[this.NodeParentIdSource] as GsCountryNode;
			else
				copy.NodeParentIdSource = MakeCopyOf(this.NodeParentIdSource, existingCopies) as GsCountryNode;
		
			//deep copy nested objects
			copy.GsCdeSchoolCollection = (TList<GsCdeSchool>) MakeCopyOf(this.GsCdeSchoolCollection, existingCopies); 
			copy.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection, existingCopies); 
			copy.TrnsStudCarStkrCollection = (TList<TrnsStudCarStkr>) MakeCopyOf(this.TrnsStudCarStkrCollection, existingCopies); 
			copy.AdmApplicantCollectionGetByGsCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsCountryNodeId, existingCopies); 
			copy.GsCdeUniversitiesCollection = (TList<GsCdeUniversities>) MakeCopyOf(this.GsCdeUniversitiesCollection, existingCopies); 
			copy.EdEmployeeQualCollection = (TList<EdEmployeeQual>) MakeCopyOf(this.EdEmployeeQualCollection, existingCopies); 
			copy.AsFacultyInfoCollection = (TList<AsFacultyInfo>) MakeCopyOf(this.AsFacultyInfoCollection, existingCopies); 
			copy.EdGuardCollection = (TList<EdGuard>) MakeCopyOf(this.EdGuardCollection, existingCopies); 
			copy.EdStudCollectionGetByGsBirthCountryNodeId = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsBirthCountryNodeId, existingCopies); 
			copy.TrnsCdeDrvrCollection = (TList<TrnsCdeDrvr>) MakeCopyOf(this.TrnsCdeDrvrCollection, existingCopies); 
			copy.EdStudCollectionGetByGsCountryInfoId1 = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsCountryInfoId1, existingCopies); 
			copy.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			copy.PgStudConferenceCollection = (TList<PgStudConference>) MakeCopyOf(this.PgStudConferenceCollection, existingCopies); 
			copy.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection, existingCopies); 
			copy.TrnsLineCollection = (TList<TrnsLine>) MakeCopyOf(this.TrnsLineCollection, existingCopies); 
			copy.EdStudMissionCollection = (TList<EdStudMission>) MakeCopyOf(this.EdStudMissionCollection, existingCopies); 
			copy.PgStudTravelCollection = (TList<PgStudTravel>) MakeCopyOf(this.PgStudTravelCollection, existingCopies); 
			copy.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			copy.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection, existingCopies); 
			copy.FeeStudFundCollection = (TList<FeeStudFund>) MakeCopyOf(this.FeeStudFundCollection, existingCopies); 
			copy.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection, existingCopies); 
			copy.AdmApplicantCollectionGetByGsBirthCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsBirthCountryNodeId, existingCopies); 
			copy.AlmJobCollection = (TList<AlmJob>) MakeCopyOf(this.AlmJobCollection, existingCopies); 
			copy.GsAddressDtlCollection = (TList<GsAddressDtl>) MakeCopyOf(this.GsAddressDtlCollection, existingCopies); 
			copy.AccomStudGuestReqDtlCollection = (TList<AccomStudGuestReqDtl>) MakeCopyOf(this.AccomStudGuestReqDtlCollection, existingCopies); 
			copy.SaStfMemberCollectionGetByGsCountryInfoId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryInfoId, existingCopies); 
			copy.GsMilitaryOfficeCollection = (TList<GsMilitaryOffice>) MakeCopyOf(this.GsMilitaryOfficeCollection, existingCopies); 
			copy.SaStfMemberCollectionGetByGsCountryNodeId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryNodeId, existingCopies); 
			copy.TrnsCdeStopCollection = (TList<TrnsCdeStop>) MakeCopyOf(this.TrnsCdeStopCollection, existingCopies); 
			copy.AdmAppWorkExperCollection = (TList<AdmAppWorkExper>) MakeCopyOf(this.AdmAppWorkExperCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCountryNode Entity 
		///</summary>
		public virtual GsCountryNode Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCountryNode Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCountryNode DeepCopy()
		{
			return EntityHelper.Clone<GsCountryNode>(this as GsCountryNode);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCountryNodeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCountryNodeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCountryNodeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCountryNodeColumn column)
		{
			switch(column)
			{
					case GsCountryNodeColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case GsCountryNodeColumn.NodeDescrAr:
					return entityData.NodeDescrAr != _originalData.NodeDescrAr;
					case GsCountryNodeColumn.NodeDescrEn:
					return entityData.NodeDescrEn != _originalData.NodeDescrEn;
					case GsCountryNodeColumn.NodePath:
					return entityData.NodePath != _originalData.NodePath;
					case GsCountryNodeColumn.NodeOrder:
					return entityData.NodeOrder != _originalData.NodeOrder;
					case GsCountryNodeColumn.NodeParentId:
					return entityData.NodeParentId != _originalData.NodeParentId;
					case GsCountryNodeColumn.NodeLevel:
					return entityData.NodeLevel != _originalData.NodeLevel;
					case GsCountryNodeColumn.NodeCode:
					return entityData.NodeCode != _originalData.NodeCode;
					case GsCountryNodeColumn.NodeChildCount:
					return entityData.NodeChildCount != _originalData.NodeChildCount;
					case GsCountryNodeColumn.GsCodeCNodeNatureId:
					return entityData.GsCodeCNodeNatureId != _originalData.GsCodeCNodeNatureId;
					case GsCountryNodeColumn.IsNodeLocal:
					return entityData.IsNodeLocal != _originalData.IsNodeLocal;
					case GsCountryNodeColumn.IsNodeVisible:
					return entityData.IsNodeVisible != _originalData.IsNodeVisible;
					case GsCountryNodeColumn.GccFlg:
					return entityData.GccFlg != _originalData.GccFlg;
					case GsCountryNodeColumn.NationCode:
					return entityData.NationCode != _originalData.NationCode;
					case GsCountryNodeColumn.NationDescrAr:
					return entityData.NationDescrAr != _originalData.NationDescrAr;
					case GsCountryNodeColumn.NationDescrEn:
					return entityData.NationDescrEn != _originalData.NationDescrEn;
					case GsCountryNodeColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case GsCountryNodeColumn.AdmAdmissionBandId:
					return entityData.AdmAdmissionBandId != _originalData.AdmAdmissionBandId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCountryNodeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.NodeDescrAr != _originalData.NodeDescrAr;
			result = result || entityData.NodeDescrEn != _originalData.NodeDescrEn;
			result = result || entityData.NodePath != _originalData.NodePath;
			result = result || entityData.NodeOrder != _originalData.NodeOrder;
			result = result || entityData.NodeParentId != _originalData.NodeParentId;
			result = result || entityData.NodeLevel != _originalData.NodeLevel;
			result = result || entityData.NodeCode != _originalData.NodeCode;
			result = result || entityData.NodeChildCount != _originalData.NodeChildCount;
			result = result || entityData.GsCodeCNodeNatureId != _originalData.GsCodeCNodeNatureId;
			result = result || entityData.IsNodeLocal != _originalData.IsNodeLocal;
			result = result || entityData.IsNodeVisible != _originalData.IsNodeVisible;
			result = result || entityData.GccFlg != _originalData.GccFlg;
			result = result || entityData.NationCode != _originalData.NationCode;
			result = result || entityData.NationDescrAr != _originalData.NationDescrAr;
			result = result || entityData.NationDescrEn != _originalData.NationDescrEn;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.AdmAdmissionBandId != _originalData.AdmAdmissionBandId;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCountryNode Entity with the original data.
		///</summary>
		public GsCountryNode GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCountryNode(
				_originalData.GsCountryNodeId,
				_originalData.NodeDescrAr,
				_originalData.NodeDescrEn,
				_originalData.NodePath,
				_originalData.NodeOrder,
				_originalData.NodeParentId,
				_originalData.NodeLevel,
				_originalData.NodeCode,
				_originalData.NodeChildCount,
				_originalData.GsCodeCNodeNatureId,
				_originalData.IsNodeLocal,
				_originalData.IsNodeVisible,
				_originalData.GccFlg,
				_originalData.NationCode,
				_originalData.NationDescrAr,
				_originalData.NationDescrEn,
				_originalData.GsCodeCurrencyId,
				_originalData.AdmAdmissionBandId
				);
				
			return (GsCountryNode)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCountryNodeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCountryNodeBase)
				return ValueEquals(this, (GsCountryNodeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCountryNodeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCountryNodeId.GetHashCode() ^ 
					this.NodeDescrAr.GetHashCode() ^ 
					((this.NodeDescrEn == null) ? string.Empty : this.NodeDescrEn.ToString()).GetHashCode() ^ 
					this.NodePath.GetHashCode() ^ 
					this.NodeOrder.GetHashCode() ^ 
					this.NodeParentId.GetHashCode() ^ 
					this.NodeLevel.GetHashCode() ^ 
					((this.NodeCode == null) ? string.Empty : this.NodeCode.ToString()).GetHashCode() ^ 
					this.NodeChildCount.GetHashCode() ^ 
					this.GsCodeCNodeNatureId.GetHashCode() ^ 
					this.IsNodeLocal.GetHashCode() ^ 
					this.IsNodeVisible.GetHashCode() ^ 
					((this.GccFlg == null) ? string.Empty : this.GccFlg.ToString()).GetHashCode() ^ 
					((this.NationCode == null) ? string.Empty : this.NationCode.ToString()).GetHashCode() ^ 
					((this.NationDescrAr == null) ? string.Empty : this.NationDescrAr.ToString()).GetHashCode() ^ 
					((this.NationDescrEn == null) ? string.Empty : this.NationDescrEn.ToString()).GetHashCode() ^ 
					((this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString()).GetHashCode() ^ 
					((this.AdmAdmissionBandId == null) ? string.Empty : this.AdmAdmissionBandId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCountryNodeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCountryNodeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCountryNodeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCountryNodeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCountryNodeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCountryNodeBase Object1, GsCountryNodeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
				equal = false;
			if (Object1.NodeDescrAr != Object2.NodeDescrAr)
				equal = false;
			if ( Object1.NodeDescrEn != null && Object2.NodeDescrEn != null )
			{
				if (Object1.NodeDescrEn != Object2.NodeDescrEn)
					equal = false;
			}
			else if (Object1.NodeDescrEn == null ^ Object2.NodeDescrEn == null )
			{
				equal = false;
			}
			if (Object1.NodePath != Object2.NodePath)
				equal = false;
			if (Object1.NodeOrder != Object2.NodeOrder)
				equal = false;
			if (Object1.NodeParentId != Object2.NodeParentId)
				equal = false;
			if (Object1.NodeLevel != Object2.NodeLevel)
				equal = false;
			if ( Object1.NodeCode != null && Object2.NodeCode != null )
			{
				if (Object1.NodeCode != Object2.NodeCode)
					equal = false;
			}
			else if (Object1.NodeCode == null ^ Object2.NodeCode == null )
			{
				equal = false;
			}
			if (Object1.NodeChildCount != Object2.NodeChildCount)
				equal = false;
			if (Object1.GsCodeCNodeNatureId != Object2.GsCodeCNodeNatureId)
				equal = false;
			if (Object1.IsNodeLocal != Object2.IsNodeLocal)
				equal = false;
			if (Object1.IsNodeVisible != Object2.IsNodeVisible)
				equal = false;
			if ( Object1.GccFlg != null && Object2.GccFlg != null )
			{
				if (Object1.GccFlg != Object2.GccFlg)
					equal = false;
			}
			else if (Object1.GccFlg == null ^ Object2.GccFlg == null )
			{
				equal = false;
			}
			if ( Object1.NationCode != null && Object2.NationCode != null )
			{
				if (Object1.NationCode != Object2.NationCode)
					equal = false;
			}
			else if (Object1.NationCode == null ^ Object2.NationCode == null )
			{
				equal = false;
			}
			if ( Object1.NationDescrAr != null && Object2.NationDescrAr != null )
			{
				if (Object1.NationDescrAr != Object2.NationDescrAr)
					equal = false;
			}
			else if (Object1.NationDescrAr == null ^ Object2.NationDescrAr == null )
			{
				equal = false;
			}
			if ( Object1.NationDescrEn != null && Object2.NationDescrEn != null )
			{
				if (Object1.NationDescrEn != Object2.NationDescrEn)
					equal = false;
			}
			else if (Object1.NationDescrEn == null ^ Object2.NationDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeCurrencyId != null && Object2.GsCodeCurrencyId != null )
			{
				if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
					equal = false;
			}
			else if (Object1.GsCodeCurrencyId == null ^ Object2.GsCodeCurrencyId == null )
			{
				equal = false;
			}
			if ( Object1.AdmAdmissionBandId != null && Object2.AdmAdmissionBandId != null )
			{
				if (Object1.AdmAdmissionBandId != Object2.AdmAdmissionBandId)
					equal = false;
			}
			else if (Object1.AdmAdmissionBandId == null ^ Object2.AdmAdmissionBandId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCountryNodeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCountryNodeComparer GetComparer()
        {
            return new GsCountryNodeComparer();
        }
        */

        // Comparer delegates back to GsCountryNode
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCountryNode rhs, GsCountryNodeColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCountryNodeColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.CompareTo(rhs.GsCountryNodeId);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeDescrAr:
            		return this.NodeDescrAr.CompareTo(rhs.NodeDescrAr);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeDescrEn:
            		return this.NodeDescrEn.CompareTo(rhs.NodeDescrEn);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodePath:
            		return this.NodePath.CompareTo(rhs.NodePath);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeOrder:
            		return this.NodeOrder.CompareTo(rhs.NodeOrder);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeParentId:
            		return this.NodeParentId.CompareTo(rhs.NodeParentId);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeLevel:
            		return this.NodeLevel.CompareTo(rhs.NodeLevel);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeCode:
            		return this.NodeCode.CompareTo(rhs.NodeCode);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NodeChildCount:
            		return this.NodeChildCount.CompareTo(rhs.NodeChildCount);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.GsCodeCNodeNatureId:
            		return this.GsCodeCNodeNatureId.CompareTo(rhs.GsCodeCNodeNatureId);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.IsNodeLocal:
            		return this.IsNodeLocal.CompareTo(rhs.IsNodeLocal);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.IsNodeVisible:
            		return this.IsNodeVisible.CompareTo(rhs.IsNodeVisible);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.GccFlg:
            		return this.GccFlg.Value.CompareTo(rhs.GccFlg.Value);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NationCode:
            		return this.NationCode.CompareTo(rhs.NationCode);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NationDescrAr:
            		return this.NationDescrAr.CompareTo(rhs.NationDescrAr);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.NationDescrEn:
            		return this.NationDescrEn.CompareTo(rhs.NationDescrEn);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.Value.CompareTo(rhs.GsCodeCurrencyId.Value);
            		
            		                 
            	
            	
            	case GsCountryNodeColumn.AdmAdmissionBandId:
            		return this.AdmAdmissionBandId.Value.CompareTo(rhs.AdmAdmissionBandId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCountryNodeKey> Members
		
		// member variable for the EntityId property
		private GsCountryNodeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCountryNodeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCountryNodeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCountryNode")
					.Append("|").Append( this.GsCountryNodeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- GsCountryNodeId: {0}{18}- NodeDescrAr: {1}{18}- NodeDescrEn: {2}{18}- NodePath: {3}{18}- NodeOrder: {4}{18}- NodeParentId: {5}{18}- NodeLevel: {6}{18}- NodeCode: {7}{18}- NodeChildCount: {8}{18}- GsCodeCNodeNatureId: {9}{18}- IsNodeLocal: {10}{18}- IsNodeVisible: {11}{18}- GccFlg: {12}{18}- NationCode: {13}{18}- NationDescrAr: {14}{18}- NationDescrEn: {15}{18}- GsCodeCurrencyId: {16}{18}- AdmAdmissionBandId: {17}{18}{20}", 
				this.GsCountryNodeId,
				this.NodeDescrAr,
				(this.NodeDescrEn == null) ? string.Empty : this.NodeDescrEn.ToString(),
				this.NodePath,
				this.NodeOrder,
				this.NodeParentId,
				this.NodeLevel,
				(this.NodeCode == null) ? string.Empty : this.NodeCode.ToString(),
				this.NodeChildCount,
				this.GsCodeCNodeNatureId,
				this.IsNodeLocal,
				this.IsNodeVisible,
				(this.GccFlg == null) ? string.Empty : this.GccFlg.ToString(),
				(this.NationCode == null) ? string.Empty : this.NationCode.ToString(),
				(this.NationDescrAr == null) ? string.Empty : this.NationDescrAr.ToString(),
				(this.NationDescrEn == null) ? string.Empty : this.NationDescrEn.ToString(),
				(this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString(),
				(this.AdmAdmissionBandId == null) ? string.Empty : this.AdmAdmissionBandId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_COUNTRY_NODE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCountryNodeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_COUNTRY_NODE"</remarks>
		public System.Decimal GsCountryNodeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCountryNodeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// NODE_DESCR_AR : 
		/// </summary>
		public System.String		  NodeDescrAr = string.Empty;
		
		/// <summary>
		/// NODE_DESCR_EN : 
		/// </summary>
		public System.String		  NodeDescrEn = null;
		
		/// <summary>
		/// NODE_PATH : 
		/// </summary>
		public System.String		  NodePath = string.Empty;
		
		/// <summary>
		/// NODE_ORDER : 
		/// </summary>
		public System.Decimal		  NodeOrder = 0.0m;
		
		/// <summary>
		/// NODE_PARENT_ID : 
		/// </summary>
		public System.Decimal		  NodeParentId = 0.0m;
		
		/// <summary>
		/// NODE_LEVEL : 
		/// </summary>
		public System.Decimal		  NodeLevel = 0.0m;
		
		/// <summary>
		/// NODE_CODE : 
		/// </summary>
		public System.String		  NodeCode = null;
		
		/// <summary>
		/// NODE_CHILD_COUNT : 
		/// </summary>
		public System.Decimal		  NodeChildCount = 0.0m;
		
		/// <summary>
		/// GS_CODE_C_NODE_NATURE_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCNodeNatureId = 0.0m;
		
		/// <summary>
		/// IS_NODE_LOCAL : 
		/// </summary>
		public System.Decimal		  IsNodeLocal = 0.0m;
		
		/// <summary>
		/// IS_NODE_VISIBLE : 
		/// </summary>
		public System.Decimal		  IsNodeVisible = 0.0m;
		
		/// <summary>
		/// GCC_FLG : يعامل معاملة المصرى فى المصروفات similarity_flg=1 
		/// </summary>
		public System.Decimal?		  GccFlg = null;
		
		/// <summary>
		/// NATION_CODE : كود الجنسية
		/// </summary>
		public System.String		  NationCode = null;
		
		/// <summary>
		/// NATION_DESCR_AR : وصف الجنسية
		/// </summary>
		public System.String		  NationDescrAr = null;
		
		/// <summary>
		/// NATION_DESCR_EN : وصف الجنسية
		/// </summary>
		public System.String		  NationDescrEn = null;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : عملة دفع المصروفات الاساسية
		/// </summary>
		public System.Decimal?		  GsCodeCurrencyId = null;
		
		/// <summary>
		/// ADM_ADMISSION_BAND_ID : 
		/// </summary>
		public System.Decimal?		  AdmAdmissionBandId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAdmissionBand _admAdmissionBandIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAdmissionBand"/>.
		/// </summary>
		/// <value>The source AdmAdmissionBand for AdmAdmissionBandId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAdmissionBand AdmAdmissionBandIdSource
      	{
            get { return this._admAdmissionBandIdSource; }
            set { this._admAdmissionBandIdSource = value; }
      	}
		private GsCodeCNodeNature _gsCodeCnodeNatureIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCNodeNature"/>.
		/// </summary>
		/// <value>The source GsCodeCNodeNature for GsCodeCNodeNatureId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCNodeNature GsCodeCNodeNatureIdSource
      	{
            get { return this._gsCodeCnodeNatureIdSource; }
            set { this._gsCodeCnodeNatureIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private GsCountryNode _nodeParentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for NodeParentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode NodeParentIdSource
      	{
            get { return this._nodeParentIdSource; }
            set { this._nodeParentIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsCdeSchoolCollection
		
		private TList<GsCdeSchool> _gsCdeSchoolGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCdeSchoolGsCountryNodeId
		/// </summary>
		
		public TList<GsCdeSchool> GsCdeSchoolCollection
		{
			get
			{
				if (_gsCdeSchoolGsCountryNodeId == null)
				{
				_gsCdeSchoolGsCountryNodeId = new TList<GsCdeSchool>();
				}
	
				return _gsCdeSchoolGsCountryNodeId;
			}
			set { _gsCdeSchoolGsCountryNodeId = value; }
		}
		
		#endregion

		#region PgExtMemberCollection
		
		private TList<PgExtMember> _pgExtMemberGsCountryInfoId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgExtMemberGsCountryInfoId
		/// </summary>
		
		public TList<PgExtMember> PgExtMemberCollection
		{
			get
			{
				if (_pgExtMemberGsCountryInfoId == null)
				{
				_pgExtMemberGsCountryInfoId = new TList<PgExtMember>();
				}
	
				return _pgExtMemberGsCountryInfoId;
			}
			set { _pgExtMemberGsCountryInfoId = value; }
		}
		
		#endregion

		#region TrnsStudCarStkrCollection
		
		private TList<TrnsStudCarStkr> _trnsStudCarStkrGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsStudCarStkrGsCountryNodeId
		/// </summary>
		
		public TList<TrnsStudCarStkr> TrnsStudCarStkrCollection
		{
			get
			{
				if (_trnsStudCarStkrGsCountryNodeId == null)
				{
				_trnsStudCarStkrGsCountryNodeId = new TList<TrnsStudCarStkr>();
				}
	
				return _trnsStudCarStkrGsCountryNodeId;
			}
			set { _trnsStudCarStkrGsCountryNodeId = value; }
		}
		
		#endregion

		#region AdmApplicantCollectionGetByGsCountryNodeId
		
		private TList<AdmApplicant> _admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId
		/// </summary>
		
		public TList<AdmApplicant> AdmApplicantCollectionGetByGsCountryNodeId
		{
			get
			{
				if (_admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId == null)
				{
				_admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId = new TList<AdmApplicant>();
				}
	
				return _admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId;
			}
			set { _admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId = value; }
		}
		
		#endregion

		#region GsCdeUniversitiesCollection
		
		private TList<GsCdeUniversities> _gsCdeUniversitiesGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCdeUniversitiesGsCountryNodeId
		/// </summary>
		
		public TList<GsCdeUniversities> GsCdeUniversitiesCollection
		{
			get
			{
				if (_gsCdeUniversitiesGsCountryNodeId == null)
				{
				_gsCdeUniversitiesGsCountryNodeId = new TList<GsCdeUniversities>();
				}
	
				return _gsCdeUniversitiesGsCountryNodeId;
			}
			set { _gsCdeUniversitiesGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdEmployeeQualCollection
		
		private TList<EdEmployeeQual> _edEmployeeQualGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edEmployeeQualGsCountryNodeId
		/// </summary>
		
		public TList<EdEmployeeQual> EdEmployeeQualCollection
		{
			get
			{
				if (_edEmployeeQualGsCountryNodeId == null)
				{
				_edEmployeeQualGsCountryNodeId = new TList<EdEmployeeQual>();
				}
	
				return _edEmployeeQualGsCountryNodeId;
			}
			set { _edEmployeeQualGsCountryNodeId = value; }
		}
		
		#endregion

		#region AsFacultyInfoCollection
		
		private TList<AsFacultyInfo> _asFacultyInfoGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _asFacultyInfoGsCountryNodeId
		/// </summary>
		
		public TList<AsFacultyInfo> AsFacultyInfoCollection
		{
			get
			{
				if (_asFacultyInfoGsCountryNodeId == null)
				{
				_asFacultyInfoGsCountryNodeId = new TList<AsFacultyInfo>();
				}
	
				return _asFacultyInfoGsCountryNodeId;
			}
			set { _asFacultyInfoGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdGuardCollection
		
		private TList<EdGuard> _edGuardGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edGuardGsCountryNodeId
		/// </summary>
		
		public TList<EdGuard> EdGuardCollection
		{
			get
			{
				if (_edGuardGsCountryNodeId == null)
				{
				_edGuardGsCountryNodeId = new TList<EdGuard>();
				}
	
				return _edGuardGsCountryNodeId;
			}
			set { _edGuardGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdStudCollectionGetByGsBirthCountryNodeId
		
		private TList<EdStud> _edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId
		/// </summary>
		
		public TList<EdStud> EdStudCollectionGetByGsBirthCountryNodeId
		{
			get
			{
				if (_edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId == null)
				{
				_edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId = new TList<EdStud>();
				}
	
				return _edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId;
			}
			set { _edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId = value; }
		}
		
		#endregion

		#region TrnsCdeDrvrCollection
		
		private TList<TrnsCdeDrvr> _trnsCdeDrvrGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsCdeDrvrGsCountryNodeId
		/// </summary>
		
		public TList<TrnsCdeDrvr> TrnsCdeDrvrCollection
		{
			get
			{
				if (_trnsCdeDrvrGsCountryNodeId == null)
				{
				_trnsCdeDrvrGsCountryNodeId = new TList<TrnsCdeDrvr>();
				}
	
				return _trnsCdeDrvrGsCountryNodeId;
			}
			set { _trnsCdeDrvrGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdStudCollectionGetByGsCountryInfoId1
		
		private TList<EdStud> _edStudGsBirthCountryNodeIdGetByGsCountryInfoId1;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGsBirthCountryNodeIdGetByGsCountryInfoId1
		/// </summary>
		
		public TList<EdStud> EdStudCollectionGetByGsCountryInfoId1
		{
			get
			{
				if (_edStudGsBirthCountryNodeIdGetByGsCountryInfoId1 == null)
				{
				_edStudGsBirthCountryNodeIdGetByGsCountryInfoId1 = new TList<EdStud>();
				}
	
				return _edStudGsBirthCountryNodeIdGetByGsCountryInfoId1;
			}
			set { _edStudGsBirthCountryNodeIdGetByGsCountryInfoId1 = value; }
		}
		
		#endregion

		#region AdmPrecondQualCollection
		
		private TList<AdmPrecondQual> _admPrecondQualGsCountryNodeInfoId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPrecondQualGsCountryNodeInfoId
		/// </summary>
		
		public TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get
			{
				if (_admPrecondQualGsCountryNodeInfoId == null)
				{
				_admPrecondQualGsCountryNodeInfoId = new TList<AdmPrecondQual>();
				}
	
				return _admPrecondQualGsCountryNodeInfoId;
			}
			set { _admPrecondQualGsCountryNodeInfoId = value; }
		}
		
		#endregion

		#region PgStudConferenceCollection
		
		private TList<PgStudConference> _pgStudConferenceGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgStudConferenceGsCountryNodeId
		/// </summary>
		
		public TList<PgStudConference> PgStudConferenceCollection
		{
			get
			{
				if (_pgStudConferenceGsCountryNodeId == null)
				{
				_pgStudConferenceGsCountryNodeId = new TList<PgStudConference>();
				}
	
				return _pgStudConferenceGsCountryNodeId;
			}
			set { _pgStudConferenceGsCountryNodeId = value; }
		}
		
		#endregion

		#region MltRptDayMissionCollection
		
		private TList<MltRptDayMission> _mltRptDayMissionGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltRptDayMissionGsCountryNodeId
		/// </summary>
		
		public TList<MltRptDayMission> MltRptDayMissionCollection
		{
			get
			{
				if (_mltRptDayMissionGsCountryNodeId == null)
				{
				_mltRptDayMissionGsCountryNodeId = new TList<MltRptDayMission>();
				}
	
				return _mltRptDayMissionGsCountryNodeId;
			}
			set { _mltRptDayMissionGsCountryNodeId = value; }
		}
		
		#endregion

		#region TrnsLineCollection
		
		private TList<TrnsLine> _trnsLineGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsLineGsCountryNodeId
		/// </summary>
		
		public TList<TrnsLine> TrnsLineCollection
		{
			get
			{
				if (_trnsLineGsCountryNodeId == null)
				{
				_trnsLineGsCountryNodeId = new TList<TrnsLine>();
				}
	
				return _trnsLineGsCountryNodeId;
			}
			set { _trnsLineGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdStudMissionCollection
		
		private TList<EdStudMission> _edStudMissionGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudMissionGsCountryNodeId
		/// </summary>
		
		public TList<EdStudMission> EdStudMissionCollection
		{
			get
			{
				if (_edStudMissionGsCountryNodeId == null)
				{
				_edStudMissionGsCountryNodeId = new TList<EdStudMission>();
				}
	
				return _edStudMissionGsCountryNodeId;
			}
			set { _edStudMissionGsCountryNodeId = value; }
		}
		
		#endregion

		#region PgStudTravelCollection
		
		private TList<PgStudTravel> _pgStudTravelGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgStudTravelGsCountryNodeId
		/// </summary>
		
		public TList<PgStudTravel> PgStudTravelCollection
		{
			get
			{
				if (_pgStudTravelGsCountryNodeId == null)
				{
				_pgStudTravelGsCountryNodeId = new TList<PgStudTravel>();
				}
	
				return _pgStudTravelGsCountryNodeId;
			}
			set { _pgStudTravelGsCountryNodeId = value; }
		}
		
		#endregion

		#region EdStudQualCollection
		
		private TList<EdStudQual> _edStudQualGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualGsCountryNodeId
		/// </summary>
		
		public TList<EdStudQual> EdStudQualCollection
		{
			get
			{
				if (_edStudQualGsCountryNodeId == null)
				{
				_edStudQualGsCountryNodeId = new TList<EdStudQual>();
				}
	
				return _edStudQualGsCountryNodeId;
			}
			set { _edStudQualGsCountryNodeId = value; }
		}
		
		#endregion

		#region GsCountryNodeCollection
		
		private TList<GsCountryNode> _gsCountryNodeNodeParentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCountryNodeNodeParentId
		/// </summary>
		
		public TList<GsCountryNode> GsCountryNodeCollection
		{
			get
			{
				if (_gsCountryNodeNodeParentId == null)
				{
				_gsCountryNodeNodeParentId = new TList<GsCountryNode>();
				}
	
				return _gsCountryNodeNodeParentId;
			}
			set { _gsCountryNodeNodeParentId = value; }
		}
		
		#endregion

		#region FeeStudFundCollection
		
		private TList<FeeStudFund> _feeStudFundGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudFundGsCountryNodeId
		/// </summary>
		
		public TList<FeeStudFund> FeeStudFundCollection
		{
			get
			{
				if (_feeStudFundGsCountryNodeId == null)
				{
				_feeStudFundGsCountryNodeId = new TList<FeeStudFund>();
				}
	
				return _feeStudFundGsCountryNodeId;
			}
			set { _feeStudFundGsCountryNodeId = value; }
		}
		
		#endregion

		#region AdmAppTransReqCollection
		
		private TList<AdmAppTransReq> _admAppTransReqGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransReqGsCountryNodeId
		/// </summary>
		
		public TList<AdmAppTransReq> AdmAppTransReqCollection
		{
			get
			{
				if (_admAppTransReqGsCountryNodeId == null)
				{
				_admAppTransReqGsCountryNodeId = new TList<AdmAppTransReq>();
				}
	
				return _admAppTransReqGsCountryNodeId;
			}
			set { _admAppTransReqGsCountryNodeId = value; }
		}
		
		#endregion

		#region AdmApplicantCollectionGetByGsBirthCountryNodeId
		
		private TList<AdmApplicant> _admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId
		/// </summary>
		
		public TList<AdmApplicant> AdmApplicantCollectionGetByGsBirthCountryNodeId
		{
			get
			{
				if (_admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId == null)
				{
				_admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId = new TList<AdmApplicant>();
				}
	
				return _admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId;
			}
			set { _admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId = value; }
		}
		
		#endregion

		#region AlmJobCollection
		
		private TList<AlmJob> _almJobGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _almJobGsCountryNodeId
		/// </summary>
		
		public TList<AlmJob> AlmJobCollection
		{
			get
			{
				if (_almJobGsCountryNodeId == null)
				{
				_almJobGsCountryNodeId = new TList<AlmJob>();
				}
	
				return _almJobGsCountryNodeId;
			}
			set { _almJobGsCountryNodeId = value; }
		}
		
		#endregion

		#region GsAddressDtlCollection
		
		private TList<GsAddressDtl> _gsAddressDtlGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAddressDtlGsCountryNodeId
		/// </summary>
		
		public TList<GsAddressDtl> GsAddressDtlCollection
		{
			get
			{
				if (_gsAddressDtlGsCountryNodeId == null)
				{
				_gsAddressDtlGsCountryNodeId = new TList<GsAddressDtl>();
				}
	
				return _gsAddressDtlGsCountryNodeId;
			}
			set { _gsAddressDtlGsCountryNodeId = value; }
		}
		
		#endregion

		#region AccomStudGuestReqDtlCollection
		
		private TList<AccomStudGuestReqDtl> _accomStudGuestReqDtlGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomStudGuestReqDtlGsCountryNodeId
		/// </summary>
		
		public TList<AccomStudGuestReqDtl> AccomStudGuestReqDtlCollection
		{
			get
			{
				if (_accomStudGuestReqDtlGsCountryNodeId == null)
				{
				_accomStudGuestReqDtlGsCountryNodeId = new TList<AccomStudGuestReqDtl>();
				}
	
				return _accomStudGuestReqDtlGsCountryNodeId;
			}
			set { _accomStudGuestReqDtlGsCountryNodeId = value; }
		}
		
		#endregion

		#region SaStfMemberCollectionGetByGsCountryInfoId
		
		private TList<SaStfMember> _saStfMemberGsCountryInfoIdGetByGsCountryInfoId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saStfMemberGsCountryInfoIdGetByGsCountryInfoId
		/// </summary>
		
		public TList<SaStfMember> SaStfMemberCollectionGetByGsCountryInfoId
		{
			get
			{
				if (_saStfMemberGsCountryInfoIdGetByGsCountryInfoId == null)
				{
				_saStfMemberGsCountryInfoIdGetByGsCountryInfoId = new TList<SaStfMember>();
				}
	
				return _saStfMemberGsCountryInfoIdGetByGsCountryInfoId;
			}
			set { _saStfMemberGsCountryInfoIdGetByGsCountryInfoId = value; }
		}
		
		#endregion

		#region GsMilitaryOfficeCollection
		
		private TList<GsMilitaryOffice> _gsMilitaryOfficeGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsMilitaryOfficeGsCountryNodeId
		/// </summary>
		
		public TList<GsMilitaryOffice> GsMilitaryOfficeCollection
		{
			get
			{
				if (_gsMilitaryOfficeGsCountryNodeId == null)
				{
				_gsMilitaryOfficeGsCountryNodeId = new TList<GsMilitaryOffice>();
				}
	
				return _gsMilitaryOfficeGsCountryNodeId;
			}
			set { _gsMilitaryOfficeGsCountryNodeId = value; }
		}
		
		#endregion

		#region SaStfMemberCollectionGetByGsCountryNodeId
		
		private TList<SaStfMember> _saStfMemberGsCountryInfoIdGetByGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saStfMemberGsCountryInfoIdGetByGsCountryNodeId
		/// </summary>
		
		public TList<SaStfMember> SaStfMemberCollectionGetByGsCountryNodeId
		{
			get
			{
				if (_saStfMemberGsCountryInfoIdGetByGsCountryNodeId == null)
				{
				_saStfMemberGsCountryInfoIdGetByGsCountryNodeId = new TList<SaStfMember>();
				}
	
				return _saStfMemberGsCountryInfoIdGetByGsCountryNodeId;
			}
			set { _saStfMemberGsCountryInfoIdGetByGsCountryNodeId = value; }
		}
		
		#endregion

		#region TrnsCdeStopCollection
		
		private TList<TrnsCdeStop> _trnsCdeStopGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _trnsCdeStopGsCountryNodeId
		/// </summary>
		
		public TList<TrnsCdeStop> TrnsCdeStopCollection
		{
			get
			{
				if (_trnsCdeStopGsCountryNodeId == null)
				{
				_trnsCdeStopGsCountryNodeId = new TList<TrnsCdeStop>();
				}
	
				return _trnsCdeStopGsCountryNodeId;
			}
			set { _trnsCdeStopGsCountryNodeId = value; }
		}
		
		#endregion

		#region AdmAppWorkExperCollection
		
		private TList<AdmAppWorkExper> _admAppWorkExperGsCountryNodeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppWorkExperGsCountryNodeId
		/// </summary>
		
		public TList<AdmAppWorkExper> AdmAppWorkExperCollection
		{
			get
			{
				if (_admAppWorkExperGsCountryNodeId == null)
				{
				_admAppWorkExperGsCountryNodeId = new TList<AdmAppWorkExper>();
				}
	
				return _admAppWorkExperGsCountryNodeId;
			}
			set { _admAppWorkExperGsCountryNodeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCountryNodeEntityData _tmp = new GsCountryNodeEntityData();
						
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.OriginalGsCountryNodeId = this.OriginalGsCountryNodeId;
			
			_tmp.NodeDescrAr = this.NodeDescrAr;
			_tmp.NodeDescrEn = this.NodeDescrEn;
			_tmp.NodePath = this.NodePath;
			_tmp.NodeOrder = this.NodeOrder;
			_tmp.NodeParentId = this.NodeParentId;
			_tmp.NodeLevel = this.NodeLevel;
			_tmp.NodeCode = this.NodeCode;
			_tmp.NodeChildCount = this.NodeChildCount;
			_tmp.GsCodeCNodeNatureId = this.GsCodeCNodeNatureId;
			_tmp.IsNodeLocal = this.IsNodeLocal;
			_tmp.IsNodeVisible = this.IsNodeVisible;
			_tmp.GccFlg = this.GccFlg;
			_tmp.NationCode = this.NationCode;
			_tmp.NationDescrAr = this.NationDescrAr;
			_tmp.NationDescrEn = this.NationDescrEn;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.AdmAdmissionBandId = this.AdmAdmissionBandId;
			
			#region Source Parent Composite Entities
			if (this.AdmAdmissionBandIdSource != null)
				_tmp.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource) as AdmAdmissionBand;
			if (this.GsCodeCNodeNatureIdSource != null)
				_tmp.GsCodeCNodeNatureIdSource = MakeCopyOf(this.GsCodeCNodeNatureIdSource) as GsCodeCNodeNature;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.NodeParentIdSource != null)
				_tmp.NodeParentIdSource = MakeCopyOf(this.NodeParentIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsCdeSchoolGsCountryNodeId != null)
				_tmp.GsCdeSchoolCollection = (TList<GsCdeSchool>) MakeCopyOf(this.GsCdeSchoolCollection); 
			if (this._pgExtMemberGsCountryInfoId != null)
				_tmp.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection); 
			if (this._trnsStudCarStkrGsCountryNodeId != null)
				_tmp.TrnsStudCarStkrCollection = (TList<TrnsStudCarStkr>) MakeCopyOf(this.TrnsStudCarStkrCollection); 
			if (this._admApplicantGsBirthCountryNodeIdGetByGsCountryNodeId != null)
				_tmp.AdmApplicantCollectionGetByGsCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsCountryNodeId); 
			if (this._gsCdeUniversitiesGsCountryNodeId != null)
				_tmp.GsCdeUniversitiesCollection = (TList<GsCdeUniversities>) MakeCopyOf(this.GsCdeUniversitiesCollection); 
			if (this._edEmployeeQualGsCountryNodeId != null)
				_tmp.EdEmployeeQualCollection = (TList<EdEmployeeQual>) MakeCopyOf(this.EdEmployeeQualCollection); 
			if (this._asFacultyInfoGsCountryNodeId != null)
				_tmp.AsFacultyInfoCollection = (TList<AsFacultyInfo>) MakeCopyOf(this.AsFacultyInfoCollection); 
			if (this._edGuardGsCountryNodeId != null)
				_tmp.EdGuardCollection = (TList<EdGuard>) MakeCopyOf(this.EdGuardCollection); 
			if (this._edStudGsBirthCountryNodeIdGetByGsBirthCountryNodeId != null)
				_tmp.EdStudCollectionGetByGsBirthCountryNodeId = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsBirthCountryNodeId); 
			if (this._trnsCdeDrvrGsCountryNodeId != null)
				_tmp.TrnsCdeDrvrCollection = (TList<TrnsCdeDrvr>) MakeCopyOf(this.TrnsCdeDrvrCollection); 
			if (this._edStudGsBirthCountryNodeIdGetByGsCountryInfoId1 != null)
				_tmp.EdStudCollectionGetByGsCountryInfoId1 = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsCountryInfoId1); 
			if (this._admPrecondQualGsCountryNodeInfoId != null)
				_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection); 
			if (this._pgStudConferenceGsCountryNodeId != null)
				_tmp.PgStudConferenceCollection = (TList<PgStudConference>) MakeCopyOf(this.PgStudConferenceCollection); 
			if (this._mltRptDayMissionGsCountryNodeId != null)
				_tmp.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection); 
			if (this._trnsLineGsCountryNodeId != null)
				_tmp.TrnsLineCollection = (TList<TrnsLine>) MakeCopyOf(this.TrnsLineCollection); 
			if (this._edStudMissionGsCountryNodeId != null)
				_tmp.EdStudMissionCollection = (TList<EdStudMission>) MakeCopyOf(this.EdStudMissionCollection); 
			if (this._pgStudTravelGsCountryNodeId != null)
				_tmp.PgStudTravelCollection = (TList<PgStudTravel>) MakeCopyOf(this.PgStudTravelCollection); 
			if (this._edStudQualGsCountryNodeId != null)
				_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection); 
			if (this._gsCountryNodeNodeParentId != null)
				_tmp.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection); 
			if (this._feeStudFundGsCountryNodeId != null)
				_tmp.FeeStudFundCollection = (TList<FeeStudFund>) MakeCopyOf(this.FeeStudFundCollection); 
			if (this._admAppTransReqGsCountryNodeId != null)
				_tmp.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection); 
			if (this._admApplicantGsBirthCountryNodeIdGetByGsBirthCountryNodeId != null)
				_tmp.AdmApplicantCollectionGetByGsBirthCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsBirthCountryNodeId); 
			if (this._almJobGsCountryNodeId != null)
				_tmp.AlmJobCollection = (TList<AlmJob>) MakeCopyOf(this.AlmJobCollection); 
			if (this._gsAddressDtlGsCountryNodeId != null)
				_tmp.GsAddressDtlCollection = (TList<GsAddressDtl>) MakeCopyOf(this.GsAddressDtlCollection); 
			if (this._accomStudGuestReqDtlGsCountryNodeId != null)
				_tmp.AccomStudGuestReqDtlCollection = (TList<AccomStudGuestReqDtl>) MakeCopyOf(this.AccomStudGuestReqDtlCollection); 
			if (this._saStfMemberGsCountryInfoIdGetByGsCountryInfoId != null)
				_tmp.SaStfMemberCollectionGetByGsCountryInfoId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryInfoId); 
			if (this._gsMilitaryOfficeGsCountryNodeId != null)
				_tmp.GsMilitaryOfficeCollection = (TList<GsMilitaryOffice>) MakeCopyOf(this.GsMilitaryOfficeCollection); 
			if (this._saStfMemberGsCountryInfoIdGetByGsCountryNodeId != null)
				_tmp.SaStfMemberCollectionGetByGsCountryNodeId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryNodeId); 
			if (this._trnsCdeStopGsCountryNodeId != null)
				_tmp.TrnsCdeStopCollection = (TList<TrnsCdeStop>) MakeCopyOf(this.TrnsCdeStopCollection); 
			if (this._admAppWorkExperGsCountryNodeId != null)
				_tmp.AdmAppWorkExperCollection = (TList<AdmAppWorkExper>) MakeCopyOf(this.AdmAppWorkExperCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCountryNodeEntityData _tmp = new GsCountryNodeEntityData();
						
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.OriginalGsCountryNodeId = this.OriginalGsCountryNodeId;
			
			_tmp.NodeDescrAr = this.NodeDescrAr;
			_tmp.NodeDescrEn = this.NodeDescrEn;
			_tmp.NodePath = this.NodePath;
			_tmp.NodeOrder = this.NodeOrder;
			_tmp.NodeParentId = this.NodeParentId;
			_tmp.NodeLevel = this.NodeLevel;
			_tmp.NodeCode = this.NodeCode;
			_tmp.NodeChildCount = this.NodeChildCount;
			_tmp.GsCodeCNodeNatureId = this.GsCodeCNodeNatureId;
			_tmp.IsNodeLocal = this.IsNodeLocal;
			_tmp.IsNodeVisible = this.IsNodeVisible;
			_tmp.GccFlg = this.GccFlg;
			_tmp.NationCode = this.NationCode;
			_tmp.NationDescrAr = this.NationDescrAr;
			_tmp.NationDescrEn = this.NationDescrEn;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.AdmAdmissionBandId = this.AdmAdmissionBandId;
			
			#region Source Parent Composite Entities
			if (this.AdmAdmissionBandIdSource != null && existingCopies.Contains(this.AdmAdmissionBandIdSource))
				_tmp.AdmAdmissionBandIdSource = existingCopies[this.AdmAdmissionBandIdSource] as AdmAdmissionBand;
			else
				_tmp.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource, existingCopies) as AdmAdmissionBand;
			if (this.GsCodeCNodeNatureIdSource != null && existingCopies.Contains(this.GsCodeCNodeNatureIdSource))
				_tmp.GsCodeCNodeNatureIdSource = existingCopies[this.GsCodeCNodeNatureIdSource] as GsCodeCNodeNature;
			else
				_tmp.GsCodeCNodeNatureIdSource = MakeCopyOf(this.GsCodeCNodeNatureIdSource, existingCopies) as GsCodeCNodeNature;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.NodeParentIdSource != null && existingCopies.Contains(this.NodeParentIdSource))
				_tmp.NodeParentIdSource = existingCopies[this.NodeParentIdSource] as GsCountryNode;
			else
				_tmp.NodeParentIdSource = MakeCopyOf(this.NodeParentIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsCdeSchoolCollection = (TList<GsCdeSchool>) MakeCopyOf(this.GsCdeSchoolCollection, existingCopies); 
			_tmp.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection, existingCopies); 
			_tmp.TrnsStudCarStkrCollection = (TList<TrnsStudCarStkr>) MakeCopyOf(this.TrnsStudCarStkrCollection, existingCopies); 
			_tmp.AdmApplicantCollectionGetByGsCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsCountryNodeId, existingCopies); 
			_tmp.GsCdeUniversitiesCollection = (TList<GsCdeUniversities>) MakeCopyOf(this.GsCdeUniversitiesCollection, existingCopies); 
			_tmp.EdEmployeeQualCollection = (TList<EdEmployeeQual>) MakeCopyOf(this.EdEmployeeQualCollection, existingCopies); 
			_tmp.AsFacultyInfoCollection = (TList<AsFacultyInfo>) MakeCopyOf(this.AsFacultyInfoCollection, existingCopies); 
			_tmp.EdGuardCollection = (TList<EdGuard>) MakeCopyOf(this.EdGuardCollection, existingCopies); 
			_tmp.EdStudCollectionGetByGsBirthCountryNodeId = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsBirthCountryNodeId, existingCopies); 
			_tmp.TrnsCdeDrvrCollection = (TList<TrnsCdeDrvr>) MakeCopyOf(this.TrnsCdeDrvrCollection, existingCopies); 
			_tmp.EdStudCollectionGetByGsCountryInfoId1 = (TList<EdStud>) MakeCopyOf(this.EdStudCollectionGetByGsCountryInfoId1, existingCopies); 
			_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			_tmp.PgStudConferenceCollection = (TList<PgStudConference>) MakeCopyOf(this.PgStudConferenceCollection, existingCopies); 
			_tmp.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection, existingCopies); 
			_tmp.TrnsLineCollection = (TList<TrnsLine>) MakeCopyOf(this.TrnsLineCollection, existingCopies); 
			_tmp.EdStudMissionCollection = (TList<EdStudMission>) MakeCopyOf(this.EdStudMissionCollection, existingCopies); 
			_tmp.PgStudTravelCollection = (TList<PgStudTravel>) MakeCopyOf(this.PgStudTravelCollection, existingCopies); 
			_tmp.EdStudQualCollection = (TList<EdStudQual>) MakeCopyOf(this.EdStudQualCollection, existingCopies); 
			_tmp.GsCountryNodeCollection = (TList<GsCountryNode>) MakeCopyOf(this.GsCountryNodeCollection, existingCopies); 
			_tmp.FeeStudFundCollection = (TList<FeeStudFund>) MakeCopyOf(this.FeeStudFundCollection, existingCopies); 
			_tmp.AdmAppTransReqCollection = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollection, existingCopies); 
			_tmp.AdmApplicantCollectionGetByGsBirthCountryNodeId = (TList<AdmApplicant>) MakeCopyOf(this.AdmApplicantCollectionGetByGsBirthCountryNodeId, existingCopies); 
			_tmp.AlmJobCollection = (TList<AlmJob>) MakeCopyOf(this.AlmJobCollection, existingCopies); 
			_tmp.GsAddressDtlCollection = (TList<GsAddressDtl>) MakeCopyOf(this.GsAddressDtlCollection, existingCopies); 
			_tmp.AccomStudGuestReqDtlCollection = (TList<AccomStudGuestReqDtl>) MakeCopyOf(this.AccomStudGuestReqDtlCollection, existingCopies); 
			_tmp.SaStfMemberCollectionGetByGsCountryInfoId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryInfoId, existingCopies); 
			_tmp.GsMilitaryOfficeCollection = (TList<GsMilitaryOffice>) MakeCopyOf(this.GsMilitaryOfficeCollection, existingCopies); 
			_tmp.SaStfMemberCollectionGetByGsCountryNodeId = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollectionGetByGsCountryNodeId, existingCopies); 
			_tmp.TrnsCdeStopCollection = (TList<TrnsCdeStop>) MakeCopyOf(this.TrnsCdeStopCollection, existingCopies); 
			_tmp.AdmAppWorkExperCollection = (TList<AdmAppWorkExper>) MakeCopyOf(this.AdmAppWorkExperCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCountryNodeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCountryNodeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCountryNodeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCountryNodeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCountryNodeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCountryNodeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCountryNodeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCountryNodeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCountryNodeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCountryNodeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCountryNodeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCountryNodeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCountryNodeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCountryNode"/> object.
	/// </remarks>
	public class GsCountryNodeEventArgs : System.EventArgs
	{
		private GsCountryNodeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCountryNodeEventArgs class.
		///</summary>
		public GsCountryNodeEventArgs(GsCountryNodeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCountryNodeEventArgs class.
		///</summary>
		public GsCountryNodeEventArgs(GsCountryNodeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCountryNodeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCountryNodeColumn" />
		public GsCountryNodeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCountryNode related events.
	///</summary>
	public delegate void GsCountryNodeEventHandler(object sender, GsCountryNodeEventArgs e);
	
	#region GsCountryNodeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCountryNodeComparer : System.Collections.Generic.IComparer<GsCountryNode>
	{
		GsCountryNodeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCountryNodeComparer"/> class.
        /// </summary>
		public GsCountryNodeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCountryNodeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCountryNodeComparer(GsCountryNodeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCountryNode"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCountryNode"/> to compare.</param>
        /// <param name="b">The second <c>GsCountryNode</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCountryNode a, GsCountryNode b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCountryNode entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCountryNode a, GsCountryNode b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCountryNodeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCountryNodeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCountryNode"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCountryNodeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCountryNodeKey class.
		/// </summary>
		public GsCountryNodeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCountryNodeKey class.
		/// </summary>
		public GsCountryNodeKey(GsCountryNodeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCountryNodeId = entity.GsCountryNodeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCountryNodeKey class.
		/// </summary>
		public GsCountryNodeKey(System.Decimal _gsCountryNodeId)
		{
			#region Init Properties

			this.GsCountryNodeId = _gsCountryNodeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCountryNodeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCountryNodeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCountryNodeId property
		private System.Decimal _gsCountryNodeId;
		
		/// <summary>
		/// Gets or sets the GsCountryNodeId property.
		/// </summary>
		public System.Decimal GsCountryNodeId
		{
			get { return _gsCountryNodeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCountryNodeId = value;
				
				_gsCountryNodeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCountryNodeId = ( values["GsCountryNodeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCountryNodeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCountryNodeId", GsCountryNodeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCountryNodeId: {0}{1}",
								GsCountryNodeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCountryNodeColumn Enum
	
	/// <summary>
	/// Enumerate the GsCountryNode columns.
	/// </summary>
	[Serializable]
	public enum GsCountryNodeColumn : int
	{
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCountryNodeId = 1,
		/// <summary>
		/// NodeDescrAr : 
		/// </summary>
		[EnumTextValue("NODE_DESCR_AR")]
		[ColumnEnum("NODE_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 128)]
		NodeDescrAr = 2,
		/// <summary>
		/// NodeDescrEn : 
		/// </summary>
		[EnumTextValue("NODE_DESCR_EN")]
		[ColumnEnum("NODE_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 128)]
		NodeDescrEn = 3,
		/// <summary>
		/// NodePath : 
		/// </summary>
		[EnumTextValue("NODE_PATH")]
		[ColumnEnum("NODE_PATH", typeof(System.String), System.Data.DbType.String, false, false, false, 90)]
		NodePath = 4,
		/// <summary>
		/// NodeOrder : 
		/// </summary>
		[EnumTextValue("NODE_ORDER")]
		[ColumnEnum("NODE_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NodeOrder = 5,
		/// <summary>
		/// NodeParentId : 
		/// </summary>
		[EnumTextValue("NODE_PARENT_ID")]
		[ColumnEnum("NODE_PARENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NodeParentId = 6,
		/// <summary>
		/// NodeLevel : 
		/// </summary>
		[EnumTextValue("NODE_LEVEL")]
		[ColumnEnum("NODE_LEVEL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NodeLevel = 7,
		/// <summary>
		/// NodeCode : 
		/// </summary>
		[EnumTextValue("NODE_CODE")]
		[ColumnEnum("NODE_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		NodeCode = 8,
		/// <summary>
		/// NodeChildCount : 
		/// </summary>
		[EnumTextValue("NODE_CHILD_COUNT")]
		[ColumnEnum("NODE_CHILD_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NodeChildCount = 9,
		/// <summary>
		/// GsCodeCNodeNatureId : 
		/// </summary>
		[EnumTextValue("GS_CODE_C_NODE_NATURE_ID")]
		[ColumnEnum("GS_CODE_C_NODE_NATURE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCNodeNatureId = 10,
		/// <summary>
		/// IsNodeLocal : 
		/// </summary>
		[EnumTextValue("IS_NODE_LOCAL")]
		[ColumnEnum("IS_NODE_LOCAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsNodeLocal = 11,
		/// <summary>
		/// IsNodeVisible : 
		/// </summary>
		[EnumTextValue("IS_NODE_VISIBLE")]
		[ColumnEnum("IS_NODE_VISIBLE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsNodeVisible = 12,
		/// <summary>
		/// GccFlg : يعامل معاملة المصرى فى المصروفات similarity_flg=1 
		/// </summary>
		[EnumTextValue("GCC_FLG")]
		[ColumnEnum("GCC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GccFlg = 13,
		/// <summary>
		/// NationCode : كود الجنسية
		/// </summary>
		[EnumTextValue("NATION_CODE")]
		[ColumnEnum("NATION_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		NationCode = 14,
		/// <summary>
		/// NationDescrAr : وصف الجنسية
		/// </summary>
		[EnumTextValue("NATION_DESCR_AR")]
		[ColumnEnum("NATION_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 64)]
		NationDescrAr = 15,
		/// <summary>
		/// NationDescrEn : وصف الجنسية
		/// </summary>
		[EnumTextValue("NATION_DESCR_EN")]
		[ColumnEnum("NATION_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 64)]
		NationDescrEn = 16,
		/// <summary>
		/// GsCodeCurrencyId : عملة دفع المصروفات الاساسية
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeCurrencyId = 17,
		/// <summary>
		/// AdmAdmissionBandId : 
		/// </summary>
		[EnumTextValue("ADM_ADMISSION_BAND_ID")]
		[ColumnEnum("ADM_ADMISSION_BAND_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAdmissionBandId = 18
	}//End enum

	#endregion GsCountryNodeColumn Enum

} // end namespace
