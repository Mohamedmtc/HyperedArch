
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPolicyLoad.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_POLICY_LOAD' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPolicyLoadBase : EntityBase, IEntPolicyLoad, IEntityId<EntPolicyLoadKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPolicyLoadEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPolicyLoadEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPolicyLoadEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPolicyLoad> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyLoadEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyLoadEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPolicyLoadBase"/> instance.
		///</summary>
		public EntPolicyLoadBase()
		{
			this.entityData = new EntPolicyLoadEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPolicyLoadBase"/> instance.
		///</summary>
		///<param name="_entPolicyLoadId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_partTimeFlg"></param>
		///<param name="_srNo"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_gpaFrom"></param>
		///<param name="_gpaTo"></param>
		///<param name="_noPrvSem"></param>
		///<param name="_contFlg"></param>
		///<param name="_remainCh"></param>
		///<param name="_minCh"></param>
		///<param name="_maxCh"></param>
		///<param name="_edBylawId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_flgAcadWarn"></param>
		///<param name="_crsCount">فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات</param>
		///<param name="_chCrsFlg">0: or   1:and</param>
		public EntPolicyLoadBase(System.Decimal _entPolicyLoadId, System.Decimal? _edCodeSemesterTypeId, 
			System.Boolean? _partTimeFlg, System.Decimal _srNo, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal _gpaFrom, System.Decimal _gpaTo, System.Decimal _noPrvSem, System.Decimal _contFlg, 
			System.Decimal? _remainCh, System.Decimal _minCh, System.Decimal _maxCh, System.Decimal? _edBylawId, 
			System.Decimal? _edCodeLevelId, System.Decimal _flgAcadWarn, System.Decimal? _crsCount, 
			System.Int16? _chCrsFlg)
		{
			this.entityData = new EntPolicyLoadEntityData();
			this.backupData = null;

			this.EntPolicyLoadId = _entPolicyLoadId;
			this.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			this.PartTimeFlg = _partTimeFlg;
			this.SrNo = _srNo;
			this.EdCodeLoadTypeId = _edCodeLoadTypeId;
			this.GpaFrom = _gpaFrom;
			this.GpaTo = _gpaTo;
			this.NoPrvSem = _noPrvSem;
			this.ContFlg = _contFlg;
			this.RemainCh = _remainCh;
			this.MinCh = _minCh;
			this.MaxCh = _maxCh;
			this.EdBylawId = _edBylawId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.FlgAcadWarn = _flgAcadWarn;
			this.CrsCount = _crsCount;
			this.ChCrsFlg = _chCrsFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPolicyLoad"/> instance.
		///</summary>
		///<param name="_entPolicyLoadId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_partTimeFlg"></param>
		///<param name="_srNo"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_gpaFrom"></param>
		///<param name="_gpaTo"></param>
		///<param name="_noPrvSem"></param>
		///<param name="_contFlg"></param>
		///<param name="_remainCh"></param>
		///<param name="_minCh"></param>
		///<param name="_maxCh"></param>
		///<param name="_edBylawId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_flgAcadWarn"></param>
		///<param name="_crsCount">فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات</param>
		///<param name="_chCrsFlg">0: or   1:and</param>
		public static EntPolicyLoad CreateEntPolicyLoad(System.Decimal _entPolicyLoadId, System.Decimal? _edCodeSemesterTypeId, 
			System.Boolean? _partTimeFlg, System.Decimal _srNo, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal _gpaFrom, System.Decimal _gpaTo, System.Decimal _noPrvSem, System.Decimal _contFlg, 
			System.Decimal? _remainCh, System.Decimal _minCh, System.Decimal _maxCh, System.Decimal? _edBylawId, 
			System.Decimal? _edCodeLevelId, System.Decimal _flgAcadWarn, System.Decimal? _crsCount, 
			System.Int16? _chCrsFlg)
		{
			EntPolicyLoad newEntPolicyLoad = new EntPolicyLoad();
			newEntPolicyLoad.EntPolicyLoadId = _entPolicyLoadId;
			newEntPolicyLoad.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			newEntPolicyLoad.PartTimeFlg = _partTimeFlg;
			newEntPolicyLoad.SrNo = _srNo;
			newEntPolicyLoad.EdCodeLoadTypeId = _edCodeLoadTypeId;
			newEntPolicyLoad.GpaFrom = _gpaFrom;
			newEntPolicyLoad.GpaTo = _gpaTo;
			newEntPolicyLoad.NoPrvSem = _noPrvSem;
			newEntPolicyLoad.ContFlg = _contFlg;
			newEntPolicyLoad.RemainCh = _remainCh;
			newEntPolicyLoad.MinCh = _minCh;
			newEntPolicyLoad.MaxCh = _maxCh;
			newEntPolicyLoad.EdBylawId = _edBylawId;
			newEntPolicyLoad.EdCodeLevelId = _edCodeLevelId;
			newEntPolicyLoad.FlgAcadWarn = _flgAcadWarn;
			newEntPolicyLoad.CrsCount = _crsCount;
			newEntPolicyLoad.ChCrsFlg = _chCrsFlg;
			return newEntPolicyLoad;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPolicyLoadId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntPolicyLoadId
		{
			get
			{
				return this.entityData.EntPolicyLoadId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyLoadId == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.EntPolicyLoadId, this.entityData.EntPolicyLoadId);
				this.entityData.EntPolicyLoadId = value;
				this.EntityId.EntPolicyLoadId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.EntPolicyLoadId, this.entityData.EntPolicyLoadId);
				OnPropertyChanged("EntPolicyLoadId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_POLICY_LOAD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_POLICY_LOAD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntPolicyLoadId
		{
			get { return this.entityData.OriginalEntPolicyLoadId; }
			set { this.entityData.OriginalEntPolicyLoadId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterTypeId
		{
			get
			{
				return this.entityData.EdCodeSemesterTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterTypeId == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				this.entityData.EdCodeSemesterTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				OnPropertyChanged("EdCodeSemesterTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartTimeFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPartTimeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PartTimeFlg
		{
			get
			{
				return this.entityData.PartTimeFlg; 
			}
			
			set
			{
				if (this.entityData.PartTimeFlg == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				this.entityData.PartTimeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				OnPropertyChanged("PartTimeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SrNo
		{
			get
			{
				return this.entityData.SrNo; 
			}
			
			set
			{
				if (this.entityData.SrNo == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.SrNo, this.entityData.SrNo);
				this.entityData.SrNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.SrNo, this.entityData.SrNo);
				OnPropertyChanged("SrNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLoadTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLoadTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLoadTypeId
		{
			get
			{
				return this.entityData.EdCodeLoadTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLoadTypeId == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				this.entityData.EdCodeLoadTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				OnPropertyChanged("EdCodeLoadTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GpaFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GpaFrom
		{
			get
			{
				return this.entityData.GpaFrom; 
			}
			
			set
			{
				if (this.entityData.GpaFrom == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.GpaFrom, this.entityData.GpaFrom);
				this.entityData.GpaFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.GpaFrom, this.entityData.GpaFrom);
				OnPropertyChanged("GpaFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GpaTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GpaTo
		{
			get
			{
				return this.entityData.GpaTo; 
			}
			
			set
			{
				if (this.entityData.GpaTo == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.GpaTo, this.entityData.GpaTo);
				this.entityData.GpaTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.GpaTo, this.entityData.GpaTo);
				OnPropertyChanged("GpaTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoPrvSem property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NoPrvSem
		{
			get
			{
				return this.entityData.NoPrvSem; 
			}
			
			set
			{
				if (this.entityData.NoPrvSem == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.NoPrvSem, this.entityData.NoPrvSem);
				this.entityData.NoPrvSem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.NoPrvSem, this.entityData.NoPrvSem);
				OnPropertyChanged("NoPrvSem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ContFlg
		{
			get
			{
				return this.entityData.ContFlg; 
			}
			
			set
			{
				if (this.entityData.ContFlg == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.ContFlg, this.entityData.ContFlg);
				this.entityData.ContFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.ContFlg, this.entityData.ContFlg);
				OnPropertyChanged("ContFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RemainCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRemainChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RemainCh
		{
			get
			{
				return this.entityData.RemainCh; 
			}
			
			set
			{
				if (this.entityData.RemainCh == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.RemainCh, this.entityData.RemainCh);
				this.entityData.RemainCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.RemainCh, this.entityData.RemainCh);
				OnPropertyChanged("RemainCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MinCh
		{
			get
			{
				return this.entityData.MinCh; 
			}
			
			set
			{
				if (this.entityData.MinCh == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.MinCh, this.entityData.MinCh);
				this.entityData.MinCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.MinCh, this.entityData.MinCh);
				OnPropertyChanged("MinCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MaxCh
		{
			get
			{
				return this.entityData.MaxCh; 
			}
			
			set
			{
				if (this.entityData.MaxCh == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.MaxCh, this.entityData.MaxCh);
				this.entityData.MaxCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.MaxCh, this.entityData.MaxCh);
				OnPropertyChanged("MaxCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdBylawIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FlgAcadWarn property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FlgAcadWarn
		{
			get
			{
				return this.entityData.FlgAcadWarn; 
			}
			
			set
			{
				if (this.entityData.FlgAcadWarn == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.FlgAcadWarn, this.entityData.FlgAcadWarn);
				this.entityData.FlgAcadWarn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.FlgAcadWarn, this.entityData.FlgAcadWarn);
				OnPropertyChanged("FlgAcadWarn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsCount property. 
		///		فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsCount
		{
			get
			{
				return this.entityData.CrsCount; 
			}
			
			set
			{
				if (this.entityData.CrsCount == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.CrsCount, this.entityData.CrsCount);
				this.entityData.CrsCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.CrsCount, this.entityData.CrsCount);
				OnPropertyChanged("CrsCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChCrsFlg property. 
		///		0: or   1:and
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsChCrsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0: or   1:and"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? ChCrsFlg
		{
			get
			{
				return this.entityData.ChCrsFlg; 
			}
			
			set
			{
				if (this.entityData.ChCrsFlg == value)
					return;
					
				OnColumnChanging(EntPolicyLoadColumn.ChCrsFlg, this.entityData.ChCrsFlg);
				this.entityData.ChCrsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyLoadColumn.ChCrsFlg, this.entityData.ChCrsFlg);
				OnPropertyChanged("ChCrsFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return entityData.EdCodeSemesterTypeIdSource; }
            set { entityData.EdCodeSemesterTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return entityData.EdCodeLoadTypeIdSource; }
            set { entityData.EdCodeLoadTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_POLICY_LOAD"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_POLICY_LOAD_ID", "ED_CODE_SEMESTER_TYPE_ID", "PART_TIME_FLG", "SR_NO", "ED_CODE_LOAD_TYPE_ID", "GPA_FROM", "GPA_TO", "NO_PRV_SEM", "CONT_FLG", "REMAIN_CH", "MIN_CH", "MAX_CH", "ED_BYLAW_ID", "ED_CODE_LEVEL_ID", "FLG_ACAD_WARN", "CRS_COUNT", "CH_CRS_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPolicyLoadEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPolicyLoad) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPolicyLoad>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPolicyLoad);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPolicyLoad Entity 
		///</summary>
		protected virtual EntPolicyLoad Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPolicyLoad copy = new EntPolicyLoad();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPolicyLoadId = this.EntPolicyLoadId;
					copy.OriginalEntPolicyLoadId = this.OriginalEntPolicyLoadId;
				copy.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
				copy.PartTimeFlg = this.PartTimeFlg;
				copy.SrNo = this.SrNo;
				copy.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
				copy.GpaFrom = this.GpaFrom;
				copy.GpaTo = this.GpaTo;
				copy.NoPrvSem = this.NoPrvSem;
				copy.ContFlg = this.ContFlg;
				copy.RemainCh = this.RemainCh;
				copy.MinCh = this.MinCh;
				copy.MaxCh = this.MaxCh;
				copy.EdBylawId = this.EdBylawId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.FlgAcadWarn = this.FlgAcadWarn;
				copy.CrsCount = this.CrsCount;
				copy.ChCrsFlg = this.ChCrsFlg;
			
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				copy.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				copy.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				copy.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				copy.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPolicyLoad Entity 
		///</summary>
		public virtual EntPolicyLoad Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPolicyLoad Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPolicyLoad DeepCopy()
		{
			return EntityHelper.Clone<EntPolicyLoad>(this as EntPolicyLoad);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPolicyLoadEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPolicyLoadEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPolicyLoadEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPolicyLoadColumn column)
		{
			switch(column)
			{
					case EntPolicyLoadColumn.EntPolicyLoadId:
					return entityData.EntPolicyLoadId != _originalData.EntPolicyLoadId;
					case EntPolicyLoadColumn.EdCodeSemesterTypeId:
					return entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
					case EntPolicyLoadColumn.PartTimeFlg:
					return entityData.PartTimeFlg != _originalData.PartTimeFlg;
					case EntPolicyLoadColumn.SrNo:
					return entityData.SrNo != _originalData.SrNo;
					case EntPolicyLoadColumn.EdCodeLoadTypeId:
					return entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
					case EntPolicyLoadColumn.GpaFrom:
					return entityData.GpaFrom != _originalData.GpaFrom;
					case EntPolicyLoadColumn.GpaTo:
					return entityData.GpaTo != _originalData.GpaTo;
					case EntPolicyLoadColumn.NoPrvSem:
					return entityData.NoPrvSem != _originalData.NoPrvSem;
					case EntPolicyLoadColumn.ContFlg:
					return entityData.ContFlg != _originalData.ContFlg;
					case EntPolicyLoadColumn.RemainCh:
					return entityData.RemainCh != _originalData.RemainCh;
					case EntPolicyLoadColumn.MinCh:
					return entityData.MinCh != _originalData.MinCh;
					case EntPolicyLoadColumn.MaxCh:
					return entityData.MaxCh != _originalData.MaxCh;
					case EntPolicyLoadColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EntPolicyLoadColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EntPolicyLoadColumn.FlgAcadWarn:
					return entityData.FlgAcadWarn != _originalData.FlgAcadWarn;
					case EntPolicyLoadColumn.CrsCount:
					return entityData.CrsCount != _originalData.CrsCount;
					case EntPolicyLoadColumn.ChCrsFlg:
					return entityData.ChCrsFlg != _originalData.ChCrsFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPolicyLoadColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPolicyLoadId != _originalData.EntPolicyLoadId;
			result = result || entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
			result = result || entityData.PartTimeFlg != _originalData.PartTimeFlg;
			result = result || entityData.SrNo != _originalData.SrNo;
			result = result || entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
			result = result || entityData.GpaFrom != _originalData.GpaFrom;
			result = result || entityData.GpaTo != _originalData.GpaTo;
			result = result || entityData.NoPrvSem != _originalData.NoPrvSem;
			result = result || entityData.ContFlg != _originalData.ContFlg;
			result = result || entityData.RemainCh != _originalData.RemainCh;
			result = result || entityData.MinCh != _originalData.MinCh;
			result = result || entityData.MaxCh != _originalData.MaxCh;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.FlgAcadWarn != _originalData.FlgAcadWarn;
			result = result || entityData.CrsCount != _originalData.CrsCount;
			result = result || entityData.ChCrsFlg != _originalData.ChCrsFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPolicyLoad Entity with the original data.
		///</summary>
		public EntPolicyLoad GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPolicyLoad(
				_originalData.EntPolicyLoadId,
				_originalData.EdCodeSemesterTypeId,
				_originalData.PartTimeFlg,
				_originalData.SrNo,
				_originalData.EdCodeLoadTypeId,
				_originalData.GpaFrom,
				_originalData.GpaTo,
				_originalData.NoPrvSem,
				_originalData.ContFlg,
				_originalData.RemainCh,
				_originalData.MinCh,
				_originalData.MaxCh,
				_originalData.EdBylawId,
				_originalData.EdCodeLevelId,
				_originalData.FlgAcadWarn,
				_originalData.CrsCount,
				_originalData.ChCrsFlg
				);
				
			return (EntPolicyLoad)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPolicyLoadBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPolicyLoadBase)
				return ValueEquals(this, (EntPolicyLoadBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPolicyLoadBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPolicyLoadId.GetHashCode() ^ 
					((this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString()).GetHashCode() ^ 
					((this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString()).GetHashCode() ^ 
					this.SrNo.GetHashCode() ^ 
					((this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString()).GetHashCode() ^ 
					this.GpaFrom.GetHashCode() ^ 
					this.GpaTo.GetHashCode() ^ 
					this.NoPrvSem.GetHashCode() ^ 
					this.ContFlg.GetHashCode() ^ 
					((this.RemainCh == null) ? string.Empty : this.RemainCh.ToString()).GetHashCode() ^ 
					this.MinCh.GetHashCode() ^ 
					this.MaxCh.GetHashCode() ^ 
					((this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.FlgAcadWarn.GetHashCode() ^ 
					((this.CrsCount == null) ? string.Empty : this.CrsCount.ToString()).GetHashCode() ^ 
					((this.ChCrsFlg == null) ? string.Empty : this.ChCrsFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPolicyLoadBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPolicyLoadBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPolicyLoadBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPolicyLoadBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPolicyLoadBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPolicyLoadBase Object1, EntPolicyLoadBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPolicyLoadId != Object2.EntPolicyLoadId)
				equal = false;
			if ( Object1.EdCodeSemesterTypeId != null && Object2.EdCodeSemesterTypeId != null )
			{
				if (Object1.EdCodeSemesterTypeId != Object2.EdCodeSemesterTypeId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterTypeId == null ^ Object2.EdCodeSemesterTypeId == null )
			{
				equal = false;
			}
			if ( Object1.PartTimeFlg != null && Object2.PartTimeFlg != null )
			{
				if (Object1.PartTimeFlg != Object2.PartTimeFlg)
					equal = false;
			}
			else if (Object1.PartTimeFlg == null ^ Object2.PartTimeFlg == null )
			{
				equal = false;
			}
			if (Object1.SrNo != Object2.SrNo)
				equal = false;
			if ( Object1.EdCodeLoadTypeId != null && Object2.EdCodeLoadTypeId != null )
			{
				if (Object1.EdCodeLoadTypeId != Object2.EdCodeLoadTypeId)
					equal = false;
			}
			else if (Object1.EdCodeLoadTypeId == null ^ Object2.EdCodeLoadTypeId == null )
			{
				equal = false;
			}
			if (Object1.GpaFrom != Object2.GpaFrom)
				equal = false;
			if (Object1.GpaTo != Object2.GpaTo)
				equal = false;
			if (Object1.NoPrvSem != Object2.NoPrvSem)
				equal = false;
			if (Object1.ContFlg != Object2.ContFlg)
				equal = false;
			if ( Object1.RemainCh != null && Object2.RemainCh != null )
			{
				if (Object1.RemainCh != Object2.RemainCh)
					equal = false;
			}
			else if (Object1.RemainCh == null ^ Object2.RemainCh == null )
			{
				equal = false;
			}
			if (Object1.MinCh != Object2.MinCh)
				equal = false;
			if (Object1.MaxCh != Object2.MaxCh)
				equal = false;
			if ( Object1.EdBylawId != null && Object2.EdBylawId != null )
			{
				if (Object1.EdBylawId != Object2.EdBylawId)
					equal = false;
			}
			else if (Object1.EdBylawId == null ^ Object2.EdBylawId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.FlgAcadWarn != Object2.FlgAcadWarn)
				equal = false;
			if ( Object1.CrsCount != null && Object2.CrsCount != null )
			{
				if (Object1.CrsCount != Object2.CrsCount)
					equal = false;
			}
			else if (Object1.CrsCount == null ^ Object2.CrsCount == null )
			{
				equal = false;
			}
			if ( Object1.ChCrsFlg != null && Object2.ChCrsFlg != null )
			{
				if (Object1.ChCrsFlg != Object2.ChCrsFlg)
					equal = false;
			}
			else if (Object1.ChCrsFlg == null ^ Object2.ChCrsFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPolicyLoadBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPolicyLoadComparer GetComparer()
        {
            return new EntPolicyLoadComparer();
        }
        */

        // Comparer delegates back to EntPolicyLoad
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPolicyLoad rhs, EntPolicyLoadColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPolicyLoadColumn.EntPolicyLoadId:
            		return this.EntPolicyLoadId.CompareTo(rhs.EntPolicyLoadId);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.EdCodeSemesterTypeId:
            		return this.EdCodeSemesterTypeId.Value.CompareTo(rhs.EdCodeSemesterTypeId.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.PartTimeFlg:
            		return this.PartTimeFlg.Value.CompareTo(rhs.PartTimeFlg.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.SrNo:
            		return this.SrNo.CompareTo(rhs.SrNo);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.EdCodeLoadTypeId:
            		return this.EdCodeLoadTypeId.Value.CompareTo(rhs.EdCodeLoadTypeId.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.GpaFrom:
            		return this.GpaFrom.CompareTo(rhs.GpaFrom);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.GpaTo:
            		return this.GpaTo.CompareTo(rhs.GpaTo);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.NoPrvSem:
            		return this.NoPrvSem.CompareTo(rhs.NoPrvSem);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.ContFlg:
            		return this.ContFlg.CompareTo(rhs.ContFlg);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.RemainCh:
            		return this.RemainCh.Value.CompareTo(rhs.RemainCh.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.MinCh:
            		return this.MinCh.CompareTo(rhs.MinCh);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.MaxCh:
            		return this.MaxCh.CompareTo(rhs.MaxCh);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.EdBylawId:
            		return this.EdBylawId.Value.CompareTo(rhs.EdBylawId.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.FlgAcadWarn:
            		return this.FlgAcadWarn.CompareTo(rhs.FlgAcadWarn);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.CrsCount:
            		return this.CrsCount.Value.CompareTo(rhs.CrsCount.Value);
            		
            		                 
            	
            	
            	case EntPolicyLoadColumn.ChCrsFlg:
            		return this.ChCrsFlg.Value.CompareTo(rhs.ChCrsFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPolicyLoadKey> Members
		
		// member variable for the EntityId property
		private EntPolicyLoadKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPolicyLoadKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPolicyLoadKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPolicyLoad")
					.Append("|").Append( this.EntPolicyLoadId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- EntPolicyLoadId: {0}{17}- EdCodeSemesterTypeId: {1}{17}- PartTimeFlg: {2}{17}- SrNo: {3}{17}- EdCodeLoadTypeId: {4}{17}- GpaFrom: {5}{17}- GpaTo: {6}{17}- NoPrvSem: {7}{17}- ContFlg: {8}{17}- RemainCh: {9}{17}- MinCh: {10}{17}- MaxCh: {11}{17}- EdBylawId: {12}{17}- EdCodeLevelId: {13}{17}- FlgAcadWarn: {14}{17}- CrsCount: {15}{17}- ChCrsFlg: {16}{17}{19}", 
				this.EntPolicyLoadId,
				(this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString(),
				(this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString(),
				this.SrNo,
				(this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString(),
				this.GpaFrom,
				this.GpaTo,
				this.NoPrvSem,
				this.ContFlg,
				(this.RemainCh == null) ? string.Empty : this.RemainCh.ToString(),
				this.MinCh,
				this.MaxCh,
				(this.EdBylawId == null) ? string.Empty : this.EdBylawId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.FlgAcadWarn,
				(this.CrsCount == null) ? string.Empty : this.CrsCount.ToString(),
				(this.ChCrsFlg == null) ? string.Empty : this.ChCrsFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_POLICY_LOAD' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPolicyLoadEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_POLICY_LOAD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_POLICY_LOAD"</remarks>
		public System.Decimal EntPolicyLoadId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntPolicyLoadId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEMESTER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterTypeId = null;
		
		/// <summary>
		/// PART_TIME_FLG : 
		/// </summary>
		public System.Boolean?		  PartTimeFlg = null;
		
		/// <summary>
		/// SR_NO : 
		/// </summary>
		public System.Decimal		  SrNo = 0.0m;
		
		/// <summary>
		/// ED_CODE_LOAD_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLoadTypeId = null;
		
		/// <summary>
		/// GPA_FROM : 
		/// </summary>
		public System.Decimal		  GpaFrom = 0.0m;
		
		/// <summary>
		/// GPA_TO : 
		/// </summary>
		public System.Decimal		  GpaTo = 0.0m;
		
		/// <summary>
		/// NO_PRV_SEM : 
		/// </summary>
		public System.Decimal		  NoPrvSem = 0.0m;
		
		/// <summary>
		/// CONT_FLG : 
		/// </summary>
		public System.Decimal		  ContFlg = 0.0m;
		
		/// <summary>
		/// REMAIN_CH : 
		/// </summary>
		public System.Decimal?		  RemainCh = null;
		
		/// <summary>
		/// MIN_CH : 
		/// </summary>
		public System.Decimal		  MinCh = 0.0m;
		
		/// <summary>
		/// MAX_CH : 
		/// </summary>
		public System.Decimal		  MaxCh = 0.0m;
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal?		  EdBylawId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// FLG_ACAD_WARN : 
		/// </summary>
		public System.Decimal		  FlgAcadWarn = 0.0m;
		
		/// <summary>
		/// CRS_COUNT : فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات
		/// </summary>
		public System.Decimal?		  CrsCount = null;
		
		/// <summary>
		/// CH_CRS_FLG : 0: or   1:and
		/// </summary>
		public System.Int16?		  ChCrsFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeSemesterType _edCodeSemesterTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return this._edCodeSemesterTypeIdSource; }
            set { this._edCodeSemesterTypeIdSource = value; }
      	}
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeLoadType _edCodeLoadTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return this._edCodeLoadTypeIdSource; }
            set { this._edCodeLoadTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPolicyLoadEntityData _tmp = new EntPolicyLoadEntityData();
						
			_tmp.EntPolicyLoadId = this.EntPolicyLoadId;
			_tmp.OriginalEntPolicyLoadId = this.OriginalEntPolicyLoadId;
			
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			_tmp.SrNo = this.SrNo;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.GpaFrom = this.GpaFrom;
			_tmp.GpaTo = this.GpaTo;
			_tmp.NoPrvSem = this.NoPrvSem;
			_tmp.ContFlg = this.ContFlg;
			_tmp.RemainCh = this.RemainCh;
			_tmp.MinCh = this.MinCh;
			_tmp.MaxCh = this.MaxCh;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FlgAcadWarn = this.FlgAcadWarn;
			_tmp.CrsCount = this.CrsCount;
			_tmp.ChCrsFlg = this.ChCrsFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeSemesterTypeIdSource != null)
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource) as EdCodeSemesterType;
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null)
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource) as EdCodeLoadType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPolicyLoadEntityData _tmp = new EntPolicyLoadEntityData();
						
			_tmp.EntPolicyLoadId = this.EntPolicyLoadId;
			_tmp.OriginalEntPolicyLoadId = this.OriginalEntPolicyLoadId;
			
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			_tmp.SrNo = this.SrNo;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.GpaFrom = this.GpaFrom;
			_tmp.GpaTo = this.GpaTo;
			_tmp.NoPrvSem = this.NoPrvSem;
			_tmp.ContFlg = this.ContFlg;
			_tmp.RemainCh = this.RemainCh;
			_tmp.MinCh = this.MinCh;
			_tmp.MaxCh = this.MaxCh;
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FlgAcadWarn = this.FlgAcadWarn;
			_tmp.CrsCount = this.CrsCount;
			_tmp.ChCrsFlg = this.ChCrsFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				_tmp.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				_tmp.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyLoadColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPolicyLoadColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyLoadColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPolicyLoadColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyLoadColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPolicyLoadColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPolicyLoadEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPolicyLoadEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyLoadColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPolicyLoadColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPolicyLoadEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPolicyLoadEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPolicyLoadEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPolicyLoad"/> object.
	/// </remarks>
	public class EntPolicyLoadEventArgs : System.EventArgs
	{
		private EntPolicyLoadColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyLoadEventArgs class.
		///</summary>
		public EntPolicyLoadEventArgs(EntPolicyLoadColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyLoadEventArgs class.
		///</summary>
		public EntPolicyLoadEventArgs(EntPolicyLoadColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPolicyLoadColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPolicyLoadColumn" />
		public EntPolicyLoadColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPolicyLoad related events.
	///</summary>
	public delegate void EntPolicyLoadEventHandler(object sender, EntPolicyLoadEventArgs e);
	
	#region EntPolicyLoadComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPolicyLoadComparer : System.Collections.Generic.IComparer<EntPolicyLoad>
	{
		EntPolicyLoadColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyLoadComparer"/> class.
        /// </summary>
		public EntPolicyLoadComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyLoadComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPolicyLoadComparer(EntPolicyLoadColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPolicyLoad"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPolicyLoad"/> to compare.</param>
        /// <param name="b">The second <c>EntPolicyLoad</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPolicyLoad a, EntPolicyLoad b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPolicyLoad entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPolicyLoad a, EntPolicyLoad b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPolicyLoadColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPolicyLoadKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPolicyLoad"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPolicyLoadKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadKey class.
		/// </summary>
		public EntPolicyLoadKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadKey class.
		/// </summary>
		public EntPolicyLoadKey(EntPolicyLoadBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPolicyLoadId = entity.EntPolicyLoadId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyLoadKey class.
		/// </summary>
		public EntPolicyLoadKey(System.Decimal _entPolicyLoadId)
		{
			#region Init Properties

			this.EntPolicyLoadId = _entPolicyLoadId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPolicyLoadBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPolicyLoadBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPolicyLoadId property
		private System.Decimal _entPolicyLoadId;
		
		/// <summary>
		/// Gets or sets the EntPolicyLoadId property.
		/// </summary>
		public System.Decimal EntPolicyLoadId
		{
			get { return _entPolicyLoadId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPolicyLoadId = value;
				
				_entPolicyLoadId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPolicyLoadId = ( values["EntPolicyLoadId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntPolicyLoadId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPolicyLoadId", EntPolicyLoadId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPolicyLoadId: {0}{1}",
								EntPolicyLoadId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPolicyLoadColumn Enum
	
	/// <summary>
	/// Enumerate the EntPolicyLoad columns.
	/// </summary>
	[Serializable]
	public enum EntPolicyLoadColumn : int
	{
		/// <summary>
		/// EntPolicyLoadId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_LOAD_ID")]
		[ColumnEnum("ENT_POLICY_LOAD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntPolicyLoadId = 1,
		/// <summary>
		/// EdCodeSemesterTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TYPE_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterTypeId = 2,
		/// <summary>
		/// PartTimeFlg : 
		/// </summary>
		[EnumTextValue("PART_TIME_FLG")]
		[ColumnEnum("PART_TIME_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PartTimeFlg = 3,
		/// <summary>
		/// SrNo : 
		/// </summary>
		[EnumTextValue("SR_NO")]
		[ColumnEnum("SR_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SrNo = 4,
		/// <summary>
		/// EdCodeLoadTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LOAD_TYPE_ID")]
		[ColumnEnum("ED_CODE_LOAD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLoadTypeId = 5,
		/// <summary>
		/// GpaFrom : 
		/// </summary>
		[EnumTextValue("GPA_FROM")]
		[ColumnEnum("GPA_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GpaFrom = 6,
		/// <summary>
		/// GpaTo : 
		/// </summary>
		[EnumTextValue("GPA_TO")]
		[ColumnEnum("GPA_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GpaTo = 7,
		/// <summary>
		/// NoPrvSem : 
		/// </summary>
		[EnumTextValue("NO_PRV_SEM")]
		[ColumnEnum("NO_PRV_SEM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NoPrvSem = 8,
		/// <summary>
		/// ContFlg : 
		/// </summary>
		[EnumTextValue("CONT_FLG")]
		[ColumnEnum("CONT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ContFlg = 9,
		/// <summary>
		/// RemainCh : 
		/// </summary>
		[EnumTextValue("REMAIN_CH")]
		[ColumnEnum("REMAIN_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RemainCh = 10,
		/// <summary>
		/// MinCh : 
		/// </summary>
		[EnumTextValue("MIN_CH")]
		[ColumnEnum("MIN_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MinCh = 11,
		/// <summary>
		/// MaxCh : 
		/// </summary>
		[EnumTextValue("MAX_CH")]
		[ColumnEnum("MAX_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MaxCh = 12,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdBylawId = 13,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 14,
		/// <summary>
		/// FlgAcadWarn : 
		/// </summary>
		[EnumTextValue("FLG_ACAD_WARN")]
		[ColumnEnum("FLG_ACAD_WARN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FlgAcadWarn = 15,
		/// <summary>
		/// CrsCount : فى حالة الفصل الصيفى يمكن  تشك على عدد مقررات بدل من عدد ساعات
		/// </summary>
		[EnumTextValue("CRS_COUNT")]
		[ColumnEnum("CRS_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsCount = 16,
		/// <summary>
		/// ChCrsFlg : 0: or   1:and
		/// </summary>
		[EnumTextValue("CH_CRS_FLG")]
		[ColumnEnum("CH_CRS_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		ChCrsFlg = 17
	}//End enum

	#endregion EntPolicyLoadColumn Enum

} // end namespace
