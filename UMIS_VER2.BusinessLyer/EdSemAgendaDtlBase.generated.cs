
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdSemAgendaDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_SEM_AGENDA_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdSemAgendaDtlBase : EntityBase, IEdSemAgendaDtl, IEntityId<EdSemAgendaDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdSemAgendaDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdSemAgendaDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdSemAgendaDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdSemAgendaDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemAgendaDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemAgendaDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdSemAgendaDtlBase"/> instance.
		///</summary>
		public EdSemAgendaDtlBase()
		{
			this.entityData = new EdSemAgendaDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdSemAgendaDtlBase"/> instance.
		///</summary>
		///<param name="_edSemAgendaDtlId"></param>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_fChPrcnt">XX</param>
		///<param name="_tChPrcnt">XX</param>
		///<param name="_fAdmAcadYearId">XX</param>
		///<param name="_regDate">XX</param>
		///<param name="_tAdmAcadYearId">XX</param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_fGpa"></param>
		///<param name="_tGpa"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_onlineFlg">يسمح للطلاب التسجيل اونلاين</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_audtNote"></param>
		public EdSemAgendaDtlBase(System.Decimal _edSemAgendaDtlId, System.Decimal _edSemesterAgendaId, 
			System.Decimal? _fChPrcnt, System.Decimal? _tChPrcnt, System.Decimal? _fAdmAcadYearId, 
			System.DateTime? _regDate, System.Decimal? _tAdmAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal? _fGpa, System.Decimal? _tGpa, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal _onlineFlg, 
			System.DateTime? _lastDate, System.Decimal? _seUserId, System.String _audtNote)
		{
			this.entityData = new EdSemAgendaDtlEntityData();
			this.backupData = null;

			this.EdSemAgendaDtlId = _edSemAgendaDtlId;
			this.EdSemesterAgendaId = _edSemesterAgendaId;
			this.FChPrcnt = _fChPrcnt;
			this.TChPrcnt = _tChPrcnt;
			this.FAdmAcadYearId = _fAdmAcadYearId;
			this.RegDate = _regDate;
			this.TAdmAcadYearId = _tAdmAcadYearId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.FGpa = _fGpa;
			this.TGpa = _tGpa;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.OnlineFlg = _onlineFlg;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
			this.AudtNote = _audtNote;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdSemAgendaDtl"/> instance.
		///</summary>
		///<param name="_edSemAgendaDtlId"></param>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_fChPrcnt">XX</param>
		///<param name="_tChPrcnt">XX</param>
		///<param name="_fAdmAcadYearId">XX</param>
		///<param name="_regDate">XX</param>
		///<param name="_tAdmAcadYearId">XX</param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_fGpa"></param>
		///<param name="_tGpa"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_onlineFlg">يسمح للطلاب التسجيل اونلاين</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_audtNote"></param>
		public static EdSemAgendaDtl CreateEdSemAgendaDtl(System.Decimal _edSemAgendaDtlId, System.Decimal _edSemesterAgendaId, 
			System.Decimal? _fChPrcnt, System.Decimal? _tChPrcnt, System.Decimal? _fAdmAcadYearId, 
			System.DateTime? _regDate, System.Decimal? _tAdmAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal? _fGpa, System.Decimal? _tGpa, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal _onlineFlg, 
			System.DateTime? _lastDate, System.Decimal? _seUserId, System.String _audtNote)
		{
			EdSemAgendaDtl newEdSemAgendaDtl = new EdSemAgendaDtl();
			newEdSemAgendaDtl.EdSemAgendaDtlId = _edSemAgendaDtlId;
			newEdSemAgendaDtl.EdSemesterAgendaId = _edSemesterAgendaId;
			newEdSemAgendaDtl.FChPrcnt = _fChPrcnt;
			newEdSemAgendaDtl.TChPrcnt = _tChPrcnt;
			newEdSemAgendaDtl.FAdmAcadYearId = _fAdmAcadYearId;
			newEdSemAgendaDtl.RegDate = _regDate;
			newEdSemAgendaDtl.TAdmAcadYearId = _tAdmAcadYearId;
			newEdSemAgendaDtl.AsFacultyInfoId = _asFacultyInfoId;
			newEdSemAgendaDtl.EdCodeLevelId = _edCodeLevelId;
			newEdSemAgendaDtl.FGpa = _fGpa;
			newEdSemAgendaDtl.TGpa = _tGpa;
			newEdSemAgendaDtl.FromDate = _fromDate;
			newEdSemAgendaDtl.ToDate = _toDate;
			newEdSemAgendaDtl.OnlineFlg = _onlineFlg;
			newEdSemAgendaDtl.LastDate = _lastDate;
			newEdSemAgendaDtl.SeUserId = _seUserId;
			newEdSemAgendaDtl.AudtNote = _audtNote;
			return newEdSemAgendaDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdSemAgendaDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdSemAgendaDtlId
		{
			get
			{
				return this.entityData.EdSemAgendaDtlId; 
			}
			
			set
			{
				if (this.entityData.EdSemAgendaDtlId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.EdSemAgendaDtlId, this.entityData.EdSemAgendaDtlId);
				this.entityData.EdSemAgendaDtlId = value;
				this.EntityId.EdSemAgendaDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.EdSemAgendaDtlId, this.entityData.EdSemAgendaDtlId);
				OnPropertyChanged("EdSemAgendaDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_SEM_AGENDA_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_SEM_AGENDA_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdSemAgendaDtlId
		{
			get { return this.entityData.OriginalEdSemAgendaDtlId; }
			set { this.entityData.OriginalEdSemAgendaDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdSemesterAgendaId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdSemesterAgendaId
		{
			get
			{
				return this.entityData.EdSemesterAgendaId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterAgendaId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				this.entityData.EdSemesterAgendaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				OnPropertyChanged("EdSemesterAgendaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FChPrcnt property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFChPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FChPrcnt
		{
			get
			{
				return this.entityData.FChPrcnt; 
			}
			
			set
			{
				if (this.entityData.FChPrcnt == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.FChPrcnt, this.entityData.FChPrcnt);
				this.entityData.FChPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.FChPrcnt, this.entityData.FChPrcnt);
				OnPropertyChanged("FChPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TChPrcnt property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTChPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TChPrcnt
		{
			get
			{
				return this.entityData.TChPrcnt; 
			}
			
			set
			{
				if (this.entityData.TChPrcnt == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.TChPrcnt, this.entityData.TChPrcnt);
				this.entityData.TChPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.TChPrcnt, this.entityData.TChPrcnt);
				OnPropertyChanged("TChPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FAdmAcadYearId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFAdmAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FAdmAcadYearId
		{
			get
			{
				return this.entityData.FAdmAcadYearId; 
			}
			
			set
			{
				if (this.entityData.FAdmAcadYearId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.FAdmAcadYearId, this.entityData.FAdmAcadYearId);
				this.entityData.FAdmAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.FAdmAcadYearId, this.entityData.FAdmAcadYearId);
				OnPropertyChanged("FAdmAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegDate property. 
		///		XX
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRegDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RegDate
		{
			get
			{
				return this.entityData.RegDate; 
			}
			
			set
			{
				if (this.entityData.RegDate == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.RegDate, this.entityData.RegDate);
				this.entityData.RegDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.RegDate, this.entityData.RegDate);
				OnPropertyChanged("RegDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TAdmAcadYearId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTAdmAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TAdmAcadYearId
		{
			get
			{
				return this.entityData.TAdmAcadYearId; 
			}
			
			set
			{
				if (this.entityData.TAdmAcadYearId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.TAdmAcadYearId, this.entityData.TAdmAcadYearId);
				this.entityData.TAdmAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.TAdmAcadYearId, this.entityData.TAdmAcadYearId);
				OnPropertyChanged("TAdmAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FGpa
		{
			get
			{
				return this.entityData.FGpa; 
			}
			
			set
			{
				if (this.entityData.FGpa == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.FGpa, this.entityData.FGpa);
				this.entityData.FGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.FGpa, this.entityData.FGpa);
				OnPropertyChanged("FGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TGpa
		{
			get
			{
				return this.entityData.TGpa; 
			}
			
			set
			{
				if (this.entityData.TGpa == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.TGpa, this.entityData.TGpa);
				this.entityData.TGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.TGpa, this.entityData.TGpa);
				OnPropertyChanged("TGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		يسمح للطلاب التسجيل اونلاين
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يسمح للطلاب التسجيل اونلاين"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AudtNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String AudtNote
		{
			get
			{
				return this.entityData.AudtNote; 
			}
			
			set
			{
				if (this.entityData.AudtNote == value)
					return;
					
				OnColumnChanging(EdSemAgendaDtlColumn.AudtNote, this.entityData.AudtNote);
				this.entityData.AudtNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaDtlColumn.AudtNote, this.entityData.AudtNote);
				OnPropertyChanged("AudtNote");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for FAdmAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear FAdmAcadYearIdSource
      	{
            get { return entityData.FAdmAcadYearIdSource; }
            set { entityData.FAdmAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for TAdmAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear TAdmAcadYearIdSource
      	{
            get { return entityData.TAdmAcadYearIdSource; }
            set { entityData.TAdmAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterAgenda"/>.
		/// </summary>
		/// <value>The source EdSemesterAgenda for EdSemesterAgendaId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdSemesterAgenda EdSemesterAgendaIdSource
      	{
            get { return entityData.EdSemesterAgendaIdSource; }
            set { entityData.EdSemesterAgendaIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AudtNote", "Audt Note", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_SEM_AGENDA_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_SEM_AGENDA_DTL_ID", "ED_SEMESTER_AGENDA_ID", "F_CH_PRCNT", "T_CH_PRCNT", "F_ADM_ACAD_YEAR_ID", "REG_DATE", "T_ADM_ACAD_YEAR_ID", "AS_FACULTY_INFO_ID", "ED_CODE_LEVEL_ID", "F_GPA", "T_GPA", "FROM_DATE", "TO_DATE", "ONLINE_FLG", "LAST_DATE", "SE_USER_ID", "AUDT_NOTE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdSemAgendaDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdSemAgendaDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdSemAgendaDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdSemAgendaDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdSemAgendaDtl Entity 
		///</summary>
		protected virtual EdSemAgendaDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdSemAgendaDtl copy = new EdSemAgendaDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdSemAgendaDtlId = this.EdSemAgendaDtlId;
					copy.OriginalEdSemAgendaDtlId = this.OriginalEdSemAgendaDtlId;
				copy.EdSemesterAgendaId = this.EdSemesterAgendaId;
				copy.FChPrcnt = this.FChPrcnt;
				copy.TChPrcnt = this.TChPrcnt;
				copy.FAdmAcadYearId = this.FAdmAcadYearId;
				copy.RegDate = this.RegDate;
				copy.TAdmAcadYearId = this.TAdmAcadYearId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.FGpa = this.FGpa;
				copy.TGpa = this.TGpa;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.OnlineFlg = this.OnlineFlg;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
				copy.AudtNote = this.AudtNote;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.FAdmAcadYearIdSource != null && existingCopies.Contains(this.FAdmAcadYearIdSource))
				copy.FAdmAcadYearIdSource = existingCopies[this.FAdmAcadYearIdSource] as EdAcadYear;
			else
				copy.FAdmAcadYearIdSource = MakeCopyOf(this.FAdmAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.TAdmAcadYearIdSource != null && existingCopies.Contains(this.TAdmAcadYearIdSource))
				copy.TAdmAcadYearIdSource = existingCopies[this.TAdmAcadYearIdSource] as EdAcadYear;
			else
				copy.TAdmAcadYearIdSource = MakeCopyOf(this.TAdmAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdSemesterAgendaIdSource != null && existingCopies.Contains(this.EdSemesterAgendaIdSource))
				copy.EdSemesterAgendaIdSource = existingCopies[this.EdSemesterAgendaIdSource] as EdSemesterAgenda;
			else
				copy.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource, existingCopies) as EdSemesterAgenda;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdSemAgendaDtl Entity 
		///</summary>
		public virtual EdSemAgendaDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdSemAgendaDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdSemAgendaDtl DeepCopy()
		{
			return EntityHelper.Clone<EdSemAgendaDtl>(this as EdSemAgendaDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdSemAgendaDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdSemAgendaDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdSemAgendaDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdSemAgendaDtlColumn column)
		{
			switch(column)
			{
					case EdSemAgendaDtlColumn.EdSemAgendaDtlId:
					return entityData.EdSemAgendaDtlId != _originalData.EdSemAgendaDtlId;
					case EdSemAgendaDtlColumn.EdSemesterAgendaId:
					return entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
					case EdSemAgendaDtlColumn.FChPrcnt:
					return entityData.FChPrcnt != _originalData.FChPrcnt;
					case EdSemAgendaDtlColumn.TChPrcnt:
					return entityData.TChPrcnt != _originalData.TChPrcnt;
					case EdSemAgendaDtlColumn.FAdmAcadYearId:
					return entityData.FAdmAcadYearId != _originalData.FAdmAcadYearId;
					case EdSemAgendaDtlColumn.RegDate:
					return entityData.RegDate != _originalData.RegDate;
					case EdSemAgendaDtlColumn.TAdmAcadYearId:
					return entityData.TAdmAcadYearId != _originalData.TAdmAcadYearId;
					case EdSemAgendaDtlColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdSemAgendaDtlColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EdSemAgendaDtlColumn.FGpa:
					return entityData.FGpa != _originalData.FGpa;
					case EdSemAgendaDtlColumn.TGpa:
					return entityData.TGpa != _originalData.TGpa;
					case EdSemAgendaDtlColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case EdSemAgendaDtlColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case EdSemAgendaDtlColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case EdSemAgendaDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdSemAgendaDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdSemAgendaDtlColumn.AudtNote:
					return entityData.AudtNote != _originalData.AudtNote;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdSemAgendaDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdSemAgendaDtlId != _originalData.EdSemAgendaDtlId;
			result = result || entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
			result = result || entityData.FChPrcnt != _originalData.FChPrcnt;
			result = result || entityData.TChPrcnt != _originalData.TChPrcnt;
			result = result || entityData.FAdmAcadYearId != _originalData.FAdmAcadYearId;
			result = result || entityData.RegDate != _originalData.RegDate;
			result = result || entityData.TAdmAcadYearId != _originalData.TAdmAcadYearId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.FGpa != _originalData.FGpa;
			result = result || entityData.TGpa != _originalData.TGpa;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.AudtNote != _originalData.AudtNote;
			return result;
		}	
		
		///<summary>
		///  Returns a EdSemAgendaDtl Entity with the original data.
		///</summary>
		public EdSemAgendaDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdSemAgendaDtl(
				_originalData.EdSemAgendaDtlId,
				_originalData.EdSemesterAgendaId,
				_originalData.FChPrcnt,
				_originalData.TChPrcnt,
				_originalData.FAdmAcadYearId,
				_originalData.RegDate,
				_originalData.TAdmAcadYearId,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeLevelId,
				_originalData.FGpa,
				_originalData.TGpa,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.OnlineFlg,
				_originalData.LastDate,
				_originalData.SeUserId,
				_originalData.AudtNote
				);
				
			return (EdSemAgendaDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdSemAgendaDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdSemAgendaDtlBase)
				return ValueEquals(this, (EdSemAgendaDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdSemAgendaDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdSemAgendaDtlId.GetHashCode() ^ 
					this.EdSemesterAgendaId.GetHashCode() ^ 
					((this.FChPrcnt == null) ? string.Empty : this.FChPrcnt.ToString()).GetHashCode() ^ 
					((this.TChPrcnt == null) ? string.Empty : this.TChPrcnt.ToString()).GetHashCode() ^ 
					((this.FAdmAcadYearId == null) ? string.Empty : this.FAdmAcadYearId.ToString()).GetHashCode() ^ 
					((this.RegDate == null) ? string.Empty : this.RegDate.ToString()).GetHashCode() ^ 
					((this.TAdmAcadYearId == null) ? string.Empty : this.TAdmAcadYearId.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					((this.FGpa == null) ? string.Empty : this.FGpa.ToString()).GetHashCode() ^ 
					((this.TGpa == null) ? string.Empty : this.TGpa.ToString()).GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					this.OnlineFlg.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.AudtNote == null) ? string.Empty : this.AudtNote.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdSemAgendaDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdSemAgendaDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdSemAgendaDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdSemAgendaDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdSemAgendaDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdSemAgendaDtlBase Object1, EdSemAgendaDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdSemAgendaDtlId != Object2.EdSemAgendaDtlId)
				equal = false;
			if (Object1.EdSemesterAgendaId != Object2.EdSemesterAgendaId)
				equal = false;
			if ( Object1.FChPrcnt != null && Object2.FChPrcnt != null )
			{
				if (Object1.FChPrcnt != Object2.FChPrcnt)
					equal = false;
			}
			else if (Object1.FChPrcnt == null ^ Object2.FChPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.TChPrcnt != null && Object2.TChPrcnt != null )
			{
				if (Object1.TChPrcnt != Object2.TChPrcnt)
					equal = false;
			}
			else if (Object1.TChPrcnt == null ^ Object2.TChPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.FAdmAcadYearId != null && Object2.FAdmAcadYearId != null )
			{
				if (Object1.FAdmAcadYearId != Object2.FAdmAcadYearId)
					equal = false;
			}
			else if (Object1.FAdmAcadYearId == null ^ Object2.FAdmAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.RegDate != null && Object2.RegDate != null )
			{
				if (Object1.RegDate != Object2.RegDate)
					equal = false;
			}
			else if (Object1.RegDate == null ^ Object2.RegDate == null )
			{
				equal = false;
			}
			if ( Object1.TAdmAcadYearId != null && Object2.TAdmAcadYearId != null )
			{
				if (Object1.TAdmAcadYearId != Object2.TAdmAcadYearId)
					equal = false;
			}
			else if (Object1.TAdmAcadYearId == null ^ Object2.TAdmAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if ( Object1.FGpa != null && Object2.FGpa != null )
			{
				if (Object1.FGpa != Object2.FGpa)
					equal = false;
			}
			else if (Object1.FGpa == null ^ Object2.FGpa == null )
			{
				equal = false;
			}
			if ( Object1.TGpa != null && Object2.TGpa != null )
			{
				if (Object1.TGpa != Object2.TGpa)
					equal = false;
			}
			else if (Object1.TGpa == null ^ Object2.TGpa == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if (Object1.OnlineFlg != Object2.OnlineFlg)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.AudtNote != null && Object2.AudtNote != null )
			{
				if (Object1.AudtNote != Object2.AudtNote)
					equal = false;
			}
			else if (Object1.AudtNote == null ^ Object2.AudtNote == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdSemAgendaDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdSemAgendaDtlComparer GetComparer()
        {
            return new EdSemAgendaDtlComparer();
        }
        */

        // Comparer delegates back to EdSemAgendaDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdSemAgendaDtl rhs, EdSemAgendaDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdSemAgendaDtlColumn.EdSemAgendaDtlId:
            		return this.EdSemAgendaDtlId.CompareTo(rhs.EdSemAgendaDtlId);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.EdSemesterAgendaId:
            		return this.EdSemesterAgendaId.CompareTo(rhs.EdSemesterAgendaId);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.FChPrcnt:
            		return this.FChPrcnt.Value.CompareTo(rhs.FChPrcnt.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.TChPrcnt:
            		return this.TChPrcnt.Value.CompareTo(rhs.TChPrcnt.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.FAdmAcadYearId:
            		return this.FAdmAcadYearId.Value.CompareTo(rhs.FAdmAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.RegDate:
            		return this.RegDate.Value.CompareTo(rhs.RegDate.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.TAdmAcadYearId:
            		return this.TAdmAcadYearId.Value.CompareTo(rhs.TAdmAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.FGpa:
            		return this.FGpa.Value.CompareTo(rhs.FGpa.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.TGpa:
            		return this.TGpa.Value.CompareTo(rhs.TGpa.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.OnlineFlg:
            		return this.OnlineFlg.CompareTo(rhs.OnlineFlg);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaDtlColumn.AudtNote:
            		return this.AudtNote.CompareTo(rhs.AudtNote);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdSemAgendaDtlKey> Members
		
		// member variable for the EntityId property
		private EdSemAgendaDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdSemAgendaDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdSemAgendaDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdSemAgendaDtl")
					.Append("|").Append( this.EdSemAgendaDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- EdSemAgendaDtlId: {0}{17}- EdSemesterAgendaId: {1}{17}- FChPrcnt: {2}{17}- TChPrcnt: {3}{17}- FAdmAcadYearId: {4}{17}- RegDate: {5}{17}- TAdmAcadYearId: {6}{17}- AsFacultyInfoId: {7}{17}- EdCodeLevelId: {8}{17}- FGpa: {9}{17}- TGpa: {10}{17}- FromDate: {11}{17}- ToDate: {12}{17}- OnlineFlg: {13}{17}- LastDate: {14}{17}- SeUserId: {15}{17}- AudtNote: {16}{17}{19}", 
				this.EdSemAgendaDtlId,
				this.EdSemesterAgendaId,
				(this.FChPrcnt == null) ? string.Empty : this.FChPrcnt.ToString(),
				(this.TChPrcnt == null) ? string.Empty : this.TChPrcnt.ToString(),
				(this.FAdmAcadYearId == null) ? string.Empty : this.FAdmAcadYearId.ToString(),
				(this.RegDate == null) ? string.Empty : this.RegDate.ToString(),
				(this.TAdmAcadYearId == null) ? string.Empty : this.TAdmAcadYearId.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				(this.FGpa == null) ? string.Empty : this.FGpa.ToString(),
				(this.TGpa == null) ? string.Empty : this.TGpa.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				this.OnlineFlg,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.AudtNote == null) ? string.Empty : this.AudtNote.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_SEM_AGENDA_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdSemAgendaDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_SEM_AGENDA_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_SEM_AGENDA_DTL"</remarks>
		public System.Decimal EdSemAgendaDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdSemAgendaDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_SEMESTER_AGENDA_ID : 
		/// </summary>
		public System.Decimal		  EdSemesterAgendaId = 0.0m;
		
		/// <summary>
		/// F_CH_PRCNT : XX
		/// </summary>
		public System.Decimal?		  FChPrcnt = null;
		
		/// <summary>
		/// T_CH_PRCNT : XX
		/// </summary>
		public System.Decimal?		  TChPrcnt = null;
		
		/// <summary>
		/// F_ADM_ACAD_YEAR_ID : XX
		/// </summary>
		public System.Decimal?		  FAdmAcadYearId = null;
		
		/// <summary>
		/// REG_DATE : XX
		/// </summary>
		public System.DateTime?		  RegDate = null;
		
		/// <summary>
		/// T_ADM_ACAD_YEAR_ID : XX
		/// </summary>
		public System.Decimal?		  TAdmAcadYearId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// F_GPA : 
		/// </summary>
		public System.Decimal?		  FGpa = null;
		
		/// <summary>
		/// T_GPA : 
		/// </summary>
		public System.Decimal?		  TGpa = null;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// ONLINE_FLG : يسمح للطلاب التسجيل اونلاين
		/// </summary>
		public System.Decimal		  OnlineFlg = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// AUDT_NOTE : 
		/// </summary>
		public System.String		  AudtNote = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _fadmAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for FAdmAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear FAdmAcadYearIdSource
      	{
            get { return this._fadmAcadYearIdSource; }
            set { this._fadmAcadYearIdSource = value; }
      	}
		private EdAcadYear _tadmAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for TAdmAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear TAdmAcadYearIdSource
      	{
            get { return this._tadmAcadYearIdSource; }
            set { this._tadmAcadYearIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdSemesterAgenda _edSemesterAgendaIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterAgenda"/>.
		/// </summary>
		/// <value>The source EdSemesterAgenda for EdSemesterAgendaId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdSemesterAgenda EdSemesterAgendaIdSource
      	{
            get { return this._edSemesterAgendaIdSource; }
            set { this._edSemesterAgendaIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdSemAgendaDtlEntityData _tmp = new EdSemAgendaDtlEntityData();
						
			_tmp.EdSemAgendaDtlId = this.EdSemAgendaDtlId;
			_tmp.OriginalEdSemAgendaDtlId = this.OriginalEdSemAgendaDtlId;
			
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.FChPrcnt = this.FChPrcnt;
			_tmp.TChPrcnt = this.TChPrcnt;
			_tmp.FAdmAcadYearId = this.FAdmAcadYearId;
			_tmp.RegDate = this.RegDate;
			_tmp.TAdmAcadYearId = this.TAdmAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FGpa = this.FGpa;
			_tmp.TGpa = this.TGpa;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AudtNote = this.AudtNote;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.FAdmAcadYearIdSource != null)
				_tmp.FAdmAcadYearIdSource = MakeCopyOf(this.FAdmAcadYearIdSource) as EdAcadYear;
			if (this.TAdmAcadYearIdSource != null)
				_tmp.TAdmAcadYearIdSource = MakeCopyOf(this.TAdmAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdSemesterAgendaIdSource != null)
				_tmp.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource) as EdSemesterAgenda;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdSemAgendaDtlEntityData _tmp = new EdSemAgendaDtlEntityData();
						
			_tmp.EdSemAgendaDtlId = this.EdSemAgendaDtlId;
			_tmp.OriginalEdSemAgendaDtlId = this.OriginalEdSemAgendaDtlId;
			
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.FChPrcnt = this.FChPrcnt;
			_tmp.TChPrcnt = this.TChPrcnt;
			_tmp.FAdmAcadYearId = this.FAdmAcadYearId;
			_tmp.RegDate = this.RegDate;
			_tmp.TAdmAcadYearId = this.TAdmAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FGpa = this.FGpa;
			_tmp.TGpa = this.TGpa;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AudtNote = this.AudtNote;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.FAdmAcadYearIdSource != null && existingCopies.Contains(this.FAdmAcadYearIdSource))
				_tmp.FAdmAcadYearIdSource = existingCopies[this.FAdmAcadYearIdSource] as EdAcadYear;
			else
				_tmp.FAdmAcadYearIdSource = MakeCopyOf(this.FAdmAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.TAdmAcadYearIdSource != null && existingCopies.Contains(this.TAdmAcadYearIdSource))
				_tmp.TAdmAcadYearIdSource = existingCopies[this.TAdmAcadYearIdSource] as EdAcadYear;
			else
				_tmp.TAdmAcadYearIdSource = MakeCopyOf(this.TAdmAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdSemesterAgendaIdSource != null && existingCopies.Contains(this.EdSemesterAgendaIdSource))
				_tmp.EdSemesterAgendaIdSource = existingCopies[this.EdSemesterAgendaIdSource] as EdSemesterAgenda;
			else
				_tmp.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource, existingCopies) as EdSemesterAgenda;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdSemAgendaDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdSemAgendaDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdSemAgendaDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdSemAgendaDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdSemAgendaDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdSemAgendaDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdSemAgendaDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdSemAgendaDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdSemAgendaDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdSemAgendaDtl"/> object.
	/// </remarks>
	public class EdSemAgendaDtlEventArgs : System.EventArgs
	{
		private EdSemAgendaDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdSemAgendaDtlEventArgs class.
		///</summary>
		public EdSemAgendaDtlEventArgs(EdSemAgendaDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdSemAgendaDtlEventArgs class.
		///</summary>
		public EdSemAgendaDtlEventArgs(EdSemAgendaDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdSemAgendaDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdSemAgendaDtlColumn" />
		public EdSemAgendaDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdSemAgendaDtl related events.
	///</summary>
	public delegate void EdSemAgendaDtlEventHandler(object sender, EdSemAgendaDtlEventArgs e);
	
	#region EdSemAgendaDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdSemAgendaDtlComparer : System.Collections.Generic.IComparer<EdSemAgendaDtl>
	{
		EdSemAgendaDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemAgendaDtlComparer"/> class.
        /// </summary>
		public EdSemAgendaDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemAgendaDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdSemAgendaDtlComparer(EdSemAgendaDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdSemAgendaDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdSemAgendaDtl"/> to compare.</param>
        /// <param name="b">The second <c>EdSemAgendaDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdSemAgendaDtl a, EdSemAgendaDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdSemAgendaDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdSemAgendaDtl a, EdSemAgendaDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdSemAgendaDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdSemAgendaDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdSemAgendaDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdSemAgendaDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlKey class.
		/// </summary>
		public EdSemAgendaDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlKey class.
		/// </summary>
		public EdSemAgendaDtlKey(EdSemAgendaDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdSemAgendaDtlId = entity.EdSemAgendaDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaDtlKey class.
		/// </summary>
		public EdSemAgendaDtlKey(System.Decimal _edSemAgendaDtlId)
		{
			#region Init Properties

			this.EdSemAgendaDtlId = _edSemAgendaDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdSemAgendaDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdSemAgendaDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdSemAgendaDtlId property
		private System.Decimal _edSemAgendaDtlId;
		
		/// <summary>
		/// Gets or sets the EdSemAgendaDtlId property.
		/// </summary>
		public System.Decimal EdSemAgendaDtlId
		{
			get { return _edSemAgendaDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdSemAgendaDtlId = value;
				
				_edSemAgendaDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdSemAgendaDtlId = ( values["EdSemAgendaDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdSemAgendaDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdSemAgendaDtlId", EdSemAgendaDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdSemAgendaDtlId: {0}{1}",
								EdSemAgendaDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdSemAgendaDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EdSemAgendaDtl columns.
	/// </summary>
	[Serializable]
	public enum EdSemAgendaDtlColumn : int
	{
		/// <summary>
		/// EdSemAgendaDtlId : 
		/// </summary>
		[EnumTextValue("ED_SEM_AGENDA_DTL_ID")]
		[ColumnEnum("ED_SEM_AGENDA_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdSemAgendaDtlId = 1,
		/// <summary>
		/// EdSemesterAgendaId : 
		/// </summary>
		[EnumTextValue("ED_SEMESTER_AGENDA_ID")]
		[ColumnEnum("ED_SEMESTER_AGENDA_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdSemesterAgendaId = 2,
		/// <summary>
		/// FChPrcnt : XX
		/// </summary>
		[EnumTextValue("F_CH_PRCNT")]
		[ColumnEnum("F_CH_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FChPrcnt = 3,
		/// <summary>
		/// TChPrcnt : XX
		/// </summary>
		[EnumTextValue("T_CH_PRCNT")]
		[ColumnEnum("T_CH_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TChPrcnt = 4,
		/// <summary>
		/// FAdmAcadYearId : XX
		/// </summary>
		[EnumTextValue("F_ADM_ACAD_YEAR_ID")]
		[ColumnEnum("F_ADM_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FAdmAcadYearId = 5,
		/// <summary>
		/// RegDate : XX
		/// </summary>
		[EnumTextValue("REG_DATE")]
		[ColumnEnum("REG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RegDate = 6,
		/// <summary>
		/// TAdmAcadYearId : XX
		/// </summary>
		[EnumTextValue("T_ADM_ACAD_YEAR_ID")]
		[ColumnEnum("T_ADM_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TAdmAcadYearId = 7,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 8,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 9,
		/// <summary>
		/// FGpa : 
		/// </summary>
		[EnumTextValue("F_GPA")]
		[ColumnEnum("F_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FGpa = 10,
		/// <summary>
		/// TGpa : 
		/// </summary>
		[EnumTextValue("T_GPA")]
		[ColumnEnum("T_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TGpa = 11,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 12,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 13,
		/// <summary>
		/// OnlineFlg : يسمح للطلاب التسجيل اونلاين
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OnlineFlg = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 16,
		/// <summary>
		/// AudtNote : 
		/// </summary>
		[EnumTextValue("AUDT_NOTE")]
		[ColumnEnum("AUDT_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		AudtNote = 17
	}//End enum

	#endregion EdSemAgendaDtlColumn Enum

} // end namespace
