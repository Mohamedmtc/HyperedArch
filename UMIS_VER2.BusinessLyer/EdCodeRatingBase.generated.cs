
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCodeRating.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CODE_RATING' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCodeRatingBase : EntityBase, IEdCodeRating, IEntityId<EdCodeRatingKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCodeRatingEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCodeRatingEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCodeRatingEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCodeRating> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeRatingEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeRatingEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCodeRatingBase"/> instance.
		///</summary>
		public EdCodeRatingBase()
		{
			this.entityData = new EdCodeRatingEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCodeRatingBase"/> instance.
		///</summary>
		///<param name="_edCodeRatingId">XX</param>
		///<param name="_ratingDescrAr"></param>
		///<param name="_ratingDescrEn"></param>
		///<param name="_ratingSymbolAr"></param>
		///<param name="_ratingSymbolEn"></param>
		///<param name="_ratingOrder"></param>
		///<param name="_ratingCode"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_isLeastSuccess"></param>
		public EdCodeRatingBase(System.Decimal _edCodeRatingId, System.String _ratingDescrAr, 
			System.String _ratingDescrEn, System.String _ratingSymbolAr, System.String _ratingSymbolEn, 
			System.String _ratingOrder, System.String _ratingCode, System.Decimal _edCodeStudyMethodId, 
			System.Decimal? _isLeastSuccess)
		{
			this.entityData = new EdCodeRatingEntityData();
			this.backupData = null;

			this.EdCodeRatingId = _edCodeRatingId;
			this.RatingDescrAr = _ratingDescrAr;
			this.RatingDescrEn = _ratingDescrEn;
			this.RatingSymbolAr = _ratingSymbolAr;
			this.RatingSymbolEn = _ratingSymbolEn;
			this.RatingOrder = _ratingOrder;
			this.RatingCode = _ratingCode;
			this.EdCodeStudyMethodId = _edCodeStudyMethodId;
			this.IsLeastSuccess = _isLeastSuccess;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCodeRating"/> instance.
		///</summary>
		///<param name="_edCodeRatingId">XX</param>
		///<param name="_ratingDescrAr"></param>
		///<param name="_ratingDescrEn"></param>
		///<param name="_ratingSymbolAr"></param>
		///<param name="_ratingSymbolEn"></param>
		///<param name="_ratingOrder"></param>
		///<param name="_ratingCode"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_isLeastSuccess"></param>
		public static EdCodeRating CreateEdCodeRating(System.Decimal _edCodeRatingId, System.String _ratingDescrAr, 
			System.String _ratingDescrEn, System.String _ratingSymbolAr, System.String _ratingSymbolEn, 
			System.String _ratingOrder, System.String _ratingCode, System.Decimal _edCodeStudyMethodId, 
			System.Decimal? _isLeastSuccess)
		{
			EdCodeRating newEdCodeRating = new EdCodeRating();
			newEdCodeRating.EdCodeRatingId = _edCodeRatingId;
			newEdCodeRating.RatingDescrAr = _ratingDescrAr;
			newEdCodeRating.RatingDescrEn = _ratingDescrEn;
			newEdCodeRating.RatingSymbolAr = _ratingSymbolAr;
			newEdCodeRating.RatingSymbolEn = _ratingSymbolEn;
			newEdCodeRating.RatingOrder = _ratingOrder;
			newEdCodeRating.RatingCode = _ratingCode;
			newEdCodeRating.EdCodeStudyMethodId = _edCodeStudyMethodId;
			newEdCodeRating.IsLeastSuccess = _isLeastSuccess;
			return newEdCodeRating;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCodeRatingId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCodeRatingId
		{
			get
			{
				return this.entityData.EdCodeRatingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeRatingId == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.EdCodeRatingId, this.entityData.EdCodeRatingId);
				this.entityData.EdCodeRatingId = value;
				this.EntityId.EdCodeRatingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.EdCodeRatingId, this.entityData.EdCodeRatingId);
				OnPropertyChanged("EdCodeRatingId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CODE_RATING_ID property.
		///		XX
		/// </summary>
		/// <remarks>This is the original value of the ED_CODE_RATING_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCodeRatingId
		{
			get { return this.entityData.OriginalEdCodeRatingId; }
			set { this.entityData.OriginalEdCodeRatingId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the RatingDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String RatingDescrAr
		{
			get
			{
				return this.entityData.RatingDescrAr; 
			}
			
			set
			{
				if (this.entityData.RatingDescrAr == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingDescrAr, this.entityData.RatingDescrAr);
				this.entityData.RatingDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingDescrAr, this.entityData.RatingDescrAr);
				OnPropertyChanged("RatingDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RatingDescrEn
		{
			get
			{
				return this.entityData.RatingDescrEn; 
			}
			
			set
			{
				if (this.entityData.RatingDescrEn == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingDescrEn, this.entityData.RatingDescrEn);
				this.entityData.RatingDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingDescrEn, this.entityData.RatingDescrEn);
				OnPropertyChanged("RatingDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingSymbolAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String RatingSymbolAr
		{
			get
			{
				return this.entityData.RatingSymbolAr; 
			}
			
			set
			{
				if (this.entityData.RatingSymbolAr == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingSymbolAr, this.entityData.RatingSymbolAr);
				this.entityData.RatingSymbolAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingSymbolAr, this.entityData.RatingSymbolAr);
				OnPropertyChanged("RatingSymbolAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingSymbolEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String RatingSymbolEn
		{
			get
			{
				return this.entityData.RatingSymbolEn; 
			}
			
			set
			{
				if (this.entityData.RatingSymbolEn == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingSymbolEn, this.entityData.RatingSymbolEn);
				this.entityData.RatingSymbolEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingSymbolEn, this.entityData.RatingSymbolEn);
				OnPropertyChanged("RatingSymbolEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingOrder property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String RatingOrder
		{
			get
			{
				return this.entityData.RatingOrder; 
			}
			
			set
			{
				if (this.entityData.RatingOrder == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingOrder, this.entityData.RatingOrder);
				this.entityData.RatingOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingOrder, this.entityData.RatingOrder);
				OnPropertyChanged("RatingOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String RatingCode
		{
			get
			{
				return this.entityData.RatingCode; 
			}
			
			set
			{
				if (this.entityData.RatingCode == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.RatingCode, this.entityData.RatingCode);
				this.entityData.RatingCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.RatingCode, this.entityData.RatingCode);
				OnPropertyChanged("RatingCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeStudyMethodId
		{
			get
			{
				return this.entityData.EdCodeStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudyMethodId == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				this.entityData.EdCodeStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				OnPropertyChanged("EdCodeStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLeastSuccess property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsLeastSuccessNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsLeastSuccess
		{
			get
			{
				return this.entityData.IsLeastSuccess; 
			}
			
			set
			{
				if (this.entityData.IsLeastSuccess == value)
					return;
					
				OnColumnChanging(EdCodeRatingColumn.IsLeastSuccess, this.entityData.IsLeastSuccess);
				this.entityData.IsLeastSuccess = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeRatingColumn.IsLeastSuccess, this.entityData.IsLeastSuccess);
				OnPropertyChanged("IsLeastSuccess");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return entityData.EdCodeStudyMethodIdSource; }
            set { entityData.EdCodeStudyMethodIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("RatingDescrAr", "Rating Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingDescrAr", "Rating Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingDescrEn", "Rating Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingSymbolAr", "Rating Symbol Ar", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingSymbolEn", "Rating Symbol En", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("RatingOrder", "Rating Order"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingOrder", "Rating Order", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RatingCode", "Rating Code", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CODE_RATING"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CODE_RATING_ID", "RATING_DESCR_AR", "RATING_DESCR_EN", "RATING_SYMBOL_AR", "RATING_SYMBOL_EN", "RATING_ORDER", "RATING_CODE", "ED_CODE_STUDY_METHOD_ID", "IS_LEAST_SUCCESS"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCodeRatingEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCodeRating) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCodeRating>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCodeRating);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCodeRating Entity 
		///</summary>
		protected virtual EdCodeRating Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCodeRating copy = new EdCodeRating();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCodeRatingId = this.EdCodeRatingId;
					copy.OriginalEdCodeRatingId = this.OriginalEdCodeRatingId;
				copy.RatingDescrAr = this.RatingDescrAr;
				copy.RatingDescrEn = this.RatingDescrEn;
				copy.RatingSymbolAr = this.RatingSymbolAr;
				copy.RatingSymbolEn = this.RatingSymbolEn;
				copy.RatingOrder = this.RatingOrder;
				copy.RatingCode = this.RatingCode;
				copy.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
				copy.IsLeastSuccess = this.IsLeastSuccess;
			
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				copy.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCodeRating Entity 
		///</summary>
		public virtual EdCodeRating Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCodeRating Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCodeRating DeepCopy()
		{
			return EntityHelper.Clone<EdCodeRating>(this as EdCodeRating);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCodeRatingEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCodeRatingEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCodeRatingEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCodeRatingColumn column)
		{
			switch(column)
			{
					case EdCodeRatingColumn.EdCodeRatingId:
					return entityData.EdCodeRatingId != _originalData.EdCodeRatingId;
					case EdCodeRatingColumn.RatingDescrAr:
					return entityData.RatingDescrAr != _originalData.RatingDescrAr;
					case EdCodeRatingColumn.RatingDescrEn:
					return entityData.RatingDescrEn != _originalData.RatingDescrEn;
					case EdCodeRatingColumn.RatingSymbolAr:
					return entityData.RatingSymbolAr != _originalData.RatingSymbolAr;
					case EdCodeRatingColumn.RatingSymbolEn:
					return entityData.RatingSymbolEn != _originalData.RatingSymbolEn;
					case EdCodeRatingColumn.RatingOrder:
					return entityData.RatingOrder != _originalData.RatingOrder;
					case EdCodeRatingColumn.RatingCode:
					return entityData.RatingCode != _originalData.RatingCode;
					case EdCodeRatingColumn.EdCodeStudyMethodId:
					return entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
					case EdCodeRatingColumn.IsLeastSuccess:
					return entityData.IsLeastSuccess != _originalData.IsLeastSuccess;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCodeRatingColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCodeRatingId != _originalData.EdCodeRatingId;
			result = result || entityData.RatingDescrAr != _originalData.RatingDescrAr;
			result = result || entityData.RatingDescrEn != _originalData.RatingDescrEn;
			result = result || entityData.RatingSymbolAr != _originalData.RatingSymbolAr;
			result = result || entityData.RatingSymbolEn != _originalData.RatingSymbolEn;
			result = result || entityData.RatingOrder != _originalData.RatingOrder;
			result = result || entityData.RatingCode != _originalData.RatingCode;
			result = result || entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
			result = result || entityData.IsLeastSuccess != _originalData.IsLeastSuccess;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCodeRating Entity with the original data.
		///</summary>
		public EdCodeRating GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCodeRating(
				_originalData.EdCodeRatingId,
				_originalData.RatingDescrAr,
				_originalData.RatingDescrEn,
				_originalData.RatingSymbolAr,
				_originalData.RatingSymbolEn,
				_originalData.RatingOrder,
				_originalData.RatingCode,
				_originalData.EdCodeStudyMethodId,
				_originalData.IsLeastSuccess
				);
				
			return (EdCodeRating)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCodeRatingBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCodeRatingBase)
				return ValueEquals(this, (EdCodeRatingBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCodeRatingBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCodeRatingId.GetHashCode() ^ 
					this.RatingDescrAr.GetHashCode() ^ 
					((this.RatingDescrEn == null) ? string.Empty : this.RatingDescrEn.ToString()).GetHashCode() ^ 
					((this.RatingSymbolAr == null) ? string.Empty : this.RatingSymbolAr.ToString()).GetHashCode() ^ 
					((this.RatingSymbolEn == null) ? string.Empty : this.RatingSymbolEn.ToString()).GetHashCode() ^ 
					this.RatingOrder.GetHashCode() ^ 
					((this.RatingCode == null) ? string.Empty : this.RatingCode.ToString()).GetHashCode() ^ 
					this.EdCodeStudyMethodId.GetHashCode() ^ 
					((this.IsLeastSuccess == null) ? string.Empty : this.IsLeastSuccess.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCodeRatingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCodeRatingBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCodeRatingBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCodeRatingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCodeRatingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCodeRatingBase Object1, EdCodeRatingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCodeRatingId != Object2.EdCodeRatingId)
				equal = false;
			if (Object1.RatingDescrAr != Object2.RatingDescrAr)
				equal = false;
			if ( Object1.RatingDescrEn != null && Object2.RatingDescrEn != null )
			{
				if (Object1.RatingDescrEn != Object2.RatingDescrEn)
					equal = false;
			}
			else if (Object1.RatingDescrEn == null ^ Object2.RatingDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.RatingSymbolAr != null && Object2.RatingSymbolAr != null )
			{
				if (Object1.RatingSymbolAr != Object2.RatingSymbolAr)
					equal = false;
			}
			else if (Object1.RatingSymbolAr == null ^ Object2.RatingSymbolAr == null )
			{
				equal = false;
			}
			if ( Object1.RatingSymbolEn != null && Object2.RatingSymbolEn != null )
			{
				if (Object1.RatingSymbolEn != Object2.RatingSymbolEn)
					equal = false;
			}
			else if (Object1.RatingSymbolEn == null ^ Object2.RatingSymbolEn == null )
			{
				equal = false;
			}
			if (Object1.RatingOrder != Object2.RatingOrder)
				equal = false;
			if ( Object1.RatingCode != null && Object2.RatingCode != null )
			{
				if (Object1.RatingCode != Object2.RatingCode)
					equal = false;
			}
			else if (Object1.RatingCode == null ^ Object2.RatingCode == null )
			{
				equal = false;
			}
			if (Object1.EdCodeStudyMethodId != Object2.EdCodeStudyMethodId)
				equal = false;
			if ( Object1.IsLeastSuccess != null && Object2.IsLeastSuccess != null )
			{
				if (Object1.IsLeastSuccess != Object2.IsLeastSuccess)
					equal = false;
			}
			else if (Object1.IsLeastSuccess == null ^ Object2.IsLeastSuccess == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCodeRatingBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCodeRatingComparer GetComparer()
        {
            return new EdCodeRatingComparer();
        }
        */

        // Comparer delegates back to EdCodeRating
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCodeRating rhs, EdCodeRatingColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCodeRatingColumn.EdCodeRatingId:
            		return this.EdCodeRatingId.CompareTo(rhs.EdCodeRatingId);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingDescrAr:
            		return this.RatingDescrAr.CompareTo(rhs.RatingDescrAr);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingDescrEn:
            		return this.RatingDescrEn.CompareTo(rhs.RatingDescrEn);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingSymbolAr:
            		return this.RatingSymbolAr.CompareTo(rhs.RatingSymbolAr);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingSymbolEn:
            		return this.RatingSymbolEn.CompareTo(rhs.RatingSymbolEn);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingOrder:
            		return this.RatingOrder.CompareTo(rhs.RatingOrder);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.RatingCode:
            		return this.RatingCode.CompareTo(rhs.RatingCode);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.EdCodeStudyMethodId:
            		return this.EdCodeStudyMethodId.CompareTo(rhs.EdCodeStudyMethodId);
            		
            		                 
            	
            	
            	case EdCodeRatingColumn.IsLeastSuccess:
            		return this.IsLeastSuccess.Value.CompareTo(rhs.IsLeastSuccess.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCodeRatingKey> Members
		
		// member variable for the EntityId property
		private EdCodeRatingKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCodeRatingKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCodeRatingKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCodeRating")
					.Append("|").Append( this.EdCodeRatingId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EdCodeRatingId: {0}{9}- RatingDescrAr: {1}{9}- RatingDescrEn: {2}{9}- RatingSymbolAr: {3}{9}- RatingSymbolEn: {4}{9}- RatingOrder: {5}{9}- RatingCode: {6}{9}- EdCodeStudyMethodId: {7}{9}- IsLeastSuccess: {8}{9}{11}", 
				this.EdCodeRatingId,
				this.RatingDescrAr,
				(this.RatingDescrEn == null) ? string.Empty : this.RatingDescrEn.ToString(),
				(this.RatingSymbolAr == null) ? string.Empty : this.RatingSymbolAr.ToString(),
				(this.RatingSymbolEn == null) ? string.Empty : this.RatingSymbolEn.ToString(),
				this.RatingOrder,
				(this.RatingCode == null) ? string.Empty : this.RatingCode.ToString(),
				this.EdCodeStudyMethodId,
				(this.IsLeastSuccess == null) ? string.Empty : this.IsLeastSuccess.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CODE_RATING' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCodeRatingEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CODE_RATING_ID : XX
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CODE_RATING"</remarks>
		public System.Decimal EdCodeRatingId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCodeRatingId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RATING_DESCR_AR : 
		/// </summary>
		public System.String		  RatingDescrAr = string.Empty;
		
		/// <summary>
		/// RATING_DESCR_EN : 
		/// </summary>
		public System.String		  RatingDescrEn = null;
		
		/// <summary>
		/// RATING_SYMBOL_AR : 
		/// </summary>
		public System.String		  RatingSymbolAr = null;
		
		/// <summary>
		/// RATING_SYMBOL_EN : 
		/// </summary>
		public System.String		  RatingSymbolEn = null;
		
		/// <summary>
		/// RATING_ORDER : 
		/// </summary>
		public System.String		  RatingOrder = string.Empty;
		
		/// <summary>
		/// RATING_CODE : 
		/// </summary>
		public System.String		  RatingCode = null;
		
		/// <summary>
		/// ED_CODE_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal		  EdCodeStudyMethodId = 0.0m;
		
		/// <summary>
		/// IS_LEAST_SUCCESS : 
		/// </summary>
		public System.Decimal?		  IsLeastSuccess = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeStudyMethod _edCodeStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return this._edCodeStudyMethodIdSource; }
            set { this._edCodeStudyMethodIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCodeRatingEntityData _tmp = new EdCodeRatingEntityData();
						
			_tmp.EdCodeRatingId = this.EdCodeRatingId;
			_tmp.OriginalEdCodeRatingId = this.OriginalEdCodeRatingId;
			
			_tmp.RatingDescrAr = this.RatingDescrAr;
			_tmp.RatingDescrEn = this.RatingDescrEn;
			_tmp.RatingSymbolAr = this.RatingSymbolAr;
			_tmp.RatingSymbolEn = this.RatingSymbolEn;
			_tmp.RatingOrder = this.RatingOrder;
			_tmp.RatingCode = this.RatingCode;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.IsLeastSuccess = this.IsLeastSuccess;
			
			#region Source Parent Composite Entities
			if (this.EdCodeStudyMethodIdSource != null)
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource) as EdCodeStudyMethod;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCodeRatingEntityData _tmp = new EdCodeRatingEntityData();
						
			_tmp.EdCodeRatingId = this.EdCodeRatingId;
			_tmp.OriginalEdCodeRatingId = this.OriginalEdCodeRatingId;
			
			_tmp.RatingDescrAr = this.RatingDescrAr;
			_tmp.RatingDescrEn = this.RatingDescrEn;
			_tmp.RatingSymbolAr = this.RatingSymbolAr;
			_tmp.RatingSymbolEn = this.RatingSymbolEn;
			_tmp.RatingOrder = this.RatingOrder;
			_tmp.RatingCode = this.RatingCode;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.IsLeastSuccess = this.IsLeastSuccess;
			
			#region Source Parent Composite Entities
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				_tmp.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeRatingColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCodeRatingColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeRatingColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCodeRatingColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeRatingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCodeRatingColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCodeRatingEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCodeRatingEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeRatingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCodeRatingColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCodeRatingEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCodeRatingEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCodeRatingEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCodeRating"/> object.
	/// </remarks>
	public class EdCodeRatingEventArgs : System.EventArgs
	{
		private EdCodeRatingColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeRatingEventArgs class.
		///</summary>
		public EdCodeRatingEventArgs(EdCodeRatingColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeRatingEventArgs class.
		///</summary>
		public EdCodeRatingEventArgs(EdCodeRatingColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCodeRatingColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCodeRatingColumn" />
		public EdCodeRatingColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCodeRating related events.
	///</summary>
	public delegate void EdCodeRatingEventHandler(object sender, EdCodeRatingEventArgs e);
	
	#region EdCodeRatingComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCodeRatingComparer : System.Collections.Generic.IComparer<EdCodeRating>
	{
		EdCodeRatingColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeRatingComparer"/> class.
        /// </summary>
		public EdCodeRatingComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeRatingComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCodeRatingComparer(EdCodeRatingColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCodeRating"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCodeRating"/> to compare.</param>
        /// <param name="b">The second <c>EdCodeRating</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCodeRating a, EdCodeRating b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCodeRating entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCodeRating a, EdCodeRating b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCodeRatingColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCodeRatingKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCodeRating"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCodeRatingKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCodeRatingKey class.
		/// </summary>
		public EdCodeRatingKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeRatingKey class.
		/// </summary>
		public EdCodeRatingKey(EdCodeRatingBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCodeRatingId = entity.EdCodeRatingId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeRatingKey class.
		/// </summary>
		public EdCodeRatingKey(System.Decimal _edCodeRatingId)
		{
			#region Init Properties

			this.EdCodeRatingId = _edCodeRatingId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCodeRatingBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCodeRatingBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCodeRatingId property
		private System.Decimal _edCodeRatingId;
		
		/// <summary>
		/// Gets or sets the EdCodeRatingId property.
		/// </summary>
		public System.Decimal EdCodeRatingId
		{
			get { return _edCodeRatingId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCodeRatingId = value;
				
				_edCodeRatingId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCodeRatingId = ( values["EdCodeRatingId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCodeRatingId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCodeRatingId", EdCodeRatingId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCodeRatingId: {0}{1}",
								EdCodeRatingId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCodeRatingColumn Enum
	
	/// <summary>
	/// Enumerate the EdCodeRating columns.
	/// </summary>
	[Serializable]
	public enum EdCodeRatingColumn : int
	{
		/// <summary>
		/// EdCodeRatingId : XX
		/// </summary>
		[EnumTextValue("ED_CODE_RATING_ID")]
		[ColumnEnum("ED_CODE_RATING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCodeRatingId = 1,
		/// <summary>
		/// RatingDescrAr : 
		/// </summary>
		[EnumTextValue("RATING_DESCR_AR")]
		[ColumnEnum("RATING_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		RatingDescrAr = 2,
		/// <summary>
		/// RatingDescrEn : 
		/// </summary>
		[EnumTextValue("RATING_DESCR_EN")]
		[ColumnEnum("RATING_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RatingDescrEn = 3,
		/// <summary>
		/// RatingSymbolAr : 
		/// </summary>
		[EnumTextValue("RATING_SYMBOL_AR")]
		[ColumnEnum("RATING_SYMBOL_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		RatingSymbolAr = 4,
		/// <summary>
		/// RatingSymbolEn : 
		/// </summary>
		[EnumTextValue("RATING_SYMBOL_EN")]
		[ColumnEnum("RATING_SYMBOL_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		RatingSymbolEn = 5,
		/// <summary>
		/// RatingOrder : 
		/// </summary>
		[EnumTextValue("RATING_ORDER")]
		[ColumnEnum("RATING_ORDER", typeof(System.String), System.Data.DbType.String, false, false, false, 2)]
		RatingOrder = 6,
		/// <summary>
		/// RatingCode : 
		/// </summary>
		[EnumTextValue("RATING_CODE")]
		[ColumnEnum("RATING_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		RatingCode = 7,
		/// <summary>
		/// EdCodeStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_CODE_STUDY_METHOD_ID")]
		[ColumnEnum("ED_CODE_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeStudyMethodId = 8,
		/// <summary>
		/// IsLeastSuccess : 
		/// </summary>
		[EnumTextValue("IS_LEAST_SUCCESS")]
		[ColumnEnum("IS_LEAST_SUCCESS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsLeastSuccess = 9
	}//End enum

	#endregion EdCodeRatingColumn Enum

} // end namespace
