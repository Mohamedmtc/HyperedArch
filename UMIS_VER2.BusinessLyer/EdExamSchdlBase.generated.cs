
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdExamSchdl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_EXAM_SCHDL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdExamSchdlBase : EntityBase, IEdExamSchdl, IEntityId<EdExamSchdlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdExamSchdlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdExamSchdlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdExamSchdlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdExamSchdl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdExamSchdlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdExamSchdlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdExamSchdlBase"/> instance.
		///</summary>
		public EdExamSchdlBase()
		{
			this.entityData = new EdExamSchdlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdExamSchdlBase"/> instance.
		///</summary>
		///<param name="_edExamSchdlId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_examDate"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_notes"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_rsultApproveDate"></param>
		///<param name="_seUserRsultApproveId">اعتماد نتيجة دور اول  او دور تانى</param>
		///<param name="_exmSchdHodApproveDt">اعتماد جدول امتحان  دور اول ودور تانى Modular</param>
		///<param name="_exmSchdHodApprvUsrId">اعتماد جدول امتحان</param>
		///<param name="_examVersionNo">عدد نماذج</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeExamSchdlTypeId"></param>
		public EdExamSchdlBase(System.Decimal _edExamSchdlId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _edCodeCourseAssessId, System.Decimal _edCourseId, 
			System.DateTime? _examDate, System.DateTime? _fromTime, System.DateTime? _toTime, 
			System.String _notes, System.Decimal? _asFacultyInfoId, System.Decimal? _edCdeExamTypeId, 
			System.Decimal? _gsCodeGenderId, System.DateTime? _rsultApproveDate, System.Decimal? _seUserRsultApproveId, 
			System.DateTime? _exmSchdHodApproveDt, System.Decimal? _exmSchdHodApprvUsrId, System.Int32? _examVersionNo, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _edCdeExamSchdlTypeId)
		{
			this.entityData = new EdExamSchdlEntityData();
			this.backupData = null;

			this.EdExamSchdlId = _edExamSchdlId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdCodeCourseAssessId = _edCodeCourseAssessId;
			this.EdCourseId = _edCourseId;
			this.ExamDate = _examDate;
			this.FromTime = _fromTime;
			this.ToTime = _toTime;
			this.Notes = _notes;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.GsCodeGenderId = _gsCodeGenderId;
			this.RsultApproveDate = _rsultApproveDate;
			this.SeUserRsultApproveId = _seUserRsultApproveId;
			this.ExmSchdHodApproveDt = _exmSchdHodApproveDt;
			this.ExmSchdHodApprvUsrId = _exmSchdHodApprvUsrId;
			this.ExamVersionNo = _examVersionNo;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.EdCdeExamSchdlTypeId = _edCdeExamSchdlTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdExamSchdl"/> instance.
		///</summary>
		///<param name="_edExamSchdlId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_examDate"></param>
		///<param name="_fromTime"></param>
		///<param name="_toTime"></param>
		///<param name="_notes"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_rsultApproveDate"></param>
		///<param name="_seUserRsultApproveId">اعتماد نتيجة دور اول  او دور تانى</param>
		///<param name="_exmSchdHodApproveDt">اعتماد جدول امتحان  دور اول ودور تانى Modular</param>
		///<param name="_exmSchdHodApprvUsrId">اعتماد جدول امتحان</param>
		///<param name="_examVersionNo">عدد نماذج</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeExamSchdlTypeId"></param>
		public static EdExamSchdl CreateEdExamSchdl(System.Decimal _edExamSchdlId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _edCodeCourseAssessId, System.Decimal _edCourseId, 
			System.DateTime? _examDate, System.DateTime? _fromTime, System.DateTime? _toTime, 
			System.String _notes, System.Decimal? _asFacultyInfoId, System.Decimal? _edCdeExamTypeId, 
			System.Decimal? _gsCodeGenderId, System.DateTime? _rsultApproveDate, System.Decimal? _seUserRsultApproveId, 
			System.DateTime? _exmSchdHodApproveDt, System.Decimal? _exmSchdHodApprvUsrId, System.Int32? _examVersionNo, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _edCdeExamSchdlTypeId)
		{
			EdExamSchdl newEdExamSchdl = new EdExamSchdl();
			newEdExamSchdl.EdExamSchdlId = _edExamSchdlId;
			newEdExamSchdl.EdAcadYearId = _edAcadYearId;
			newEdExamSchdl.EdCodeSemesterId = _edCodeSemesterId;
			newEdExamSchdl.EdCodeCourseAssessId = _edCodeCourseAssessId;
			newEdExamSchdl.EdCourseId = _edCourseId;
			newEdExamSchdl.ExamDate = _examDate;
			newEdExamSchdl.FromTime = _fromTime;
			newEdExamSchdl.ToTime = _toTime;
			newEdExamSchdl.Notes = _notes;
			newEdExamSchdl.AsFacultyInfoId = _asFacultyInfoId;
			newEdExamSchdl.EdCdeExamTypeId = _edCdeExamTypeId;
			newEdExamSchdl.GsCodeGenderId = _gsCodeGenderId;
			newEdExamSchdl.RsultApproveDate = _rsultApproveDate;
			newEdExamSchdl.SeUserRsultApproveId = _seUserRsultApproveId;
			newEdExamSchdl.ExmSchdHodApproveDt = _exmSchdHodApproveDt;
			newEdExamSchdl.ExmSchdHodApprvUsrId = _exmSchdHodApprvUsrId;
			newEdExamSchdl.ExamVersionNo = _examVersionNo;
			newEdExamSchdl.SeUserId = _seUserId;
			newEdExamSchdl.LastDate = _lastDate;
			newEdExamSchdl.EdCdeExamSchdlTypeId = _edCdeExamSchdlTypeId;
			return newEdExamSchdl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdExamSchdlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdExamSchdlId
		{
			get
			{
				return this.entityData.EdExamSchdlId; 
			}
			
			set
			{
				if (this.entityData.EdExamSchdlId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdExamSchdlId, this.entityData.EdExamSchdlId);
				this.entityData.EdExamSchdlId = value;
				this.EntityId.EdExamSchdlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdExamSchdlId, this.entityData.EdExamSchdlId);
				OnPropertyChanged("EdExamSchdlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_EXAM_SCHDL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_EXAM_SCHDL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdExamSchdlId
		{
			get { return this.entityData.OriginalEdExamSchdlId; }
			set { this.entityData.OriginalEdExamSchdlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseAssessIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseAssessId
		{
			get
			{
				return this.entityData.EdCodeCourseAssessId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseAssessId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				this.entityData.EdCodeCourseAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				OnPropertyChanged("EdCodeCourseAssessId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExamDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExamDate
		{
			get
			{
				return this.entityData.ExamDate; 
			}
			
			set
			{
				if (this.entityData.ExamDate == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.ExamDate, this.entityData.ExamDate);
				this.entityData.ExamDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.ExamDate, this.entityData.ExamDate);
				OnPropertyChanged("ExamDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromTime
		{
			get
			{
				return this.entityData.FromTime; 
			}
			
			set
			{
				if (this.entityData.FromTime == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.FromTime, this.entityData.FromTime);
				this.entityData.FromTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.FromTime, this.entityData.FromTime);
				OnPropertyChanged("FromTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToTime
		{
			get
			{
				return this.entityData.ToTime; 
			}
			
			set
			{
				if (this.entityData.ToTime == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.ToTime, this.entityData.ToTime);
				this.entityData.ToTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.ToTime, this.entityData.ToTime);
				OnPropertyChanged("ToTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع الامتحان: تكميلى- اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الامتحان: تكميلى- اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeGenderId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeGenderIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeGenderId
		{
			get
			{
				return this.entityData.GsCodeGenderId; 
			}
			
			set
			{
				if (this.entityData.GsCodeGenderId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				this.entityData.GsCodeGenderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				OnPropertyChanged("GsCodeGenderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsultApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRsultApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RsultApproveDate
		{
			get
			{
				return this.entityData.RsultApproveDate; 
			}
			
			set
			{
				if (this.entityData.RsultApproveDate == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.RsultApproveDate, this.entityData.RsultApproveDate);
				this.entityData.RsultApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.RsultApproveDate, this.entityData.RsultApproveDate);
				OnPropertyChanged("RsultApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserRsultApproveId property. 
		///		اعتماد نتيجة دور اول  او دور تانى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserRsultApproveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد نتيجة دور اول  او دور تانى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserRsultApproveId
		{
			get
			{
				return this.entityData.SeUserRsultApproveId; 
			}
			
			set
			{
				if (this.entityData.SeUserRsultApproveId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.SeUserRsultApproveId, this.entityData.SeUserRsultApproveId);
				this.entityData.SeUserRsultApproveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.SeUserRsultApproveId, this.entityData.SeUserRsultApproveId);
				OnPropertyChanged("SeUserRsultApproveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmSchdHodApproveDt property. 
		///		اعتماد جدول امتحان  دور اول ودور تانى Modular
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExmSchdHodApproveDtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد جدول امتحان  دور اول ودور تانى Modular"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExmSchdHodApproveDt
		{
			get
			{
				return this.entityData.ExmSchdHodApproveDt; 
			}
			
			set
			{
				if (this.entityData.ExmSchdHodApproveDt == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.ExmSchdHodApproveDt, this.entityData.ExmSchdHodApproveDt);
				this.entityData.ExmSchdHodApproveDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.ExmSchdHodApproveDt, this.entityData.ExmSchdHodApproveDt);
				OnPropertyChanged("ExmSchdHodApproveDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmSchdHodApprvUsrId property. 
		///		اعتماد جدول امتحان
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExmSchdHodApprvUsrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد جدول امتحان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExmSchdHodApprvUsrId
		{
			get
			{
				return this.entityData.ExmSchdHodApprvUsrId; 
			}
			
			set
			{
				if (this.entityData.ExmSchdHodApprvUsrId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.ExmSchdHodApprvUsrId, this.entityData.ExmSchdHodApprvUsrId);
				this.entityData.ExmSchdHodApprvUsrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.ExmSchdHodApprvUsrId, this.entityData.ExmSchdHodApprvUsrId);
				OnPropertyChanged("ExmSchdHodApprvUsrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamVersionNo property. 
		///		عدد نماذج
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExamVersionNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد نماذج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExamVersionNo
		{
			get
			{
				return this.entityData.ExamVersionNo; 
			}
			
			set
			{
				if (this.entityData.ExamVersionNo == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.ExamVersionNo, this.entityData.ExamVersionNo);
				this.entityData.ExamVersionNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.ExamVersionNo, this.entityData.ExamVersionNo);
				OnPropertyChanged("ExamVersionNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamSchdlTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamSchdlTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamSchdlTypeId
		{
			get
			{
				return this.entityData.EdCdeExamSchdlTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamSchdlTypeId == value)
					return;
					
				OnColumnChanging(EdExamSchdlColumn.EdCdeExamSchdlTypeId, this.entityData.EdCdeExamSchdlTypeId);
				this.entityData.EdCdeExamSchdlTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdExamSchdlColumn.EdCdeExamSchdlTypeId, this.entityData.EdCdeExamSchdlTypeId);
				OnPropertyChanged("EdCdeExamSchdlTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamSchdlType"/>.
		/// </summary>
		/// <value>The source EdCdeExamSchdlType for EdCdeExamSchdlTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamSchdlType EdCdeExamSchdlTypeIdSource
      	{
            get { return entityData.EdCdeExamSchdlTypeIdSource; }
            set { entityData.EdCdeExamSchdlTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return entityData.EdCodeCourseAssessIdSource; }
            set { entityData.EdCodeCourseAssessIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return entityData.GsCodeGenderIdSource; }
            set { entityData.GsCodeGenderIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CoExaminerCorector objects
		///	which are related to this object through the relation FK_CO_EXAMINER_CORECTOR_ED_EXAM_SCHDL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExaminerCorector> CoExaminerCorectorCollection
		{
			get { return entityData.CoExaminerCorectorCollection; }
			set { entityData.CoExaminerCorectorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdExamStudAbsence objects
		///	which are related to this object through the relation FK_ED_EXAM_STUD_ABSENCE_ED_EXAM_SCHDL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdExamStudAbsence> EdExamStudAbsenceCollection
		{
			get { return entityData.EdExamStudAbsenceCollection; }
			set { entityData.EdExamStudAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCheat objects
		///	which are related to this object through the relation FK_ED_STUD_CHEAT_ED_EXAM_SCHDL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCheat> EdStudCheatCollection
		{
			get { return entityData.EdStudCheatCollection; }
			set { entityData.EdStudCheatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamSchdlPlace objects
		///	which are related to this object through the relation FK_CO_EXAM_SCHDL_PLACE_ED_EXAM_SCHDL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get { return entityData.CoExamSchdlPlaceCollection; }
			set { entityData.CoExamSchdlPlaceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_EXAM_SCHDL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_EXAM_SCHDL_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_CODE_COURSE_ASSESS_ID", "ED_COURSE_ID", "EXAM_DATE", "FROM_TIME", "TO_TIME", "NOTES", "AS_FACULTY_INFO_ID", "ED_CDE_EXAM_TYPE_ID", "GS_CODE_GENDER_ID", "RSULT_APPROVE_DATE", "SE_USER_RSULT_APPROVE_ID", "EXM_SCHD_HOD_APPROVE_DT", "EXM_SCHD_HOD_APPRV_USR_ID", "EXAM_VERSION_NO", "SE_USER_ID", "LAST_DATE", "ED_CDE_EXAM_SCHDL_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdExamSchdlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdExamSchdl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdExamSchdl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdExamSchdl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdExamSchdl Entity 
		///</summary>
		protected virtual EdExamSchdl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdExamSchdl copy = new EdExamSchdl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdExamSchdlId = this.EdExamSchdlId;
					copy.OriginalEdExamSchdlId = this.OriginalEdExamSchdlId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
				copy.EdCourseId = this.EdCourseId;
				copy.ExamDate = this.ExamDate;
				copy.FromTime = this.FromTime;
				copy.ToTime = this.ToTime;
				copy.Notes = this.Notes;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.GsCodeGenderId = this.GsCodeGenderId;
				copy.RsultApproveDate = this.RsultApproveDate;
				copy.SeUserRsultApproveId = this.SeUserRsultApproveId;
				copy.ExmSchdHodApproveDt = this.ExmSchdHodApproveDt;
				copy.ExmSchdHodApprvUsrId = this.ExmSchdHodApprvUsrId;
				copy.ExamVersionNo = this.ExamVersionNo;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.EdCdeExamSchdlTypeId = this.EdCdeExamSchdlTypeId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCdeExamSchdlTypeIdSource != null && existingCopies.Contains(this.EdCdeExamSchdlTypeIdSource))
				copy.EdCdeExamSchdlTypeIdSource = existingCopies[this.EdCdeExamSchdlTypeIdSource] as EdCdeExamSchdlType;
			else
				copy.EdCdeExamSchdlTypeIdSource = MakeCopyOf(this.EdCdeExamSchdlTypeIdSource, existingCopies) as EdCdeExamSchdlType;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				copy.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				copy.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				copy.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				copy.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
		
			//deep copy nested objects
			copy.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection, existingCopies); 
			copy.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection, existingCopies); 
			copy.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			copy.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdExamSchdl Entity 
		///</summary>
		public virtual EdExamSchdl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdExamSchdl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdExamSchdl DeepCopy()
		{
			return EntityHelper.Clone<EdExamSchdl>(this as EdExamSchdl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdExamSchdlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdExamSchdlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdExamSchdlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdExamSchdlColumn column)
		{
			switch(column)
			{
					case EdExamSchdlColumn.EdExamSchdlId:
					return entityData.EdExamSchdlId != _originalData.EdExamSchdlId;
					case EdExamSchdlColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdExamSchdlColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdExamSchdlColumn.EdCodeCourseAssessId:
					return entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
					case EdExamSchdlColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdExamSchdlColumn.ExamDate:
					return entityData.ExamDate != _originalData.ExamDate;
					case EdExamSchdlColumn.FromTime:
					return entityData.FromTime != _originalData.FromTime;
					case EdExamSchdlColumn.ToTime:
					return entityData.ToTime != _originalData.ToTime;
					case EdExamSchdlColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdExamSchdlColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdExamSchdlColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case EdExamSchdlColumn.GsCodeGenderId:
					return entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
					case EdExamSchdlColumn.RsultApproveDate:
					return entityData.RsultApproveDate != _originalData.RsultApproveDate;
					case EdExamSchdlColumn.SeUserRsultApproveId:
					return entityData.SeUserRsultApproveId != _originalData.SeUserRsultApproveId;
					case EdExamSchdlColumn.ExmSchdHodApproveDt:
					return entityData.ExmSchdHodApproveDt != _originalData.ExmSchdHodApproveDt;
					case EdExamSchdlColumn.ExmSchdHodApprvUsrId:
					return entityData.ExmSchdHodApprvUsrId != _originalData.ExmSchdHodApprvUsrId;
					case EdExamSchdlColumn.ExamVersionNo:
					return entityData.ExamVersionNo != _originalData.ExamVersionNo;
					case EdExamSchdlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdExamSchdlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdExamSchdlColumn.EdCdeExamSchdlTypeId:
					return entityData.EdCdeExamSchdlTypeId != _originalData.EdCdeExamSchdlTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdExamSchdlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdExamSchdlId != _originalData.EdExamSchdlId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.ExamDate != _originalData.ExamDate;
			result = result || entityData.FromTime != _originalData.FromTime;
			result = result || entityData.ToTime != _originalData.ToTime;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			result = result || entityData.RsultApproveDate != _originalData.RsultApproveDate;
			result = result || entityData.SeUserRsultApproveId != _originalData.SeUserRsultApproveId;
			result = result || entityData.ExmSchdHodApproveDt != _originalData.ExmSchdHodApproveDt;
			result = result || entityData.ExmSchdHodApprvUsrId != _originalData.ExmSchdHodApprvUsrId;
			result = result || entityData.ExamVersionNo != _originalData.ExamVersionNo;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.EdCdeExamSchdlTypeId != _originalData.EdCdeExamSchdlTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdExamSchdl Entity with the original data.
		///</summary>
		public EdExamSchdl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdExamSchdl(
				_originalData.EdExamSchdlId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdCodeCourseAssessId,
				_originalData.EdCourseId,
				_originalData.ExamDate,
				_originalData.FromTime,
				_originalData.ToTime,
				_originalData.Notes,
				_originalData.AsFacultyInfoId,
				_originalData.EdCdeExamTypeId,
				_originalData.GsCodeGenderId,
				_originalData.RsultApproveDate,
				_originalData.SeUserRsultApproveId,
				_originalData.ExmSchdHodApproveDt,
				_originalData.ExmSchdHodApprvUsrId,
				_originalData.ExamVersionNo,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.EdCdeExamSchdlTypeId
				);
				
			return (EdExamSchdl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdExamSchdlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdExamSchdlBase)
				return ValueEquals(this, (EdExamSchdlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdExamSchdlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdExamSchdlId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.EdCodeCourseAssessId == null) ? string.Empty : this.EdCodeCourseAssessId.ToString()).GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.ExamDate == null) ? string.Empty : this.ExamDate.ToString()).GetHashCode() ^ 
					((this.FromTime == null) ? string.Empty : this.FromTime.ToString()).GetHashCode() ^ 
					((this.ToTime == null) ? string.Empty : this.ToTime.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString()).GetHashCode() ^ 
					((this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString()).GetHashCode() ^ 
					((this.RsultApproveDate == null) ? string.Empty : this.RsultApproveDate.ToString()).GetHashCode() ^ 
					((this.SeUserRsultApproveId == null) ? string.Empty : this.SeUserRsultApproveId.ToString()).GetHashCode() ^ 
					((this.ExmSchdHodApproveDt == null) ? string.Empty : this.ExmSchdHodApproveDt.ToString()).GetHashCode() ^ 
					((this.ExmSchdHodApprvUsrId == null) ? string.Empty : this.ExmSchdHodApprvUsrId.ToString()).GetHashCode() ^ 
					((this.ExamVersionNo == null) ? string.Empty : this.ExamVersionNo.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.EdCdeExamSchdlTypeId == null) ? string.Empty : this.EdCdeExamSchdlTypeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdExamSchdlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdExamSchdlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdExamSchdlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdExamSchdlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdExamSchdlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdExamSchdlBase Object1, EdExamSchdlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdExamSchdlId != Object2.EdExamSchdlId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.EdCodeCourseAssessId != null && Object2.EdCodeCourseAssessId != null )
			{
				if (Object1.EdCodeCourseAssessId != Object2.EdCodeCourseAssessId)
					equal = false;
			}
			else if (Object1.EdCodeCourseAssessId == null ^ Object2.EdCodeCourseAssessId == null )
			{
				equal = false;
			}
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.ExamDate != null && Object2.ExamDate != null )
			{
				if (Object1.ExamDate != Object2.ExamDate)
					equal = false;
			}
			else if (Object1.ExamDate == null ^ Object2.ExamDate == null )
			{
				equal = false;
			}
			if ( Object1.FromTime != null && Object2.FromTime != null )
			{
				if (Object1.FromTime != Object2.FromTime)
					equal = false;
			}
			else if (Object1.FromTime == null ^ Object2.FromTime == null )
			{
				equal = false;
			}
			if ( Object1.ToTime != null && Object2.ToTime != null )
			{
				if (Object1.ToTime != Object2.ToTime)
					equal = false;
			}
			else if (Object1.ToTime == null ^ Object2.ToTime == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeExamTypeId != null && Object2.EdCdeExamTypeId != null )
			{
				if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamTypeId == null ^ Object2.EdCdeExamTypeId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeGenderId != null && Object2.GsCodeGenderId != null )
			{
				if (Object1.GsCodeGenderId != Object2.GsCodeGenderId)
					equal = false;
			}
			else if (Object1.GsCodeGenderId == null ^ Object2.GsCodeGenderId == null )
			{
				equal = false;
			}
			if ( Object1.RsultApproveDate != null && Object2.RsultApproveDate != null )
			{
				if (Object1.RsultApproveDate != Object2.RsultApproveDate)
					equal = false;
			}
			else if (Object1.RsultApproveDate == null ^ Object2.RsultApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserRsultApproveId != null && Object2.SeUserRsultApproveId != null )
			{
				if (Object1.SeUserRsultApproveId != Object2.SeUserRsultApproveId)
					equal = false;
			}
			else if (Object1.SeUserRsultApproveId == null ^ Object2.SeUserRsultApproveId == null )
			{
				equal = false;
			}
			if ( Object1.ExmSchdHodApproveDt != null && Object2.ExmSchdHodApproveDt != null )
			{
				if (Object1.ExmSchdHodApproveDt != Object2.ExmSchdHodApproveDt)
					equal = false;
			}
			else if (Object1.ExmSchdHodApproveDt == null ^ Object2.ExmSchdHodApproveDt == null )
			{
				equal = false;
			}
			if ( Object1.ExmSchdHodApprvUsrId != null && Object2.ExmSchdHodApprvUsrId != null )
			{
				if (Object1.ExmSchdHodApprvUsrId != Object2.ExmSchdHodApprvUsrId)
					equal = false;
			}
			else if (Object1.ExmSchdHodApprvUsrId == null ^ Object2.ExmSchdHodApprvUsrId == null )
			{
				equal = false;
			}
			if ( Object1.ExamVersionNo != null && Object2.ExamVersionNo != null )
			{
				if (Object1.ExamVersionNo != Object2.ExamVersionNo)
					equal = false;
			}
			else if (Object1.ExamVersionNo == null ^ Object2.ExamVersionNo == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeExamSchdlTypeId != null && Object2.EdCdeExamSchdlTypeId != null )
			{
				if (Object1.EdCdeExamSchdlTypeId != Object2.EdCdeExamSchdlTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamSchdlTypeId == null ^ Object2.EdCdeExamSchdlTypeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdExamSchdlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdExamSchdlComparer GetComparer()
        {
            return new EdExamSchdlComparer();
        }
        */

        // Comparer delegates back to EdExamSchdl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdExamSchdl rhs, EdExamSchdlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdExamSchdlColumn.EdExamSchdlId:
            		return this.EdExamSchdlId.CompareTo(rhs.EdExamSchdlId);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdCodeCourseAssessId:
            		return this.EdCodeCourseAssessId.Value.CompareTo(rhs.EdCodeCourseAssessId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.ExamDate:
            		return this.ExamDate.Value.CompareTo(rhs.ExamDate.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.FromTime:
            		return this.FromTime.Value.CompareTo(rhs.FromTime.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.ToTime:
            		return this.ToTime.Value.CompareTo(rhs.ToTime.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.Value.CompareTo(rhs.EdCdeExamTypeId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.GsCodeGenderId:
            		return this.GsCodeGenderId.Value.CompareTo(rhs.GsCodeGenderId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.RsultApproveDate:
            		return this.RsultApproveDate.Value.CompareTo(rhs.RsultApproveDate.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.SeUserRsultApproveId:
            		return this.SeUserRsultApproveId.Value.CompareTo(rhs.SeUserRsultApproveId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.ExmSchdHodApproveDt:
            		return this.ExmSchdHodApproveDt.Value.CompareTo(rhs.ExmSchdHodApproveDt.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.ExmSchdHodApprvUsrId:
            		return this.ExmSchdHodApprvUsrId.Value.CompareTo(rhs.ExmSchdHodApprvUsrId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.ExamVersionNo:
            		return this.ExamVersionNo.Value.CompareTo(rhs.ExamVersionNo.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdExamSchdlColumn.EdCdeExamSchdlTypeId:
            		return this.EdCdeExamSchdlTypeId.Value.CompareTo(rhs.EdCdeExamSchdlTypeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdExamSchdlKey> Members
		
		// member variable for the EntityId property
		private EdExamSchdlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdExamSchdlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdExamSchdlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdExamSchdl")
					.Append("|").Append( this.EdExamSchdlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- EdExamSchdlId: {0}{20}- EdAcadYearId: {1}{20}- EdCodeSemesterId: {2}{20}- EdCodeCourseAssessId: {3}{20}- EdCourseId: {4}{20}- ExamDate: {5}{20}- FromTime: {6}{20}- ToTime: {7}{20}- Notes: {8}{20}- AsFacultyInfoId: {9}{20}- EdCdeExamTypeId: {10}{20}- GsCodeGenderId: {11}{20}- RsultApproveDate: {12}{20}- SeUserRsultApproveId: {13}{20}- ExmSchdHodApproveDt: {14}{20}- ExmSchdHodApprvUsrId: {15}{20}- ExamVersionNo: {16}{20}- SeUserId: {17}{20}- LastDate: {18}{20}- EdCdeExamSchdlTypeId: {19}{20}{22}", 
				this.EdExamSchdlId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.EdCodeCourseAssessId == null) ? string.Empty : this.EdCodeCourseAssessId.ToString(),
				this.EdCourseId,
				(this.ExamDate == null) ? string.Empty : this.ExamDate.ToString(),
				(this.FromTime == null) ? string.Empty : this.FromTime.ToString(),
				(this.ToTime == null) ? string.Empty : this.ToTime.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString(),
				(this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString(),
				(this.RsultApproveDate == null) ? string.Empty : this.RsultApproveDate.ToString(),
				(this.SeUserRsultApproveId == null) ? string.Empty : this.SeUserRsultApproveId.ToString(),
				(this.ExmSchdHodApproveDt == null) ? string.Empty : this.ExmSchdHodApproveDt.ToString(),
				(this.ExmSchdHodApprvUsrId == null) ? string.Empty : this.ExmSchdHodApprvUsrId.ToString(),
				(this.ExamVersionNo == null) ? string.Empty : this.ExamVersionNo.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.EdCdeExamSchdlTypeId == null) ? string.Empty : this.EdCdeExamSchdlTypeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_EXAM_SCHDL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdExamSchdlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_EXAM_SCHDL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_EXAM_SCHDL"</remarks>
		public System.Decimal EdExamSchdlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdExamSchdlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_ASSESS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseAssessId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// EXAM_DATE : 
		/// </summary>
		public System.DateTime?		  ExamDate = null;
		
		/// <summary>
		/// FROM_TIME : 
		/// </summary>
		public System.DateTime?		  FromTime = null;
		
		/// <summary>
		/// TO_TIME : 
		/// </summary>
		public System.DateTime?		  ToTime = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		public System.Decimal?		  EdCdeExamTypeId = null;
		
		/// <summary>
		/// GS_CODE_GENDER_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeGenderId = null;
		
		/// <summary>
		/// RSULT_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  RsultApproveDate = null;
		
		/// <summary>
		/// SE_USER_RSULT_APPROVE_ID : اعتماد نتيجة دور اول  او دور تانى
		/// </summary>
		public System.Decimal?		  SeUserRsultApproveId = null;
		
		/// <summary>
		/// EXM_SCHD_HOD_APPROVE_DT : اعتماد جدول امتحان  دور اول ودور تانى Modular
		/// </summary>
		public System.DateTime?		  ExmSchdHodApproveDt = null;
		
		/// <summary>
		/// EXM_SCHD_HOD_APPRV_USR_ID : اعتماد جدول امتحان
		/// </summary>
		public System.Decimal?		  ExmSchdHodApprvUsrId = null;
		
		/// <summary>
		/// EXAM_VERSION_NO : عدد نماذج
		/// </summary>
		public System.Int32?		  ExamVersionNo = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// ED_CDE_EXAM_SCHDL_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeExamSchdlTypeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCdeExamSchdlType _edCdeExamSchdlTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamSchdlType"/>.
		/// </summary>
		/// <value>The source EdCdeExamSchdlType for EdCdeExamSchdlTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamSchdlType EdCdeExamSchdlTypeIdSource
      	{
            get { return this._edCdeExamSchdlTypeIdSource; }
            set { this._edCdeExamSchdlTypeIdSource = value; }
      	}
		private EdCodeCourseAssess _edCodeCourseAssessIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return this._edCodeCourseAssessIdSource; }
            set { this._edCodeCourseAssessIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private GsCodeGender _gsCodeGenderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return this._gsCodeGenderIdSource; }
            set { this._gsCodeGenderIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CoExaminerCorectorCollection
		
		private TList<CoExaminerCorector> _coExaminerCorectorEdExamSchdlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExaminerCorectorEdExamSchdlId
		/// </summary>
		
		public TList<CoExaminerCorector> CoExaminerCorectorCollection
		{
			get
			{
				if (_coExaminerCorectorEdExamSchdlId == null)
				{
				_coExaminerCorectorEdExamSchdlId = new TList<CoExaminerCorector>();
				}
	
				return _coExaminerCorectorEdExamSchdlId;
			}
			set { _coExaminerCorectorEdExamSchdlId = value; }
		}
		
		#endregion

		#region EdExamStudAbsenceCollection
		
		private TList<EdExamStudAbsence> _edExamStudAbsenceEdExamSchdlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edExamStudAbsenceEdExamSchdlId
		/// </summary>
		
		public TList<EdExamStudAbsence> EdExamStudAbsenceCollection
		{
			get
			{
				if (_edExamStudAbsenceEdExamSchdlId == null)
				{
				_edExamStudAbsenceEdExamSchdlId = new TList<EdExamStudAbsence>();
				}
	
				return _edExamStudAbsenceEdExamSchdlId;
			}
			set { _edExamStudAbsenceEdExamSchdlId = value; }
		}
		
		#endregion

		#region EdStudCheatCollection
		
		private TList<EdStudCheat> _edStudCheatEdExamSchdlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCheatEdExamSchdlId
		/// </summary>
		
		public TList<EdStudCheat> EdStudCheatCollection
		{
			get
			{
				if (_edStudCheatEdExamSchdlId == null)
				{
				_edStudCheatEdExamSchdlId = new TList<EdStudCheat>();
				}
	
				return _edStudCheatEdExamSchdlId;
			}
			set { _edStudCheatEdExamSchdlId = value; }
		}
		
		#endregion

		#region CoExamSchdlPlaceCollection
		
		private TList<CoExamSchdlPlace> _coExamSchdlPlaceEdExamSchdlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamSchdlPlaceEdExamSchdlId
		/// </summary>
		
		public TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get
			{
				if (_coExamSchdlPlaceEdExamSchdlId == null)
				{
				_coExamSchdlPlaceEdExamSchdlId = new TList<CoExamSchdlPlace>();
				}
	
				return _coExamSchdlPlaceEdExamSchdlId;
			}
			set { _coExamSchdlPlaceEdExamSchdlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdExamSchdlEntityData _tmp = new EdExamSchdlEntityData();
						
			_tmp.EdExamSchdlId = this.EdExamSchdlId;
			_tmp.OriginalEdExamSchdlId = this.OriginalEdExamSchdlId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.Notes = this.Notes;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.RsultApproveDate = this.RsultApproveDate;
			_tmp.SeUserRsultApproveId = this.SeUserRsultApproveId;
			_tmp.ExmSchdHodApproveDt = this.ExmSchdHodApproveDt;
			_tmp.ExmSchdHodApprvUsrId = this.ExmSchdHodApprvUsrId;
			_tmp.ExamVersionNo = this.ExamVersionNo;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeExamSchdlTypeId = this.EdCdeExamSchdlTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCdeExamSchdlTypeIdSource != null)
				_tmp.EdCdeExamSchdlTypeIdSource = MakeCopyOf(this.EdCdeExamSchdlTypeIdSource) as EdCdeExamSchdlType;
			if (this.EdCodeCourseAssessIdSource != null)
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource) as EdCodeCourseAssess;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.GsCodeGenderIdSource != null)
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource) as GsCodeGender;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._coExaminerCorectorEdExamSchdlId != null)
				_tmp.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection); 
			if (this._edExamStudAbsenceEdExamSchdlId != null)
				_tmp.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection); 
			if (this._edStudCheatEdExamSchdlId != null)
				_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection); 
			if (this._coExamSchdlPlaceEdExamSchdlId != null)
				_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdExamSchdlEntityData _tmp = new EdExamSchdlEntityData();
						
			_tmp.EdExamSchdlId = this.EdExamSchdlId;
			_tmp.OriginalEdExamSchdlId = this.OriginalEdExamSchdlId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.FromTime = this.FromTime;
			_tmp.ToTime = this.ToTime;
			_tmp.Notes = this.Notes;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.RsultApproveDate = this.RsultApproveDate;
			_tmp.SeUserRsultApproveId = this.SeUserRsultApproveId;
			_tmp.ExmSchdHodApproveDt = this.ExmSchdHodApproveDt;
			_tmp.ExmSchdHodApprvUsrId = this.ExmSchdHodApprvUsrId;
			_tmp.ExamVersionNo = this.ExamVersionNo;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeExamSchdlTypeId = this.EdCdeExamSchdlTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCdeExamSchdlTypeIdSource != null && existingCopies.Contains(this.EdCdeExamSchdlTypeIdSource))
				_tmp.EdCdeExamSchdlTypeIdSource = existingCopies[this.EdCdeExamSchdlTypeIdSource] as EdCdeExamSchdlType;
			else
				_tmp.EdCdeExamSchdlTypeIdSource = MakeCopyOf(this.EdCdeExamSchdlTypeIdSource, existingCopies) as EdCdeExamSchdlType;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				_tmp.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				_tmp.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection, existingCopies); 
			_tmp.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection, existingCopies); 
			_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdExamSchdlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdExamSchdlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdExamSchdlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdExamSchdlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdExamSchdlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdExamSchdlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdExamSchdlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdExamSchdlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdExamSchdlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdExamSchdlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdExamSchdlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdExamSchdlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdExamSchdlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdExamSchdl"/> object.
	/// </remarks>
	public class EdExamSchdlEventArgs : System.EventArgs
	{
		private EdExamSchdlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdExamSchdlEventArgs class.
		///</summary>
		public EdExamSchdlEventArgs(EdExamSchdlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdExamSchdlEventArgs class.
		///</summary>
		public EdExamSchdlEventArgs(EdExamSchdlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdExamSchdlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdExamSchdlColumn" />
		public EdExamSchdlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdExamSchdl related events.
	///</summary>
	public delegate void EdExamSchdlEventHandler(object sender, EdExamSchdlEventArgs e);
	
	#region EdExamSchdlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdExamSchdlComparer : System.Collections.Generic.IComparer<EdExamSchdl>
	{
		EdExamSchdlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdExamSchdlComparer"/> class.
        /// </summary>
		public EdExamSchdlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdExamSchdlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdExamSchdlComparer(EdExamSchdlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdExamSchdl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdExamSchdl"/> to compare.</param>
        /// <param name="b">The second <c>EdExamSchdl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdExamSchdl a, EdExamSchdl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdExamSchdl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdExamSchdl a, EdExamSchdl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdExamSchdlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdExamSchdlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdExamSchdl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdExamSchdlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdExamSchdlKey class.
		/// </summary>
		public EdExamSchdlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdExamSchdlKey class.
		/// </summary>
		public EdExamSchdlKey(EdExamSchdlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdExamSchdlId = entity.EdExamSchdlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdExamSchdlKey class.
		/// </summary>
		public EdExamSchdlKey(System.Decimal _edExamSchdlId)
		{
			#region Init Properties

			this.EdExamSchdlId = _edExamSchdlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdExamSchdlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdExamSchdlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdExamSchdlId property
		private System.Decimal _edExamSchdlId;
		
		/// <summary>
		/// Gets or sets the EdExamSchdlId property.
		/// </summary>
		public System.Decimal EdExamSchdlId
		{
			get { return _edExamSchdlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdExamSchdlId = value;
				
				_edExamSchdlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdExamSchdlId = ( values["EdExamSchdlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdExamSchdlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdExamSchdlId", EdExamSchdlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdExamSchdlId: {0}{1}",
								EdExamSchdlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdExamSchdlColumn Enum
	
	/// <summary>
	/// Enumerate the EdExamSchdl columns.
	/// </summary>
	[Serializable]
	public enum EdExamSchdlColumn : int
	{
		/// <summary>
		/// EdExamSchdlId : 
		/// </summary>
		[EnumTextValue("ED_EXAM_SCHDL_ID")]
		[ColumnEnum("ED_EXAM_SCHDL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdExamSchdlId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// EdCodeCourseAssessId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_ASSESS_ID")]
		[ColumnEnum("ED_CODE_COURSE_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseAssessId = 4,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 5,
		/// <summary>
		/// ExamDate : 
		/// </summary>
		[EnumTextValue("EXAM_DATE")]
		[ColumnEnum("EXAM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ExamDate = 6,
		/// <summary>
		/// FromTime : 
		/// </summary>
		[EnumTextValue("FROM_TIME")]
		[ColumnEnum("FROM_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromTime = 7,
		/// <summary>
		/// ToTime : 
		/// </summary>
		[EnumTextValue("TO_TIME")]
		[ColumnEnum("TO_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToTime = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Notes = 9,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 10,
		/// <summary>
		/// EdCdeExamTypeId : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamTypeId = 11,
		/// <summary>
		/// GsCodeGenderId : 
		/// </summary>
		[EnumTextValue("GS_CODE_GENDER_ID")]
		[ColumnEnum("GS_CODE_GENDER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeGenderId = 12,
		/// <summary>
		/// RsultApproveDate : 
		/// </summary>
		[EnumTextValue("RSULT_APPROVE_DATE")]
		[ColumnEnum("RSULT_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RsultApproveDate = 13,
		/// <summary>
		/// SeUserRsultApproveId : اعتماد نتيجة دور اول  او دور تانى
		/// </summary>
		[EnumTextValue("SE_USER_RSULT_APPROVE_ID")]
		[ColumnEnum("SE_USER_RSULT_APPROVE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserRsultApproveId = 14,
		/// <summary>
		/// ExmSchdHodApproveDt : اعتماد جدول امتحان  دور اول ودور تانى Modular
		/// </summary>
		[EnumTextValue("EXM_SCHD_HOD_APPROVE_DT")]
		[ColumnEnum("EXM_SCHD_HOD_APPROVE_DT", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExmSchdHodApproveDt = 15,
		/// <summary>
		/// ExmSchdHodApprvUsrId : اعتماد جدول امتحان
		/// </summary>
		[EnumTextValue("EXM_SCHD_HOD_APPRV_USR_ID")]
		[ColumnEnum("EXM_SCHD_HOD_APPRV_USR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExmSchdHodApprvUsrId = 16,
		/// <summary>
		/// ExamVersionNo : عدد نماذج
		/// </summary>
		[EnumTextValue("EXAM_VERSION_NO")]
		[ColumnEnum("EXAM_VERSION_NO", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExamVersionNo = 17,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 18,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 19,
		/// <summary>
		/// EdCdeExamSchdlTypeId : 
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_SCHDL_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_SCHDL_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamSchdlTypeId = 20
	}//End enum

	#endregion EdExamSchdlColumn Enum

} // end namespace
